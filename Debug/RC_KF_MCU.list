
RC_KF_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  080110d8  080110d8  000210d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011898  08011898  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011898  08011898  00021898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080118a0  080118a0  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080118a0  080118a0  000218a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080118a4  080118a4  000218a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080118a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001e0  08011a88  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08011a88  000303e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eebd  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ff  00000000  00000000  0003f0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000413d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00041f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000210fd  00000000  00000000  00042a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc16  00000000  00000000  00063b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3784  00000000  00000000  00073783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136f07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004850  00000000  00000000  00136f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080110c0 	.word	0x080110c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080110c0 	.word	0x080110c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetNaN(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	f04f 0300 	mov.w	r3, #0
 800100a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b20      	cmp	r3, #32
 8001012:	d10b      	bne.n	800102c <rtGetNaN+0x34>
    nan = rtGetNaNF();
 8001014:	f000 f820 	bl	8001058 <rtGetNaNF>
 8001018:	ee10 3a10 	vmov	r3, s0
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800102a:	e007      	b.n	800103c <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <rtGetNaN+0x5c>)
 800102e:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8001034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001038:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 800103c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001040:	ec43 2b17 	vmov	d7, r2, r3
}
 8001044:	eeb0 0a47 	vmov.f32	s0, s14
 8001048:	eef0 0a67 	vmov.f32	s1, s15
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	fff80000 	.word	0xfff80000

08001058 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetNaNF(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0.0F } };
 800105e:	f04f 0300 	mov.w	r3, #0
 8001062:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <rtGetNaNF+0x24>)
 8001066:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	ee07 3a90 	vmov	s15, r3
}
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	ffc00000 	.word	0xffc00000

08001080 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
static void rt_InitInfAndNaN(size_t realSize)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8001088:	f7ff ffb6 	bl	8000ff8 <rtGetNaN>
 800108c:	eeb0 7a40 	vmov.f32	s14, s0
 8001090:	eef0 7a60 	vmov.f32	s15, s1
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <rt_InitInfAndNaN+0x70>)
 8001096:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 800109a:	f7ff ffdd 	bl	8001058 <rtGetNaNF>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <rt_InitInfAndNaN+0x74>)
 80010a4:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 80010a8:	f000 f8a4 	bl	80011f4 <rtGetInf>
 80010ac:	eeb0 7a40 	vmov.f32	s14, s0
 80010b0:	eef0 7a60 	vmov.f32	s15, s1
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <rt_InitInfAndNaN+0x78>)
 80010b6:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 80010ba:	f000 f8cb 	bl	8001254 <rtGetInfF>
 80010be:	eef0 7a40 	vmov.f32	s15, s0
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <rt_InitInfAndNaN+0x7c>)
 80010c4:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 80010c8:	f000 f8d4 	bl	8001274 <rtGetMinusInf>
 80010cc:	eeb0 7a40 	vmov.f32	s14, s0
 80010d0:	eef0 7a60 	vmov.f32	s15, s1
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <rt_InitInfAndNaN+0x80>)
 80010d6:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 80010da:	f000 f8fb 	bl	80012d4 <rtGetMinusInfF>
 80010de:	eef0 7a40 	vmov.f32	s15, s0
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <rt_InitInfAndNaN+0x84>)
 80010e4:	edc3 7a00 	vstr	s15, [r3]
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002b8 	.word	0x200002b8
 80010f4:	200002c8 	.word	0x200002c8
 80010f8:	200002a8 	.word	0x200002a8
 80010fc:	200002c0 	.word	0x200002c0
 8001100:	200002b0 	.word	0x200002b0
 8001104:	200002c4 	.word	0x200002c4

08001108 <rtIsInf>:

/* Test if value is infinite */
static boolean_T rtIsInf(real_T value)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0b00 	vstr	d0, [r7]
  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <rtIsInf+0x40>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800111c:	f7ff fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <rtIsInf+0x32>
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <rtIsInf+0x44>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001130:	f7ff fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <rtIsInf+0x36>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <rtIsInf+0x38>
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002a8 	.word	0x200002a8
 800114c:	200002b0 	.word	0x200002b0

08001150 <rtIsNaN>:
  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);
}

/* Test if value is not a number */
static boolean_T rtIsNaN(real_T value)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	ed87 0b00 	vstr	d0, [r7]
  boolean_T result = (boolean_T) 0;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	613b      	str	r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	2b20      	cmp	r3, #32
 8001166:	d10b      	bne.n	8001180 <rtIsNaN+0x30>
    result = rtIsNaNF((real32_T)value);
 8001168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	ee00 3a10 	vmov	s0, r3
 8001176:	f000 f821 	bl	80011bc <rtIsNaNF>
 800117a:	4603      	mov	r3, r0
 800117c:	75fb      	strb	r3, [r7, #23]
 800117e:	e015      	b.n	80011ac <rtIsNaN+0x5c>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.fltVal = value;
 8001180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001184:	e9c7 2302 	strd	r2, r3, [r7, #8]
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <rtIsNaN+0x68>)
 800118c:	4013      	ands	r3, r2
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <rtIsNaN+0x68>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d109      	bne.n	80011a8 <rtIsNaN+0x58>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f3c3 0313 	ubfx	r3, r3, #0, #20
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <rtIsNaN+0x54>
                          (tmpVal.bitVal.words.wordL != 0) ));
 800119e:	68bb      	ldr	r3, [r7, #8]
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <rtIsNaN+0x58>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <rtIsNaN+0x5a>
 80011a8:	2300      	movs	r3, #0
 80011aa:	75fb      	strb	r3, [r7, #23]
  }

  return result;
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3718      	adds	r7, #24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	7ff00000 	.word	0x7ff00000

080011bc <rtIsNaNF>:

/* Test if single-precision value is not a number */
static boolean_T rtIsNaNF(real32_T value)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	ed87 0a01 	vstr	s0, [r7, #4]
  IEEESingle tmp;
  tmp.wordL.wordLreal = value;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f003 43ff 	and.w	r3, r3, #2139095040	; 0x7f800000
 80011d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80011d4:	d106      	bne.n	80011e4 <rtIsNaNF+0x28>
                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f3c3 0316 	ubfx	r3, r3, #0, #23
  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <rtIsNaNF+0x28>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <rtIsNaNF+0x2a>
 80011e4:	2300      	movs	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetInf(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	f04f 0300 	mov.w	r3, #0
 8001206:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b20      	cmp	r3, #32
 800120e:	d10b      	bne.n	8001228 <rtGetInf+0x34>
    inf = rtGetInfF();
 8001210:	f000 f820 	bl	8001254 <rtGetInfF>
 8001214:	ee10 3a10 	vmov	r3, s0
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f995 	bl	8000548 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001226:	e007      	b.n	8001238 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <rtGetInf+0x5c>)
 800122a:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8001230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001234:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8001238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800123c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001240:	eeb0 0a47 	vmov.f32	s0, s14
 8001244:	eef0 0a67 	vmov.f32	s1, s15
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	7ff00000 	.word	0x7ff00000

08001254 <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetInfF(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 800125a:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800125e:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	ee07 3a90 	vmov	s15, r3
}
 8001266:	eeb0 0a67 	vmov.f32	s0, s15
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real_T rtGetMinusInf(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 800127a:	2340      	movs	r3, #64	; 0x40
 800127c:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b20      	cmp	r3, #32
 800128e:	d10b      	bne.n	80012a8 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8001290:	f000 f820 	bl	80012d4 <rtGetMinusInfF>
 8001294:	ee10 3a10 	vmov	r3, s0
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80012a6:	e007      	b.n	80012b8 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <rtGetMinusInf+0x5c>)
 80012aa:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 80012b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 80012b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80012c0:	eeb0 0a47 	vmov.f32	s0, s14
 80012c4:	eef0 0a67 	vmov.f32	s1, s15
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	fff00000 	.word	0xfff00000

080012d4 <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
static real32_T rtGetMinusInfF(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <rtGetMinusInfF+0x20>)
 80012dc:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ee07 3a90 	vmov	s15, r3
}
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	ff800000 	.word	0xff800000

080012f8 <look1_binlca>:

static real_T look1_binlca(real_T u0, const real_T bp0[], const real_T table[],
  uint32_T maxIndex)
{
 80012f8:	b5b0      	push	{r4, r5, r7, lr}
 80012fa:	b090      	sub	sp, #64	; 0x40
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
     Extrapolation method: 'Clip'
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'on'
     Remove protection against out-of-range input in generated code: 'off'
   */
  if (u0 <= bp0[0U]) {
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001312:	f7ff fbed 	bl	8000af0 <__aeabi_dcmple>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <look1_binlca+0x36>
    iLeft = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = 0.0;
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800132c:	e060      	b.n	80013f0 <look1_binlca+0xf8>
  } else if (u0 < bp0[maxIndex]) {
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800133e:	f7ff fbcd 	bl	8000adc <__aeabi_dcmplt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d04b      	beq.n	80013e0 <look1_binlca+0xe8>
    uint32_T bpIdx;
    uint32_T iRght;

    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    iLeft = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    iRght = maxIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    while (iRght - iLeft > 1U) {
 8001356:	e016      	b.n	8001386 <look1_binlca+0x8e>
      if (u0 < bp0[bpIdx]) {
 8001358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001368:	f7ff fbb8 	bl	8000adc <__aeabi_dcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <look1_binlca+0x80>
        iRght = bpIdx;
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
 8001376:	e001      	b.n	800137c <look1_binlca+0x84>
      } else {
        iLeft = bpIdx;
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      bpIdx = (iRght + iLeft) >> 1U;
 800137c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	4413      	add	r3, r2
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
    while (iRght - iLeft > 1U) {
 8001386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d8e3      	bhi.n	8001358 <look1_binlca+0x60>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013a0:	f7fe ff72 	bl	8000288 <__aeabi_dsub>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4614      	mov	r4, r2
 80013aa:	461d      	mov	r5, r3
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	3301      	adds	r3, #1
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4413      	add	r3, r2
 80013b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c6:	f7fe ff5f 	bl	8000288 <__aeabi_dsub>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4620      	mov	r0, r4
 80013d0:	4629      	mov	r1, r5
 80013d2:	f7ff fa3b 	bl	800084c <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80013de:	e007      	b.n	80013f0 <look1_binlca+0xf8>
  } else {
    iLeft = maxIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    frac = 0.0;
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'on'
     Overflow mode: 'wrapping'
   */
  if (iLeft == maxIndex) {
 80013f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d108      	bne.n	800140a <look1_binlca+0x112>
    y = table[iLeft];
 80013f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	68ba      	ldr	r2, [r7, #8]
 80013fe:	4413      	add	r3, r2
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001408:	e024      	b.n	8001454 <look1_binlca+0x15c>
  } else {
    real_T yL_0d0;
    yL_0d0 = table[iLeft];
 800140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	4413      	add	r3, r2
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = (table[iLeft + 1U] - yL_0d0) * frac + yL_0d0;
 800141a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141c:	3301      	adds	r3, #1
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	4413      	add	r3, r2
 8001424:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800142c:	f7fe ff2c 	bl	8000288 <__aeabi_dsub>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800143c:	f7ff f8dc 	bl	80005f8 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001448:	f7fe ff20 	bl	800028c <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  }

  return y;
 8001454:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001458:	ec43 2b17 	vmov	d7, r2, r3
}
 800145c:	eeb0 0a47 	vmov.f32	s0, s14
 8001460:	eef0 0a67 	vmov.f32	s1, s15
 8001464:	3740      	adds	r7, #64	; 0x40
 8001466:	46bd      	mov	sp, r7
 8001468:	bdb0      	pop	{r4, r5, r7, pc}

0800146a <look1_binlg>:

static real_T look1_binlg(real_T u0, const real_T bp0[], const real_T table[],
  uint32_T maxIndex)
{
 800146a:	b5b0      	push	{r4, r5, r7, lr}
 800146c:	b08c      	sub	sp, #48	; 0x30
 800146e:	af00      	add	r7, sp, #0
 8001470:	ed87 0b04 	vstr	d0, [r7, #16]
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
     Use previous index: 'off'
     Use last breakpoint for index at or above upper limit: 'off'
     Remove protection against out-of-range input in generated code: 'on'
   */
  /* Binary Search */
  bpIdx = maxIndex >> 1U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	085b      	lsrs	r3, r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iLeft = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  iRght = maxIndex;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  while (iRght - iLeft > 1U) {
 8001488:	e016      	b.n	80014b8 <look1_binlg+0x4e>
    if (u0 < bp0[bpIdx]) {
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800149a:	f7ff fb1f 	bl	8000adc <__aeabi_dcmplt>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <look1_binlg+0x40>
      iRght = bpIdx;
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	e001      	b.n	80014ae <look1_binlg+0x44>
    } else {
      iLeft = bpIdx;
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    bpIdx = (iRght + iLeft) >> 1U;
 80014ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	4413      	add	r3, r2
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (iRght - iLeft > 1U) {
 80014b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d8e3      	bhi.n	800148a <look1_binlg+0x20>
  /* Column-major Interpolation 1-D
     Interpolation method: 'Linear point-slope'
     Use last breakpoint for index at or above upper limit: 'off'
     Overflow mode: 'wrapping'
   */
  yL_0d0 = table[iLeft];
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]) * (table[iLeft + 1U]
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80014e2:	f7fe fed1 	bl	8000288 <__aeabi_dsub>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4614      	mov	r4, r2
 80014ec:	461d      	mov	r5, r3
 80014ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f0:	3301      	adds	r3, #1
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7fe febe 	bl	8000288 <__aeabi_dsub>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff f99a 	bl	800084c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001522:	3301      	adds	r3, #1
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	e9d3 0100 	ldrd	r0, r1, [r3]
    - yL_0d0) + yL_0d0;
 800152e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001532:	f7fe fea9 	bl	8000288 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
  return (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]) * (table[iLeft + 1U]
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7ff f85b 	bl	80005f8 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
    - yL_0d0) + yL_0d0;
 800154a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800154e:	f7fe fe9d 	bl	800028c <__adddf3>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b17 	vmov	d7, r2, r3
}
 800155a:	eeb0 0a47 	vmov.f32	s0, s14
 800155e:	eef0 0a67 	vmov.f32	s1, s15
 8001562:	3730      	adds	r7, #48	; 0x30
 8001564:	46bd      	mov	sp, r7
 8001566:	bdb0      	pop	{r4, r5, r7, pc}

08001568 <div_nde_s32_floor>:

static int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	0fdb      	lsrs	r3, r3, #31
 8001576:	b2da      	uxtb	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	0fdb      	lsrs	r3, r3, #31
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4053      	eors	r3, r2
 8001580:	b2db      	uxtb	r3, r3
           0) ? -1 : 0) + numerator / denominator;
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00c      	beq.n	80015a0 <div_nde_s32_floor+0x38>
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	fb93 f2f2 	sdiv	r2, r3, r2
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	fb01 f202 	mul.w	r2, r1, r2
 8001594:	1a9b      	subs	r3, r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <div_nde_s32_floor+0x38>
           0) ? -1 : 0) + numerator / denominator;
 800159a:	f04f 32ff 	mov.w	r2, #4294967295
 800159e:	e000      	b.n	80015a2 <div_nde_s32_floor+0x3a>
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	fb91 f3f3 	sdiv	r3, r1, r3
 80015aa:	4413      	add	r3, r2
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <xnrm2>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T xnrm2(int32_T n, const real_T x[4], int32_T ix0)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b092      	sub	sp, #72	; 0x48
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f340 8090 	ble.w	80016f8 <xnrm2+0x140>
    if (n == 1) {
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d10e      	bne.n	80015fc <xnrm2+0x44>
      y = fabs(x[ix0 - 1]);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80015e4:	3b01      	subs	r3, #1
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	68ba      	ldr	r2, [r7, #8]
 80015ea:	4413      	add	r3, r2
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	4611      	mov	r1, r2
 80015f2:	6439      	str	r1, [r7, #64]	; 0x40
 80015f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
 80015fa:	e07d      	b.n	80016f8 <xnrm2+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8001604:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4413      	add	r3, r2
 800160e:	3b01      	subs	r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001616:	e05d      	b.n	80016d4 <xnrm2+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8001618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800161a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800161e:	3b01      	subs	r3, #1
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	4413      	add	r3, r2
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	4611      	mov	r1, r2
 800162c:	6239      	str	r1, [r7, #32]
 800162e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8001634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001638:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800163c:	f7ff fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d029      	beq.n	800169a <xnrm2+0xe2>
          real_T t;
          t = scale / absxk;
 8001646:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800164a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800164e:	f7ff f8fd 	bl	800084c <__aeabi_ddiv>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800165a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800165e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001662:	f7fe ffc9 	bl	80005f8 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001672:	f7fe ffc1 	bl	80005f8 <__aeabi_dmul>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <xnrm2+0x158>)
 8001684:	f7fe fe02 	bl	800028c <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8001690:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001694:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001698:	e019      	b.n	80016ce <xnrm2+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 800169a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800169e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80016a2:	f7ff f8d3 	bl	800084c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80016ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016b6:	f7fe ff9f 	bl	80005f8 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80016c2:	f7fe fde3 	bl	800028c <__adddf3>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80016ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016d0:	3301      	adds	r3, #1
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d8:	429a      	cmp	r2, r3
 80016da:	dd9d      	ble.n	8001618 <xnrm2+0x60>
        }
      }

      y = scale * sqrt(y);
 80016dc:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 80016e0:	f00f fa52 	bl	8010b88 <sqrt>
 80016e4:	ec53 2b10 	vmov	r2, r3, d0
 80016e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80016ec:	f7fe ff84 	bl	80005f8 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 80016f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80016fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001700:	eeb0 0a47 	vmov.f32	s0, s14
 8001704:	eef0 0a67 	vmov.f32	s1, s15
 8001708:	3748      	adds	r7, #72	; 0x48
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	3ff00000 	.word	0x3ff00000
 8001714:	00000000 	.word	0x00000000

08001718 <rt_hypotd_snf>:

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b08b      	sub	sp, #44	; 0x2c
 800171c:	af00      	add	r7, sp, #0
 800171e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001722:	ed87 1b00 	vstr	d1, [r7]
  real_T a;
  real_T b;
  real_T y;
  a = fabs(u0);
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	68fc      	ldr	r4, [r7, #12]
 800172a:	f024 4100 	bic.w	r1, r4, #2147483648	; 0x80000000
 800172e:	e9c7 0106 	strd	r0, r1, [r7, #24]
  b = fabs(u1);
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800173a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (a < b) {
 800173e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001746:	f7ff f9c9 	bl	8000adc <__aeabi_dcmplt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d02d      	beq.n	80017ac <rt_hypotd_snf+0x94>
    a /= b;
 8001750:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001754:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001758:	f7ff f878 	bl	800084c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2306 	strd	r2, r3, [r7, #24]
    y = sqrt(a * a + 1.0) * b;
 8001764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001768:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800176c:	f7fe ff44 	bl	80005f8 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b3a      	ldr	r3, [pc, #232]	; (8001868 <rt_hypotd_snf+0x150>)
 800177e:	f7fe fd85 	bl	800028c <__adddf3>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	ec43 2b17 	vmov	d7, r2, r3
 800178a:	eeb0 0a47 	vmov.f32	s0, s14
 800178e:	eef0 0a67 	vmov.f32	s1, s15
 8001792:	f00f f9f9 	bl	8010b88 <sqrt>
 8001796:	ec53 2b10 	vmov	r2, r3, d0
 800179a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80017aa:	e04e      	b.n	800184a <rt_hypotd_snf+0x132>
  } else if (a > b) {
 80017ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017b4:	f7ff f9b0 	bl	8000b18 <__aeabi_dcmpgt>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d02d      	beq.n	800181a <rt_hypotd_snf+0x102>
    b /= a;
 80017be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017c6:	f7ff f841 	bl	800084c <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9c7 2304 	strd	r2, r3, [r7, #16]
    y = sqrt(b * b + 1.0) * a;
 80017d2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017da:	f7fe ff0d 	bl	80005f8 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4610      	mov	r0, r2
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <rt_hypotd_snf+0x150>)
 80017ec:	f7fe fd4e 	bl	800028c <__adddf3>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	ec43 2b17 	vmov	d7, r2, r3
 80017f8:	eeb0 0a47 	vmov.f32	s0, s14
 80017fc:	eef0 0a67 	vmov.f32	s1, s15
 8001800:	f00f f9c2 	bl	8010b88 <sqrt>
 8001804:	ec53 2b10 	vmov	r2, r3, d0
 8001808:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001818:	e017      	b.n	800184a <rt_hypotd_snf+0x132>
  } else if (rtIsNaN(b)) {
 800181a:	ed97 0b04 	vldr	d0, [r7, #16]
 800181e:	f7ff fc97 	bl	8001150 <rtIsNaN>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d005      	beq.n	8001834 <rt_hypotd_snf+0x11c>
    y = (rtNaN);
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <rt_hypotd_snf+0x154>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001832:	e00a      	b.n	800184a <rt_hypotd_snf+0x132>
  } else {
    y = a * 1.4142135623730951;
 8001834:	a30a      	add	r3, pc, #40	; (adr r3, 8001860 <rt_hypotd_snf+0x148>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800183e:	f7fe fedb 	bl	80005f8 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return y;
 800184a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800184e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001852:	eeb0 0a47 	vmov.f32	s0, s14
 8001856:	eef0 0a67 	vmov.f32	s1, s15
 800185a:	372c      	adds	r7, #44	; 0x2c
 800185c:	46bd      	mov	sp, r7
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	667f3bcd 	.word	0x667f3bcd
 8001864:	3ff6a09e 	.word	0x3ff6a09e
 8001868:	3ff00000 	.word	0x3ff00000
 800186c:	200002b8 	.word	0x200002b8

08001870 <qrFactor>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T qrFactor(const real_T A[3], const real_T S[9], real_T Ns)
{
 8001870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001874:	b098      	sub	sp, #96	; 0x60
 8001876:	af00      	add	r7, sp, #0
 8001878:	6278      	str	r0, [r7, #36]	; 0x24
 800187a:	6239      	str	r1, [r7, #32]
 800187c:	ed87 0b06 	vstr	d0, [r7, #24]
  real_T b_A[4];
  real_T b_S;
  real_T s;
  int32_T aoffset;
  int32_T i;
  for (i = 0; i < 3; i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	64bb      	str	r3, [r7, #72]	; 0x48
 8001884:	e04b      	b.n	800191e <qrFactor+0xae>
    aoffset = i * 3;
 8001886:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
    b_A[i] = (S[aoffset + 1] * A[1] + S[aoffset] * A[0]) + S[aoffset + 2] * A[2];
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	3301      	adds	r3, #1
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	6a3a      	ldr	r2, [r7, #32]
 8001898:	4413      	add	r3, r2
 800189a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	3308      	adds	r3, #8
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4690      	mov	r8, r2
 80018b0:	4699      	mov	r9, r3
 80018b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	6a3a      	ldr	r2, [r7, #32]
 80018b8:	4413      	add	r3, r2
 80018ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fe98 	bl	80005f8 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4640      	mov	r0, r8
 80018ce:	4649      	mov	r1, r9
 80018d0:	f7fe fcdc 	bl	800028c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4690      	mov	r8, r2
 80018da:	4699      	mov	r9, r3
 80018dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018de:	3302      	adds	r3, #2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	4413      	add	r3, r2
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	3310      	adds	r3, #16
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe81 	bl	80005f8 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4640      	mov	r0, r8
 80018fc:	4649      	mov	r1, r9
 80018fe:	f7fe fcc5 	bl	800028c <__adddf3>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001908:	00c9      	lsls	r1, r1, #3
 800190a:	3148      	adds	r1, #72	; 0x48
 800190c:	f107 0018 	add.w	r0, r7, #24
 8001910:	4401      	add	r1, r0
 8001912:	3938      	subs	r1, #56	; 0x38
 8001914:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8001918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800191a:	3301      	adds	r3, #1
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001920:	2b02      	cmp	r3, #2
 8001922:	ddb0      	ble.n	8001886 <qrFactor+0x16>
  }

  b_A[3] = Ns;
 8001924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001928:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  b_S = b_A[0];
 800192c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001930:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  s = xnrm2(3, b_A, 2);
 8001934:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001938:	2202      	movs	r2, #2
 800193a:	4619      	mov	r1, r3
 800193c:	2003      	movs	r0, #3
 800193e:	f7ff fe3b 	bl	80015b8 <xnrm2>
 8001942:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
  if (s != 0.0) {
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001952:	f7ff f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	f040 80c8 	bne.w	8001aee <qrFactor+0x27e>
    s = rt_hypotd_snf(b_A[0], s);
 800195e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001962:	ed97 1b14 	vldr	d1, [r7, #80]	; 0x50
 8001966:	eeb0 0a47 	vmov.f32	s0, s14
 800196a:	eef0 0a67 	vmov.f32	s1, s15
 800196e:	f7ff fed3 	bl	8001718 <rt_hypotd_snf>
 8001972:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (b_A[0] >= 0.0) {
 8001976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f7ff f8bf 	bl	8000b04 <__aeabi_dcmpge>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d009      	beq.n	80019a0 <qrFactor+0x130>
      s = -s;
 800198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001992:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	ed97 7b00 	vldr	d7, [r7]
 800199c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
    }

    if (fabs(s) < 1.0020841800044864E-292) {
 80019a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80019b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019b8:	f7ff f890 	bl	8000adc <__aeabi_dcmplt>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8091 	beq.w	8001ae6 <qrFactor+0x276>
      aoffset = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      do {
        aoffset++;
 80019c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ca:	3301      	adds	r3, #1
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
        b_A[1] *= 9.9792015476736E+291;
 80019ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <qrFactor+0x298>)
 80019d8:	f7fe fe0e 	bl	80005f8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        b_A[2] *= 9.9792015476736E+291;
 80019e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <qrFactor+0x298>)
 80019ee:	f7fe fe03 	bl	80005f8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
        b_A[3] *= 9.9792015476736E+291;
 80019fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <qrFactor+0x298>)
 8001a04:	f7fe fdf8 	bl	80005f8 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
        s *= 9.9792015476736E+291;
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <qrFactor+0x298>)
 8001a16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
        b_S *= 9.9792015476736E+291;
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b37      	ldr	r3, [pc, #220]	; (8001b08 <qrFactor+0x298>)
 8001a2c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a30:	f7fe fde2 	bl	80005f8 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
      } while ((fabs(s) < 1.0020841800044864E-292) && (aoffset < 20));
 8001a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8001a50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a54:	f7ff f842 	bl	8000adc <__aeabi_dcmplt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <qrFactor+0x1f4>
 8001a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a60:	2b13      	cmp	r3, #19
 8001a62:	ddb1      	ble.n	80019c8 <qrFactor+0x158>

      s = rt_hypotd_snf(b_S, xnrm2(3, b_A, 2));
 8001a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f7ff fda3 	bl	80015b8 <xnrm2>
 8001a72:	eeb0 7a40 	vmov.f32	s14, s0
 8001a76:	eef0 7a60 	vmov.f32	s15, s1
 8001a7a:	eeb0 1a47 	vmov.f32	s2, s14
 8001a7e:	eef0 1a67 	vmov.f32	s3, s15
 8001a82:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 8001a86:	f7ff fe47 	bl	8001718 <rt_hypotd_snf>
 8001a8a:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
      if (b_S >= 0.0) {
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a9a:	f7ff f833 	bl	8000b04 <__aeabi_dcmpge>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <qrFactor+0x240>
        s = -s;
 8001aa4:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aa8:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001aac:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
      }

      for (i = 0; i < aoffset; i++) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ab4:	e00e      	b.n	8001ad4 <qrFactor+0x264>
        s *= 1.0020841800044864E-292;
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8001abe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ac2:	f7fe fd99 	bl	80005f8 <__aeabi_dmul>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
      for (i = 0; i < aoffset; i++) {
 8001ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbec      	blt.n	8001ab6 <qrFactor+0x246>
      }

      b_S = s;
 8001adc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ae0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001ae4:	e003      	b.n	8001aee <qrFactor+0x27e>
    } else {
      b_S = s;
 8001ae6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001aea:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    }
  }

  return b_S;
 8001aee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001af2:	ec43 2b17 	vmov	d7, r2, r3
}
 8001af6:	eeb0 0a47 	vmov.f32	s0, s14
 8001afa:	eef0 0a67 	vmov.f32	s1, s15
 8001afe:	3760      	adds	r7, #96	; 0x60
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b06:	bf00      	nop
 8001b08:	7c900000 	.word	0x7c900000

08001b0c <trisolve>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void trisolve(real_T A, real_T B_1[3])
{
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b16:	6078      	str	r0, [r7, #4]
  if (B_1[0] != 0.0) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	f7fe ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10b      	bne.n	8001b48 <trisolve+0x3c>
    B_1[0] /= A;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b3a:	f7fe fe87 	bl	800084c <__aeabi_ddiv>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	e9c1 2300 	strd	r2, r3, [r1]
  }

  if (B_1[1] != 0.0) {
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	f7fe ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10e      	bne.n	8001b80 <trisolve+0x74>
    B_1[1] /= A;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3308      	adds	r3, #8
 8001b66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 0408 	add.w	r4, r3, #8
 8001b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b74:	f7fe fe6a 	bl	800084c <__aeabi_ddiv>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	e9c4 2300 	strd	r2, r3, [r4]
  }

  if (B_1[2] != 0.0) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3310      	adds	r3, #16
 8001b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	f7fe ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d000      	beq.n	8001b9c <trisolve+0x90>
    B_1[2] /= A;
  }
}
 8001b9a:	e00e      	b.n	8001bba <trisolve+0xae>
    B_1[2] /= A;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3310      	adds	r3, #16
 8001ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f103 0410 	add.w	r4, r3, #16
 8001baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bae:	f7fe fe4d 	bl	800084c <__aeabi_ddiv>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd90      	pop	{r4, r7, pc}

08001bc2 <mtimes>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void mtimes(const real_T A[9], const real_T B_0[9], real_T C[9])
{
 8001bc2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  int32_T i;
  int32_T j;
  for (j = 0; j < 3; j++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	e065      	b.n	8001ca2 <mtimes+0xe0>
    int32_T coffset;
    coffset = j * 3;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
    for (i = 0; i < 3; i++) {
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	e057      	b.n	8001c96 <mtimes+0xd4>
      int32_T aoffset;
      aoffset = i * 3;
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
      C[coffset + i] = (A[aoffset + 1] * B_0[j + 3] + A[aoffset] * B_0[j]) +
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	3303      	adds	r3, #3
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	4413      	add	r3, r2
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe fcf4 	bl	80005f8 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fce2 	bl	80005f8 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fb26 	bl	800028c <__adddf3>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4690      	mov	r8, r2
 8001c46:	4699      	mov	r9, r3
        A[aoffset + 2] * B_0[j + 6];
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	3302      	adds	r3, #2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	3306      	adds	r3, #6
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4413      	add	r3, r2
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fcc8 	bl	80005f8 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
      C[coffset + i] = (A[aoffset + 1] * B_0[j + 3] + A[aoffset] * B_0[j]) +
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	18d4      	adds	r4, r2, r3
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4640      	mov	r0, r8
 8001c82:	4649      	mov	r1, r9
 8001c84:	f7fe fb02 	bl	800028c <__adddf3>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	e9c4 2300 	strd	r2, r3, [r4]
    for (i = 0; i < 3; i++) {
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	dda4      	ble.n	8001be6 <mtimes+0x24>
  for (j = 0; j < 3; j++) {
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	dd96      	ble.n	8001bd6 <mtimes+0x14>
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001cb4 <xnrm2_g>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T xnrm2_g(int32_T n, const real_T x[12], int32_T ix0)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b092      	sub	sp, #72	; 0x48
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f340 8090 	ble.w	8001df4 <xnrm2_g+0x140>
    if (n == 1) {
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10e      	bne.n	8001cf8 <xnrm2_g+0x44>
      y = fabs(x[ix0 - 1]);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cec:	4611      	mov	r1, r2
 8001cee:	6439      	str	r1, [r7, #64]	; 0x40
 8001cf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8001cf6:	e07d      	b.n	8001df4 <xnrm2_g+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8001d00:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d12:	e05d      	b.n	8001dd0 <xnrm2_g+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8001d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d16:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	4611      	mov	r1, r2
 8001d28:	6239      	str	r1, [r7, #32]
 8001d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8001d30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d38:	f7fe feee 	bl	8000b18 <__aeabi_dcmpgt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d029      	beq.n	8001d96 <xnrm2_g+0xe2>
          real_T t;
          t = scale / absxk;
 8001d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d46:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d4a:	f7fe fd7f 	bl	800084c <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8001d56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d5a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001d5e:	f7fe fc4b 	bl	80005f8 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d6e:	f7fe fc43 	bl	80005f8 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <xnrm2_g+0x158>)
 8001d80:	f7fe fa84 	bl	800028c <__adddf3>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8001d8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d94:	e019      	b.n	8001dca <xnrm2_g+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8001d96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d9a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d9e:	f7fe fd55 	bl	800084c <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8001daa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db2:	f7fe fc21 	bl	80005f8 <__aeabi_dmul>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001dbe:	f7fe fa65 	bl	800028c <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8001dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dcc:	3301      	adds	r3, #1
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dd9d      	ble.n	8001d14 <xnrm2_g+0x60>
        }
      }

      y = scale * sqrt(y);
 8001dd8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8001ddc:	f00e fed4 	bl	8010b88 <sqrt>
 8001de0:	ec53 2b10 	vmov	r2, r3, d0
 8001de4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001de8:	f7fe fc06 	bl	80005f8 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8001df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001df8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8001e00:	eef0 0a67 	vmov.f32	s1, s15
 8001e04:	3748      	adds	r7, #72	; 0x48
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	3ff00000 	.word	0x3ff00000

08001e10 <xgemv>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xgemv(int32_T m, int32_T n, const real_T A[12], int32_T ia0, const
                  real_T x[12], int32_T ix0, real_T y[3])
{
 8001e10:	b590      	push	{r4, r7, lr}
 8001e12:	b08b      	sub	sp, #44	; 0x2c
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T iyend;
  if ((m != 0) && (n != 0)) {
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d069      	beq.n	8001ef8 <xgemv+0xe8>
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d066      	beq.n	8001ef8 <xgemv+0xe8>
    int32_T b;
    if (n - 1 >= 0) {
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	dd06      	ble.n	8001e3e <xgemv+0x2e>
      memset(&y[0], 0, (uint32_T)n * sizeof(real_T));
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	461a      	mov	r2, r3
 8001e36:	2100      	movs	r1, #0
 8001e38:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e3a:	f00a fbc7 	bl	800c5cc <memset>
    }

    b = ((n - 1) << 2) + ia0;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
    for (b_iy = ia0; b_iy <= b; b_iy += 4) {
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4e:	e04f      	b.n	8001ef0 <xgemv+0xe0>
      real_T c;
      int32_T d;
      c = 0.0;
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9c7 2306 	strd	r2, r3, [r7, #24]
      d = b_iy + m;
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4413      	add	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      for (iyend = b_iy; iyend < d; iyend++) {
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	e024      	b.n	8001eb4 <xgemv+0xa4>
        c += x[((ix0 + iyend) - b_iy) - 1] * A[iyend - 1];
 8001e6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e6c:	6a3b      	ldr	r3, [r7, #32]
 8001e6e:	441a      	add	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e7e:	4413      	add	r3, r2
 8001e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbaf 	bl	80005f8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ea2:	f7fe f9f3 	bl	800028c <__adddf3>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	e9c7 2306 	strd	r2, r3, [r7, #24]
      for (iyend = b_iy; iyend < d; iyend++) {
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbd6      	blt.n	8001e6a <xgemv+0x5a>
      }

      iyend = (b_iy - ia0) >> 2;
 8001ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	109b      	asrs	r3, r3, #2
 8001ec4:	623b      	str	r3, [r7, #32]
      y[iyend] += c;
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ecc:	4413      	add	r3, r2
 8001ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ed8:	18d4      	adds	r4, r2, r3
 8001eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_iy = ia0; b_iy <= b; b_iy += 4) {
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	3304      	adds	r3, #4
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	ddab      	ble.n	8001e50 <xgemv+0x40>
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	372c      	adds	r7, #44	; 0x2c
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}

08001f00 <xgerc>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xgerc(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const real_T
                  y[3], real_T A[12], int32_T ia0)
{
 8001f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f02:	b08f      	sub	sp, #60	; 0x3c
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6178      	str	r0, [r7, #20]
 8001f08:	6139      	str	r1, [r7, #16]
 8001f0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
  int32_T ijA;
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f1e:	f7fe fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d000      	beq.n	8001f2a <xgerc+0x2a>
      }

      jA += 4;
    }
  }
}
 8001f28:	e068      	b.n	8001ffc <xgerc+0xfc>
    jA = ia0;
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8001f2e:	2300      	movs	r3, #0
 8001f30:	633b      	str	r3, [r7, #48]	; 0x30
 8001f32:	e05f      	b.n	8001ff4 <xgerc+0xf4>
      temp = y[j];
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	e9c7 2308 	strd	r2, r3, [r7, #32]
      if (temp != 0.0) {
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f50:	f7fe fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d146      	bne.n	8001fe8 <xgerc+0xe8>
        temp *= alpha1;
 8001f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
        b = m + jA;
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f72:	4413      	add	r3, r2
 8001f74:	61fb      	str	r3, [r7, #28]
        for (ijA = jA; ijA < b; ijA++) {
 8001f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f78:	637b      	str	r3, [r7, #52]	; 0x34
 8001f7a:	e031      	b.n	8001fe0 <xgerc+0xe0>
          A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f82:	3b01      	subs	r3, #1
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f88:	4413      	add	r3, r2
 8001f8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	441a      	add	r2, r3
 8001f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fa2:	4413      	add	r3, r2
 8001fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fac:	f7fe fb24 	bl	80005f8 <__aeabi_dmul>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fc4:	18d6      	adds	r6, r2, r3
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	f7fe f95d 	bl	800028c <__adddf3>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	e9c6 2300 	strd	r2, r3, [r6]
        for (ijA = jA; ijA < b; ijA++) {
 8001fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fdc:	3301      	adds	r3, #1
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	dbc9      	blt.n	8001f7c <xgerc+0x7c>
      jA += 4;
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	3304      	adds	r3, #4
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	db9b      	blt.n	8001f34 <xgerc+0x34>
}
 8001ffc:	bf00      	nop
 8001ffe:	373c      	adds	r7, #60	; 0x3c
 8002000:	46bd      	mov	sp, r7
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002004 <qrFactor_j>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void qrFactor_j(const real_T A[9], real_T S[9], const real_T Ns[3])
{
 8002004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002008:	b0d3      	sub	sp, #332	; 0x14c
 800200a:	af04      	add	r7, sp, #16
 800200c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002010:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002014:	6018      	str	r0, [r3, #0]
 8002016:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800201a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800201e:	6019      	str	r1, [r3, #0]
 8002020:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002024:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002028:	601a      	str	r2, [r3, #0]
  int32_T coltop;
  int32_T i;
  int32_T ii;
  int32_T knt;
  int32_T lastv;
  mtimes(S, A, R);
 800202a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800202e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002032:	f5a3 718a 	sub.w	r1, r3, #276	; 0x114
 8002036:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800203a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800203e:	6809      	ldr	r1, [r1, #0]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f7ff fdbe 	bl	8001bc2 <mtimes>
  for (i = 0; i < 3; i++) {
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800204c:	e07d      	b.n	800214a <qrFactor_j+0x146>
    ii = i << 2;
 800204e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    b_A[ii] = R[3 * i];
 8002058:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002068:	f107 0218 	add.w	r2, r7, #24
 800206c:	4413      	add	r3, r2
 800206e:	3be0      	subs	r3, #224	; 0xe0
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8002078:	00c9      	lsls	r1, r1, #3
 800207a:	f501 7190 	add.w	r1, r1, #288	; 0x120
 800207e:	f107 0018 	add.w	r0, r7, #24
 8002082:	4401      	add	r1, r0
 8002084:	3998      	subs	r1, #152	; 0x98
 8002086:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[ii + 1] = R[3 * i + 1];
 800208a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3301      	adds	r3, #1
 8002096:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800209a:	1c51      	adds	r1, r2, #1
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80020a2:	f107 0218 	add.w	r2, r7, #24
 80020a6:	4413      	add	r3, r2
 80020a8:	3be0      	subs	r3, #224	; 0xe0
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	00c9      	lsls	r1, r1, #3
 80020b0:	f501 7190 	add.w	r1, r1, #288	; 0x120
 80020b4:	f107 0018 	add.w	r0, r7, #24
 80020b8:	4401      	add	r1, r0
 80020ba:	3998      	subs	r1, #152	; 0x98
 80020bc:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[ii + 2] = R[3 * i + 2];
 80020c0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	3302      	adds	r3, #2
 80020cc:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020d0:	1c91      	adds	r1, r2, #2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80020d8:	f107 0218 	add.w	r2, r7, #24
 80020dc:	4413      	add	r3, r2
 80020de:	3be0      	subs	r3, #224	; 0xe0
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	00c9      	lsls	r1, r1, #3
 80020e6:	f501 7190 	add.w	r1, r1, #288	; 0x120
 80020ea:	f107 0018 	add.w	r0, r7, #24
 80020ee:	4401      	add	r1, r0
 80020f0:	3998      	subs	r1, #152	; 0x98
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[ii + 3] = Ns[i];
 80020f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002100:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4413      	add	r3, r2
 8002108:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800210c:	1cd1      	adds	r1, r2, #3
 800210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	f501 7190 	add.w	r1, r1, #288	; 0x120
 8002118:	f107 0018 	add.w	r0, r7, #24
 800211c:	4401      	add	r1, r0
 800211e:	3998      	subs	r1, #152	; 0x98
 8002120:	e9c1 2300 	strd	r2, r3, [r1]
    work[i] = 0.0;
 8002124:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002128:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800212c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	18d1      	adds	r1, r2, r3
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8002140:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002144:	3301      	adds	r3, #1
 8002146:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800214a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800214e:	2b02      	cmp	r3, #2
 8002150:	f77f af7d 	ble.w	800204e <qrFactor_j+0x4a>
  }

  for (i = 0; i < 3; i++) {
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800215a:	e346      	b.n	80027ea <qrFactor_j+0x7e6>
    real_T atmp;
    real_T beta1;
    int32_T c_tmp;
    ii = (i << 2) + i;
 800215c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002166:	4413      	add	r3, r2
 8002168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    atmp = b_A[ii];
 800216c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002176:	f107 0218 	add.w	r2, r7, #24
 800217a:	4413      	add	r3, r2
 800217c:	3b98      	subs	r3, #152	; 0x98
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
    lastv = ii + 2;
 8002186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800218a:	3302      	adds	r3, #2
 800218c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tau[i] = 0.0;
 8002190:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800219a:	f107 0218 	add.w	r2, r7, #24
 800219e:	4413      	add	r3, r2
 80021a0:	f1a3 01f8 	sub.w	r1, r3, #248	; 0xf8
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9c1 2300 	strd	r2, r3, [r1]
    beta1 = xnrm2_g(3 - i, b_A, ii + 2);
 80021b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021b4:	f1c3 0003 	rsb	r0, r3, #3
 80021b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021bc:	1c9a      	adds	r2, r3, #2
 80021be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7ff fd76 	bl	8001cb4 <xnrm2_g>
 80021c8:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
    if (beta1 != 0.0) {
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80021d8:	f7fe fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 81d9 	bne.w	8002596 <qrFactor_j+0x592>
      beta1 = rt_hypotd_snf(b_A[ii], beta1);
 80021e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80021ee:	f107 0218 	add.w	r2, r7, #24
 80021f2:	4413      	add	r3, r2
 80021f4:	3b98      	subs	r3, #152	; 0x98
 80021f6:	ed93 7b00 	vldr	d7, [r3]
 80021fa:	ed97 1b44 	vldr	d1, [r7, #272]	; 0x110
 80021fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002202:	eef0 0a67 	vmov.f32	s1, s15
 8002206:	f7ff fa87 	bl	8001718 <rt_hypotd_snf>
 800220a:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
      if (b_A[ii] >= 0.0) {
 800220e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002218:	f107 0218 	add.w	r2, r7, #24
 800221c:	4413      	add	r3, r2
 800221e:	3b98      	subs	r3, #152	; 0x98
 8002220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	f7fe fc6a 	bl	8000b04 <__aeabi_dcmpge>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d007      	beq.n	8002246 <qrFactor_j+0x242>
        beta1 = -beta1;
 8002236:	f8d7 5110 	ldr.w	r5, [r7, #272]	; 0x110
 800223a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800223e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8002242:	e9c7 5644 	strd	r5, r6, [r7, #272]	; 0x110
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
 8002246:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	f04f 0200 	mov.w	r2, #0
 800225a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800225e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002262:	f7fe fc3b 	bl	8000adc <__aeabi_dcmplt>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8117 	beq.w	800249c <qrFactor_j+0x498>
        knt = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        c_tmp = (ii - i) + 4;
 8002274:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002278:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	3304      	adds	r3, #4
 8002280:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        do {
          knt++;
 8002284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002288:	3301      	adds	r3, #1
 800228a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          for (coltop = lastv; coltop <= c_tmp; coltop++) {
 800228e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002292:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002296:	e023      	b.n	80022e0 <qrFactor_j+0x2dc>
            b_A[coltop - 1] *= 9.9792015476736E+291;
 8002298:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800229c:	3b01      	subs	r3, #1
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80022a4:	f107 0218 	add.w	r2, r7, #24
 80022a8:	4413      	add	r3, r2
 80022aa:	3b98      	subs	r3, #152	; 0x98
 80022ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022b4:	1e5c      	subs	r4, r3, #1
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	4b9e      	ldr	r3, [pc, #632]	; (8002534 <qrFactor_j+0x530>)
 80022bc:	f7fe f99c 	bl	80005f8 <__aeabi_dmul>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	00e1      	lsls	r1, r4, #3
 80022c6:	f501 7190 	add.w	r1, r1, #288	; 0x120
 80022ca:	f107 0018 	add.w	r0, r7, #24
 80022ce:	4401      	add	r1, r0
 80022d0:	3998      	subs	r1, #152	; 0x98
 80022d2:	e9c1 2300 	strd	r2, r3, [r1]
          for (coltop = lastv; coltop <= c_tmp; coltop++) {
 80022d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022da:	3301      	adds	r3, #1
 80022dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80022e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80022e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	ddd5      	ble.n	8002298 <qrFactor_j+0x294>
          }

          beta1 *= 9.9792015476736E+291;
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	4b90      	ldr	r3, [pc, #576]	; (8002534 <qrFactor_j+0x530>)
 80022f2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80022f6:	f7fe f97f 	bl	80005f8 <__aeabi_dmul>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
          atmp *= 9.9792015476736E+291;
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	4b8b      	ldr	r3, [pc, #556]	; (8002534 <qrFactor_j+0x530>)
 8002308:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800230c:	f7fe f974 	bl	80005f8 <__aeabi_dmul>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8002318:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002322:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8002330:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002334:	f7fe fbd2 	bl	8000adc <__aeabi_dcmplt>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <qrFactor_j+0x342>
 800233e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002342:	2b13      	cmp	r3, #19
 8002344:	dd9e      	ble.n	8002284 <qrFactor_j+0x280>

        beta1 = rt_hypotd_snf(atmp, xnrm2_g(3 - i, b_A, ii + 2));
 8002346:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800234a:	f1c3 0003 	rsb	r0, r3, #3
 800234e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002352:	1c9a      	adds	r2, r3, #2
 8002354:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002358:	4619      	mov	r1, r3
 800235a:	f7ff fcab 	bl	8001cb4 <xnrm2_g>
 800235e:	eeb0 7a40 	vmov.f32	s14, s0
 8002362:	eef0 7a60 	vmov.f32	s15, s1
 8002366:	eeb0 1a47 	vmov.f32	s2, s14
 800236a:	eef0 1a67 	vmov.f32	s3, s15
 800236e:	ed97 0b46 	vldr	d0, [r7, #280]	; 0x118
 8002372:	f7ff f9d1 	bl	8001718 <rt_hypotd_snf>
 8002376:	ed87 0b44 	vstr	d0, [r7, #272]	; 0x110
        if (atmp >= 0.0) {
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002386:	f7fe fbbd 	bl	8000b04 <__aeabi_dcmpge>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00b      	beq.n	80023a8 <qrFactor_j+0x3a4>
          beta1 = -beta1;
 8002390:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002394:	603b      	str	r3, [r7, #0]
 8002396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800239a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	ed97 7b00 	vldr	d7, [r7]
 80023a4:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
        }

        tau[i] = (beta1 - atmp) / beta1;
 80023a8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80023ac:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80023b0:	f7fd ff6a 	bl	8000288 <__aeabi_dsub>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023c0:	f7fe fa44 	bl	800084c <__aeabi_ddiv>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80023cc:	00c9      	lsls	r1, r1, #3
 80023ce:	f501 7190 	add.w	r1, r1, #288	; 0x120
 80023d2:	f107 0018 	add.w	r0, r7, #24
 80023d6:	4401      	add	r1, r0
 80023d8:	39f8      	subs	r1, #248	; 0xf8
 80023da:	e9c1 2300 	strd	r2, r3, [r1]
        atmp = 1.0 / (atmp - beta1);
 80023de:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80023e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80023e6:	f7fd ff4f 	bl	8000288 <__aeabi_dsub>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	f04f 0000 	mov.w	r0, #0
 80023f2:	4951      	ldr	r1, [pc, #324]	; (8002538 <qrFactor_j+0x534>)
 80023f4:	f7fe fa2a 	bl	800084c <__aeabi_ddiv>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        for (coltop = lastv; coltop <= c_tmp; coltop++) {
 8002400:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002404:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002408:	e022      	b.n	8002450 <qrFactor_j+0x44c>
          b_A[coltop - 1] *= atmp;
 800240a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800240e:	3b01      	subs	r3, #1
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002416:	f107 0218 	add.w	r2, r7, #24
 800241a:	4413      	add	r3, r2
 800241c:	3b98      	subs	r3, #152	; 0x98
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002426:	1e5c      	subs	r4, r3, #1
 8002428:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	00e1      	lsls	r1, r4, #3
 8002436:	f501 7190 	add.w	r1, r1, #288	; 0x120
 800243a:	f107 0018 	add.w	r0, r7, #24
 800243e:	4401      	add	r1, r0
 8002440:	3998      	subs	r1, #152	; 0x98
 8002442:	e9c1 2300 	strd	r2, r3, [r1]
        for (coltop = lastv; coltop <= c_tmp; coltop++) {
 8002446:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800244a:	3301      	adds	r3, #1
 800244c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002450:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002458:	429a      	cmp	r2, r3
 800245a:	ddd6      	ble.n	800240a <qrFactor_j+0x406>
        }

        for (lastv = 0; lastv < knt; lastv++) {
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002462:	e010      	b.n	8002486 <qrFactor_j+0x482>
          beta1 *= 1.0020841800044864E-292;
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800246c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002470:	f7fe f8c2 	bl	80005f8 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
        for (lastv = 0; lastv < knt; lastv++) {
 800247c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002480:	3301      	adds	r3, #1
 8002482:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002486:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800248a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800248e:	429a      	cmp	r2, r3
 8002490:	dbe8      	blt.n	8002464 <qrFactor_j+0x460>
        }

        atmp = beta1;
 8002492:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002496:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
 800249a:	e07c      	b.n	8002596 <qrFactor_j+0x592>
      } else {
        tau[i] = (beta1 - b_A[ii]) / beta1;
 800249c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80024a6:	f107 0218 	add.w	r2, r7, #24
 80024aa:	4413      	add	r3, r2
 80024ac:	3b98      	subs	r3, #152	; 0x98
 80024ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b2:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80024b6:	f7fd fee7 	bl	8000288 <__aeabi_dsub>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80024c6:	f7fe f9c1 	bl	800084c <__aeabi_ddiv>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80024d2:	00c9      	lsls	r1, r1, #3
 80024d4:	f501 7190 	add.w	r1, r1, #288	; 0x120
 80024d8:	f107 0018 	add.w	r0, r7, #24
 80024dc:	4401      	add	r1, r0
 80024de:	39f8      	subs	r1, #248	; 0xf8
 80024e0:	e9c1 2300 	strd	r2, r3, [r1]
        atmp = 1.0 / (b_A[ii] - beta1);
 80024e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80024ee:	f107 0218 	add.w	r2, r7, #24
 80024f2:	4413      	add	r3, r2
 80024f4:	3b98      	subs	r3, #152	; 0x98
 80024f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024fa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80024fe:	f7fd fec3 	bl	8000288 <__aeabi_dsub>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	f04f 0000 	mov.w	r0, #0
 800250a:	490b      	ldr	r1, [pc, #44]	; (8002538 <qrFactor_j+0x534>)
 800250c:	f7fe f99e 	bl	800084c <__aeabi_ddiv>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
        coltop = (ii - i) + 4;
 8002518:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800251c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	3304      	adds	r3, #4
 8002524:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        for (knt = lastv; knt <= coltop; knt++) {
 8002528:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800252c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002530:	e027      	b.n	8002582 <qrFactor_j+0x57e>
 8002532:	bf00      	nop
 8002534:	7c900000 	.word	0x7c900000
 8002538:	3ff00000 	.word	0x3ff00000
          b_A[knt - 1] *= atmp;
 800253c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002540:	3b01      	subs	r3, #1
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002548:	f107 0218 	add.w	r2, r7, #24
 800254c:	4413      	add	r3, r2
 800254e:	3b98      	subs	r3, #152	; 0x98
 8002550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002558:	1e5c      	subs	r4, r3, #1
 800255a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800255e:	f7fe f84b 	bl	80005f8 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	00e1      	lsls	r1, r4, #3
 8002568:	f501 7190 	add.w	r1, r1, #288	; 0x120
 800256c:	f107 0018 	add.w	r0, r7, #24
 8002570:	4401      	add	r1, r0
 8002572:	3998      	subs	r1, #152	; 0x98
 8002574:	e9c1 2300 	strd	r2, r3, [r1]
        for (knt = lastv; knt <= coltop; knt++) {
 8002578:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800257c:	3301      	adds	r3, #1
 800257e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002582:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8002586:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800258a:	429a      	cmp	r2, r3
 800258c:	ddd6      	ble.n	800253c <qrFactor_j+0x538>
        }

        atmp = beta1;
 800258e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002592:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      }
    }

    b_A[ii] = atmp;
 8002596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80025a0:	f107 0218 	add.w	r2, r7, #24
 80025a4:	4413      	add	r3, r2
 80025a6:	f1a3 0198 	sub.w	r1, r3, #152	; 0x98
 80025aa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80025ae:	e9c1 2300 	strd	r2, r3, [r1]
    if (i + 1 < 3) {
 80025b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	f300 8112 	bgt.w	80027e0 <qrFactor_j+0x7dc>
      beta1 = b_A[ii];
 80025bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80025c6:	f107 0218 	add.w	r2, r7, #24
 80025ca:	4413      	add	r3, r2
 80025cc:	3b98      	subs	r3, #152	; 0x98
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      b_A[ii] = 1.0;
 80025d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80025e0:	f107 0218 	add.w	r2, r7, #24
 80025e4:	4413      	add	r3, r2
 80025e6:	f1a3 0198 	sub.w	r1, r3, #152	; 0x98
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4bb4      	ldr	r3, [pc, #720]	; (80028c0 <qrFactor_j+0x8bc>)
 80025f0:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[i] != 0.0) {
 80025f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80025fe:	f107 0218 	add.w	r2, r7, #24
 8002602:	4413      	add	r3, r2
 8002604:	3bf8      	subs	r3, #248	; 0xf8
 8002606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	f7fe fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 808f 	bne.w	800273c <qrFactor_j+0x738>
        boolean_T exitg2;
        lastv = 4 - i;
 800261e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002622:	f1c3 0304 	rsb	r3, r3, #4
 8002626:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        knt = (ii - i) + 3;
 800262a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800262e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	3303      	adds	r3, #3
 8002636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        while ((lastv > 0) && (b_A[knt] == 0.0)) {
 800263a:	e009      	b.n	8002650 <qrFactor_j+0x64c>
          lastv--;
 800263c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002640:	3b01      	subs	r3, #1
 8002642:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
          knt--;
 8002646:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800264a:	3b01      	subs	r3, #1
 800264c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        while ((lastv > 0) && (b_A[knt] == 0.0)) {
 8002650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002654:	2b00      	cmp	r3, #0
 8002656:	dd13      	ble.n	8002680 <qrFactor_j+0x67c>
 8002658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002662:	f107 0218 	add.w	r2, r7, #24
 8002666:	4413      	add	r3, r2
 8002668:	3b98      	subs	r3, #152	; 0x98
 800266a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	f04f 0300 	mov.w	r3, #0
 8002676:	f7fe fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1dd      	bne.n	800263c <qrFactor_j+0x638>
        }

        knt = 2 - i;
 8002680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002684:	f1c3 0302 	rsb	r3, r3, #2
 8002688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        exitg2 = false;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        while ((!exitg2) && (knt > 0)) {
 8002692:	e04a      	b.n	800272a <qrFactor_j+0x726>
          int32_T exitg1;
          coltop = (((knt - 1) << 2) + ii) + 4;
 8002694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002698:	3b01      	subs	r3, #1
 800269a:	009a      	lsls	r2, r3, #2
 800269c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
          c_tmp = coltop;
 80026a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80026ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          do {
            exitg1 = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            if (c_tmp + 1 <= coltop + lastv) {
 80026b6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80026ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80026be:	4413      	add	r3, r2
 80026c0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80026c4:	429a      	cmp	r2, r3
 80026c6:	da1d      	bge.n	8002704 <qrFactor_j+0x700>
              if (b_A[c_tmp] != 0.0) {
 80026c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80026d2:	f107 0218 	add.w	r2, r7, #24
 80026d6:	4413      	add	r3, r2
 80026d8:	3b98      	subs	r3, #152	; 0x98
 80026da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	f7fe f9ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <qrFactor_j+0x6f4>
                exitg1 = 1;
 80026f0:	2301      	movs	r3, #1
 80026f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026f6:	e00d      	b.n	8002714 <qrFactor_j+0x710>
              } else {
                c_tmp++;
 80026f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026fc:	3301      	adds	r3, #1
 80026fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002702:	e007      	b.n	8002714 <qrFactor_j+0x710>
              }
            } else {
              knt--;
 8002704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002708:	3b01      	subs	r3, #1
 800270a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
              exitg1 = 2;
 800270e:	2302      	movs	r3, #2
 8002710:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            }
          } while (exitg1 == 0);
 8002714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0c9      	beq.n	80026b0 <qrFactor_j+0x6ac>

          if (exitg1 == 1) {
 800271c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <qrFactor_j+0x726>
            exitg2 = true;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
        while ((!exitg2) && (knt > 0)) {
 800272a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10a      	bne.n	8002748 <qrFactor_j+0x744>
 8002732:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002736:	2b00      	cmp	r3, #0
 8002738:	dcac      	bgt.n	8002694 <qrFactor_j+0x690>
 800273a:	e005      	b.n	8002748 <qrFactor_j+0x744>
          }
        }
      } else {
        lastv = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        knt = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      }

      if (lastv > 0) {
 8002748:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800274c:	2b00      	cmp	r3, #0
 800274e:	dd39      	ble.n	80027c4 <qrFactor_j+0x7c0>
        xgemv(lastv, knt, b_A, ii + 5, b_A, ii + 1, work);
 8002750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002754:	1d58      	adds	r0, r3, #5
 8002756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800275a:	3301      	adds	r3, #1
 800275c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002760:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002764:	9202      	str	r2, [sp, #8]
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4603      	mov	r3, r0
 8002770:	460a      	mov	r2, r1
 8002772:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8002776:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800277a:	f7ff fb49 	bl	8001e10 <xgemv>
        xgerc(lastv, knt, -tau[i], ii + 1, work, b_A, ii + 5);
 800277e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002788:	f107 0218 	add.w	r2, r7, #24
 800278c:	4413      	add	r3, r2
 800278e:	3bf8      	subs	r3, #248	; 0xf8
 8002790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002794:	4690      	mov	r8, r2
 8002796:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800279a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027a4:	3305      	adds	r3, #5
 80027a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	460b      	mov	r3, r1
 80027b4:	ec49 8b10 	vmov	d0, r8, r9
 80027b8:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80027bc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80027c0:	f7ff fb9e 	bl	8001f00 <xgerc>
      }

      b_A[ii] = beta1;
 80027c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80027ce:	f107 0218 	add.w	r2, r7, #24
 80027d2:	4413      	add	r3, r2
 80027d4:	f1a3 0198 	sub.w	r1, r3, #152	; 0x98
 80027d8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80027dc:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 80027e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027e4:	3301      	adds	r3, #1
 80027e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80027ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	f77f acb4 	ble.w	800215c <qrFactor_j+0x158>
    }
  }

  for (i = 0; i < 3; i++) {
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80027fa:	e059      	b.n	80028b0 <qrFactor_j+0x8ac>
    for (ii = 0; ii <= i; ii++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002802:	e024      	b.n	800284e <qrFactor_j+0x84a>
      R[ii + 3 * i] = b_A[(i << 2) + ii];
 8002804:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002808:	009a      	lsls	r2, r3, #2
 800280a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800280e:	18d0      	adds	r0, r2, r3
 8002810:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	441a      	add	r2, r3
 800281a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800281e:	18d1      	adds	r1, r2, r3
 8002820:	00c3      	lsls	r3, r0, #3
 8002822:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002826:	f107 0218 	add.w	r2, r7, #24
 800282a:	4413      	add	r3, r2
 800282c:	3b98      	subs	r3, #152	; 0x98
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	00c9      	lsls	r1, r1, #3
 8002834:	f501 7190 	add.w	r1, r1, #288	; 0x120
 8002838:	f107 0018 	add.w	r0, r7, #24
 800283c:	4401      	add	r1, r0
 800283e:	39e0      	subs	r1, #224	; 0xe0
 8002840:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = 0; ii <= i; ii++) {
 8002844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002848:	3301      	adds	r3, #1
 800284a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800284e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002852:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002856:	429a      	cmp	r2, r3
 8002858:	ddd4      	ble.n	8002804 <qrFactor_j+0x800>
    }

    for (ii = i + 2; ii < 4; ii++) {
 800285a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800285e:	3302      	adds	r3, #2
 8002860:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002864:	e01b      	b.n	800289e <qrFactor_j+0x89a>
      R[(ii + 3 * i) - 1] = 0.0;
 8002866:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800286a:	4613      	mov	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	441a      	add	r2, r3
 8002870:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002874:	4413      	add	r3, r2
 8002876:	3b01      	subs	r3, #1
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800287e:	f107 0218 	add.w	r2, r7, #24
 8002882:	4413      	add	r3, r2
 8002884:	f1a3 01e0 	sub.w	r1, r3, #224	; 0xe0
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = i + 2; ii < 4; ii++) {
 8002894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002898:	3301      	adds	r3, #1
 800289a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800289e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	dddf      	ble.n	8002866 <qrFactor_j+0x862>
  for (i = 0; i < 3; i++) {
 80028a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028aa:	3301      	adds	r3, #1
 80028ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80028b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	dda1      	ble.n	80027fc <qrFactor_j+0x7f8>
    }
  }

  for (i = 0; i < 3; i++) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80028be:	e056      	b.n	800296e <qrFactor_j+0x96a>
 80028c0:	3ff00000 	.word	0x3ff00000
    S[3 * i] = R[i];
 80028c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	461a      	mov	r2, r3
 80028d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1899      	adds	r1, r3, r2
 80028de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80028e8:	f107 0218 	add.w	r2, r7, #24
 80028ec:	4413      	add	r3, r2
 80028ee:	3be0      	subs	r3, #224	; 0xe0
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	e9c1 2300 	strd	r2, r3, [r1]
    S[3 * i + 1] = R[i + 3];
 80028f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80028fc:	1cd8      	adds	r0, r3, #3
 80028fe:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	3308      	adds	r3, #8
 800290c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002910:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	18d1      	adds	r1, r2, r3
 8002918:	00c3      	lsls	r3, r0, #3
 800291a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800291e:	f107 0218 	add.w	r2, r7, #24
 8002922:	4413      	add	r3, r2
 8002924:	3be0      	subs	r3, #224	; 0xe0
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	e9c1 2300 	strd	r2, r3, [r1]
    S[3 * i + 2] = R[i + 6];
 800292e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002932:	1d98      	adds	r0, r3, #6
 8002934:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	3310      	adds	r3, #16
 8002942:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8002946:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	18d1      	adds	r1, r2, r3
 800294e:	00c3      	lsls	r3, r0, #3
 8002950:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002954:	f107 0218 	add.w	r2, r7, #24
 8002958:	4413      	add	r3, r2
 800295a:	3be0      	subs	r3, #224	; 0xe0
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8002964:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002968:	3301      	adds	r3, #1
 800296a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800296e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002972:	2b02      	cmp	r3, #2
 8002974:	dda6      	ble.n	80028c4 <qrFactor_j+0x8c0>
  }
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800297e:	46bd      	mov	sp, r7
 8002980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002984 <xnrm2_gw>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T xnrm2_gw(int32_T n, const real_T x[18], int32_T ix0)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b092      	sub	sp, #72	; 0x48
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f340 8090 	ble.w	8002ac4 <xnrm2_gw+0x140>
    if (n == 1) {
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10e      	bne.n	80029c8 <xnrm2_gw+0x44>
      y = fabs(x[ix0 - 1]);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80029b0:	3b01      	subs	r3, #1
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	4413      	add	r3, r2
 80029b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029bc:	4611      	mov	r1, r2
 80029be:	6439      	str	r1, [r7, #64]	; 0x40
 80029c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
 80029c6:	e07d      	b.n	8002ac4 <xnrm2_gw+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80029d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	3b01      	subs	r3, #1
 80029dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e2:	e05d      	b.n	8002aa0 <xnrm2_gw+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80029ea:	3b01      	subs	r3, #1
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4413      	add	r3, r2
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	4611      	mov	r1, r2
 80029f8:	6239      	str	r1, [r7, #32]
 80029fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8002a00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a08:	f7fe f886 	bl	8000b18 <__aeabi_dcmpgt>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d029      	beq.n	8002a66 <xnrm2_gw+0xe2>
          real_T t;
          t = scale / absxk;
 8002a12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a1a:	f7fd ff17 	bl	800084c <__aeabi_ddiv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8002a26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a2e:	f7fd fde3 	bl	80005f8 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a3e:	f7fd fddb 	bl	80005f8 <__aeabi_dmul>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4610      	mov	r0, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <xnrm2_gw+0x158>)
 8002a50:	f7fd fc1c 	bl	800028c <__adddf3>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8002a5c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a60:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8002a64:	e019      	b.n	8002a9a <xnrm2_gw+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8002a66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a6a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a6e:	f7fd feed 	bl	800084c <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8002a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a82:	f7fd fdb9 	bl	80005f8 <__aeabi_dmul>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002a8e:	f7fd fbfd 	bl	800028c <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8002a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	dd9d      	ble.n	80029e4 <xnrm2_gw+0x60>
        }
      }

      y = scale * sqrt(y);
 8002aa8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002aac:	f00e f86c 	bl	8010b88 <sqrt>
 8002ab0:	ec53 2b10 	vmov	r2, r3, d0
 8002ab4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002ab8:	f7fd fd9e 	bl	80005f8 <__aeabi_dmul>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8002ac4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ac8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002acc:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad0:	eef0 0a67 	vmov.f32	s1, s15
 8002ad4:	3748      	adds	r7, #72	; 0x48
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	3ff00000 	.word	0x3ff00000

08002ae0 <xgemv_g>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xgemv_g(int32_T m, int32_T n, const real_T A[18], int32_T ia0, const
                    real_T x[18], int32_T ix0, real_T y[3])
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b08b      	sub	sp, #44	; 0x2c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
 8002aec:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T iyend;
  if ((m != 0) && (n != 0)) {
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d070      	beq.n	8002bd6 <xgemv_g+0xf6>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d06d      	beq.n	8002bd6 <xgemv_g+0xf6>
    int32_T b;
    if (n - 1 >= 0) {
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	dd06      	ble.n	8002b0e <xgemv_g+0x2e>
      memset(&y[0], 0, (uint32_T)n * sizeof(real_T));
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	461a      	mov	r2, r3
 8002b06:	2100      	movs	r1, #0
 8002b08:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b0a:	f009 fd5f 	bl	800c5cc <memset>
    }

    b = (n - 1) * 6 + ia0;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
    for (b_iy = ia0; b_iy <= b; b_iy += 6) {
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
 8002b26:	e052      	b.n	8002bce <xgemv_g+0xee>
      real_T c;
      int32_T d;
      c = 0.0;
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9c7 2306 	strd	r2, r3, [r7, #24]
      d = b_iy + m;
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
      for (iyend = b_iy; iyend < d; iyend++) {
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	e024      	b.n	8002b8c <xgemv_g+0xac>
        c += x[((ix0 + iyend) - b_iy) - 1] * A[iyend - 1];
 8002b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	441a      	add	r2, r3
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002b50:	3b01      	subs	r3, #1
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b56:	4413      	add	r3, r2
 8002b58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002b62:	3b01      	subs	r3, #1
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fd43 	bl	80005f8 <__aeabi_dmul>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b7a:	f7fd fb87 	bl	800028c <__adddf3>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	e9c7 2306 	strd	r2, r3, [r7, #24]
      for (iyend = b_iy; iyend < d; iyend++) {
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	6a3a      	ldr	r2, [r7, #32]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	dbd6      	blt.n	8002b42 <xgemv_g+0x62>
      }

      iyend = div_nde_s32_floor(b_iy - ia0, 6);
 8002b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2106      	movs	r1, #6
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fce3 	bl	8001568 <div_nde_s32_floor>
 8002ba2:	6238      	str	r0, [r7, #32]
      y[iyend] += c;
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002baa:	4413      	add	r3, r2
 8002bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bb6:	18d4      	adds	r4, r2, r3
 8002bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bbc:	f7fd fb66 	bl	800028c <__adddf3>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_iy = ia0; b_iy <= b; b_iy += 6) {
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	3306      	adds	r3, #6
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dda8      	ble.n	8002b28 <xgemv_g+0x48>
    }
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	372c      	adds	r7, #44	; 0x2c
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}

08002bde <xgerc_a>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xgerc_a(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                    real_T y[3], real_T A[18], int32_T ia0)
{
 8002bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be0:	b08f      	sub	sp, #60	; 0x3c
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6178      	str	r0, [r7, #20]
 8002be6:	6139      	str	r1, [r7, #16]
 8002be8:	ed87 0b02 	vstr	d0, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	603b      	str	r3, [r7, #0]
  int32_T ijA;
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bfc:	f7fd ff64 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d000      	beq.n	8002c08 <xgerc_a+0x2a>
      }

      jA += 6;
    }
  }
}
 8002c06:	e068      	b.n	8002cda <xgerc_a+0xfc>
    jA = ia0;
 8002c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c10:	e05f      	b.n	8002cd2 <xgerc_a+0xf4>
      temp = y[j];
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	e9c7 2308 	strd	r2, r3, [r7, #32]
      if (temp != 0.0) {
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c2e:	f7fd ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d146      	bne.n	8002cc6 <xgerc_a+0xe8>
        temp *= alpha1;
 8002c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c3c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c40:	f7fd fcda 	bl	80005f8 <__aeabi_dmul>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	e9c7 2308 	strd	r2, r3, [r7, #32]
        b = m + jA;
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	4413      	add	r3, r2
 8002c52:	61fb      	str	r3, [r7, #28]
        for (ijA = jA; ijA < b; ijA++) {
 8002c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	e031      	b.n	8002cbe <xgerc_a+0xe0>
          A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002c60:	3b01      	subs	r3, #1
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c66:	4413      	add	r3, r2
 8002c68:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	441a      	add	r2, r3
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c80:	4413      	add	r3, r2
 8002c82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c8a:	f7fd fcb5 	bl	80005f8 <__aeabi_dmul>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c98:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ca2:	18d6      	adds	r6, r2, r3
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd faee 	bl	800028c <__adddf3>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	e9c6 2300 	strd	r2, r3, [r6]
        for (ijA = jA; ijA < b; ijA++) {
 8002cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cba:	3301      	adds	r3, #1
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	dbc9      	blt.n	8002c5a <xgerc_a+0x7c>
      jA += 6;
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	3306      	adds	r3, #6
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	3301      	adds	r3, #1
 8002cd0:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	db9b      	blt.n	8002c12 <xgerc_a+0x34>
}
 8002cda:	bf00      	nop
 8002cdc:	373c      	adds	r7, #60	; 0x3c
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ce4 <qrFactor_jq>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void qrFactor_jq(const real_T A[9], real_T S[9], const real_T Ns[9])
{
 8002ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ce8:	b0df      	sub	sp, #380	; 0x17c
 8002cea:	af04      	add	r7, sp, #16
 8002cec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002cf0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002cf4:	6018      	str	r0, [r3, #0]
 8002cf6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002cfa:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002cfe:	6019      	str	r1, [r3, #0]
 8002d00:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d04:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d08:	601a      	str	r2, [r3, #0]
  int32_T coltop;
  int32_T i;
  int32_T ii;
  int32_T knt;
  int32_T lastv;
  mtimes(S, A, R);
 8002d0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d0e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d12:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002d16:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d1a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d1e:	6809      	ldr	r1, [r1, #0]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	f7fe ff4e 	bl	8001bc2 <mtimes>
  for (i = 0; i < 3; i++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002d2c:	e0be      	b.n	8002eac <qrFactor_jq+0x1c8>
    b_A[6 * i] = R[3 * i];
 8002d2e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	1899      	adds	r1, r3, r2
 8002d38:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002d4a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002d4e:	00cb      	lsls	r3, r1, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	00c1      	lsls	r1, r0, #3
 8002d58:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8002d5c:	f107 0018 	add.w	r0, r7, #24
 8002d60:	4401      	add	r1, r0
 8002d62:	39c8      	subs	r1, #200	; 0xc8
 8002d64:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[6 * i + 3] = Ns[i];
 8002d68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002d72:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	18d0      	adds	r0, r2, r3
 8002d7a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002d7e:	4613      	mov	r3, r2
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	4413      	add	r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	1cd9      	adds	r1, r3, #3
 8002d88:	e9d0 2300 	ldrd	r2, r3, [r0]
 8002d8c:	00c9      	lsls	r1, r1, #3
 8002d8e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8002d92:	f107 0018 	add.w	r0, r7, #24
 8002d96:	4401      	add	r1, r0
 8002d98:	39c8      	subs	r1, #200	; 0xc8
 8002d9a:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[6 * i + 1] = R[3 * i + 1];
 8002d9e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	1c58      	adds	r0, r3, #1
 8002daa:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	1c59      	adds	r1, r3, #1
 8002db8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002dbc:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002dc0:	00c3      	lsls	r3, r0, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	00c9      	lsls	r1, r1, #3
 8002dca:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8002dce:	f107 0018 	add.w	r0, r7, #24
 8002dd2:	4401      	add	r1, r0
 8002dd4:	39c8      	subs	r1, #200	; 0xc8
 8002dd6:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[6 * i + 4] = Ns[i + 3];
 8002dda:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002dde:	3303      	adds	r3, #3
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002de6:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	18d0      	adds	r0, r2, r3
 8002dee:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	1d19      	adds	r1, r3, #4
 8002dfc:	e9d0 2300 	ldrd	r2, r3, [r0]
 8002e00:	00c9      	lsls	r1, r1, #3
 8002e02:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8002e06:	f107 0018 	add.w	r0, r7, #24
 8002e0a:	4401      	add	r1, r0
 8002e0c:	39c8      	subs	r1, #200	; 0xc8
 8002e0e:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[6 * i + 2] = R[3 * i + 2];
 8002e12:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002e16:	4613      	mov	r3, r2
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4413      	add	r3, r2
 8002e1c:	1c98      	adds	r0, r3, #2
 8002e1e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	1c99      	adds	r1, r3, #2
 8002e2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002e30:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8002e34:	00c3      	lsls	r3, r0, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	00c9      	lsls	r1, r1, #3
 8002e3e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8002e42:	f107 0018 	add.w	r0, r7, #24
 8002e46:	4401      	add	r1, r0
 8002e48:	39c8      	subs	r1, #200	; 0xc8
 8002e4a:	e9c1 2300 	strd	r2, r3, [r1]
    b_A[6 * i + 5] = Ns[i + 6];
 8002e4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e52:	3306      	adds	r3, #6
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002e5a:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	18d0      	adds	r0, r2, r3
 8002e62:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	1d59      	adds	r1, r3, #5
 8002e70:	e9d0 2300 	ldrd	r2, r3, [r0]
 8002e74:	00c9      	lsls	r1, r1, #3
 8002e76:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8002e7a:	f107 0018 	add.w	r0, r7, #24
 8002e7e:	4401      	add	r1, r0
 8002e80:	39c8      	subs	r1, #200	; 0xc8
 8002e82:	e9c1 2300 	strd	r2, r3, [r1]
    work[i] = 0.0;
 8002e86:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002e8a:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8002e8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	18d1      	adds	r1, r2, r3
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8002ea2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002eac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	f77f af3c 	ble.w	8002d2e <qrFactor_jq+0x4a>
  }

  for (i = 0; i < 3; i++) {
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002ebc:	e347      	b.n	800354e <qrFactor_jq+0x86a>
    real_T atmp;
    real_T beta1;
    int32_T c_tmp;
    ii = i * 6 + i;
 8002ebe:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    atmp = b_A[ii];
 8002ecc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002ed6:	f107 0218 	add.w	r2, r7, #24
 8002eda:	4413      	add	r3, r2
 8002edc:	3bc8      	subs	r3, #200	; 0xc8
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
    lastv = ii + 2;
 8002ee6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002eea:	3302      	adds	r3, #2
 8002eec:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tau[i] = 0.0;
 8002ef0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ef4:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8002ef8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	18d1      	adds	r1, r2, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	e9c1 2300 	strd	r2, r3, [r1]
    beta1 = xnrm2_gw(5 - i, b_A, ii + 2);
 8002f0c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f10:	f1c3 0005 	rsb	r0, r3, #5
 8002f14:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f18:	1c9a      	adds	r2, r3, #2
 8002f1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7ff fd30 	bl	8002984 <xnrm2_gw>
 8002f24:	ed87 0b50 	vstr	d0, [r7, #320]	; 0x140
    if (beta1 != 0.0) {
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8002f34:	f7fd fdc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 81db 	bne.w	80032f6 <qrFactor_jq+0x612>
      beta1 = rt_hypotd_snf(b_A[ii], beta1);
 8002f40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002f4a:	f107 0218 	add.w	r2, r7, #24
 8002f4e:	4413      	add	r3, r2
 8002f50:	3bc8      	subs	r3, #200	; 0xc8
 8002f52:	ed93 7b00 	vldr	d7, [r3]
 8002f56:	ed97 1b50 	vldr	d1, [r7, #320]	; 0x140
 8002f5a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f5e:	eef0 0a67 	vmov.f32	s1, s15
 8002f62:	f7fe fbd9 	bl	8001718 <rt_hypotd_snf>
 8002f66:	ed87 0b50 	vstr	d0, [r7, #320]	; 0x140
      if (b_A[ii] >= 0.0) {
 8002f6a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002f74:	f107 0218 	add.w	r2, r7, #24
 8002f78:	4413      	add	r3, r2
 8002f7a:	3bc8      	subs	r3, #200	; 0xc8
 8002f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f7fd fdbc 	bl	8000b04 <__aeabi_dcmpge>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <qrFactor_jq+0x2be>
        beta1 = -beta1;
 8002f92:	f8d7 5140 	ldr.w	r5, [r7, #320]	; 0x140
 8002f96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002f9a:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8002f9e:	e9c7 5650 	strd	r5, r6, [r7, #320]	; 0x140
      }

      if (fabs(beta1) < 1.0020841800044864E-292) {
 8002fa2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8002fba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fbe:	f7fd fd8d 	bl	8000adc <__aeabi_dcmplt>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 8118 	beq.w	80031fa <qrFactor_jq+0x516>
        knt = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        c_tmp = (ii - i) + 6;
 8002fd0:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002fd4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	3306      	adds	r3, #6
 8002fdc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        do {
          knt++;
 8002fe0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
          for (coltop = lastv; coltop <= c_tmp; coltop++) {
 8002fea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002fee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002ff2:	e023      	b.n	800303c <qrFactor_jq+0x358>
            b_A[coltop - 1] *= 9.9792015476736E+291;
 8002ff4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003000:	f107 0218 	add.w	r2, r7, #24
 8003004:	4413      	add	r3, r2
 8003006:	3bc8      	subs	r3, #200	; 0xc8
 8003008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800300c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003010:	1e5c      	subs	r4, r3, #1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	4b9f      	ldr	r3, [pc, #636]	; (8003294 <qrFactor_jq+0x5b0>)
 8003018:	f7fd faee 	bl	80005f8 <__aeabi_dmul>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	00e1      	lsls	r1, r4, #3
 8003022:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8003026:	f107 0018 	add.w	r0, r7, #24
 800302a:	4401      	add	r1, r0
 800302c:	39c8      	subs	r1, #200	; 0xc8
 800302e:	e9c1 2300 	strd	r2, r3, [r1]
          for (coltop = lastv; coltop <= c_tmp; coltop++) {
 8003032:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003036:	3301      	adds	r3, #1
 8003038:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800303c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003040:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003044:	429a      	cmp	r2, r3
 8003046:	ddd5      	ble.n	8002ff4 <qrFactor_jq+0x310>
          }

          beta1 *= 9.9792015476736E+291;
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	4b91      	ldr	r3, [pc, #580]	; (8003294 <qrFactor_jq+0x5b0>)
 800304e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003052:	f7fd fad1 	bl	80005f8 <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          atmp *= 9.9792015476736E+291;
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	4b8c      	ldr	r3, [pc, #560]	; (8003294 <qrFactor_jq+0x5b0>)
 8003064:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8003068:	f7fd fac6 	bl	80005f8 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 8003074:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800307e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800308c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003090:	f7fd fd24 	bl	8000adc <__aeabi_dcmplt>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <qrFactor_jq+0x3be>
 800309a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800309e:	2b13      	cmp	r3, #19
 80030a0:	dd9e      	ble.n	8002fe0 <qrFactor_jq+0x2fc>

        beta1 = rt_hypotd_snf(atmp, xnrm2_gw(5 - i, b_A, ii + 2));
 80030a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030a6:	f1c3 0005 	rsb	r0, r3, #5
 80030aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80030ae:	1c9a      	adds	r2, r3, #2
 80030b0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7ff fc65 	bl	8002984 <xnrm2_gw>
 80030ba:	eeb0 7a40 	vmov.f32	s14, s0
 80030be:	eef0 7a60 	vmov.f32	s15, s1
 80030c2:	eeb0 1a47 	vmov.f32	s2, s14
 80030c6:	eef0 1a67 	vmov.f32	s3, s15
 80030ca:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 80030ce:	f7fe fb23 	bl	8001718 <rt_hypotd_snf>
 80030d2:	ed87 0b50 	vstr	d0, [r7, #320]	; 0x140
        if (atmp >= 0.0) {
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80030e2:	f7fd fd0f 	bl	8000b04 <__aeabi_dcmpge>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00b      	beq.n	8003104 <qrFactor_jq+0x420>
          beta1 = -beta1;
 80030ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80030f0:	603b      	str	r3, [r7, #0]
 80030f2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80030f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	ed97 7b00 	vldr	d7, [r7]
 8003100:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
        }

        tau[i] = (beta1 - atmp) / beta1;
 8003104:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8003108:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800310c:	f7fd f8bc 	bl	8000288 <__aeabi_dsub>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800311c:	f7fd fb96 	bl	800084c <__aeabi_ddiv>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800312c:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003130:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	e9c3 0100 	strd	r0, r1, [r3]
        atmp = 1.0 / (atmp - beta1);
 800313c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003140:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8003144:	f7fd f8a0 	bl	8000288 <__aeabi_dsub>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	4951      	ldr	r1, [pc, #324]	; (8003298 <qrFactor_jq+0x5b4>)
 8003152:	f7fd fb7b 	bl	800084c <__aeabi_ddiv>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        for (coltop = lastv; coltop <= c_tmp; coltop++) {
 800315e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003162:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003166:	e022      	b.n	80031ae <qrFactor_jq+0x4ca>
          b_A[coltop - 1] *= atmp;
 8003168:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800316c:	3b01      	subs	r3, #1
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003174:	f107 0218 	add.w	r2, r7, #24
 8003178:	4413      	add	r3, r2
 800317a:	3bc8      	subs	r3, #200	; 0xc8
 800317c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003180:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003184:	1e5c      	subs	r4, r3, #1
 8003186:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800318a:	f7fd fa35 	bl	80005f8 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	00e1      	lsls	r1, r4, #3
 8003194:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8003198:	f107 0018 	add.w	r0, r7, #24
 800319c:	4401      	add	r1, r0
 800319e:	39c8      	subs	r1, #200	; 0xc8
 80031a0:	e9c1 2300 	strd	r2, r3, [r1]
        for (coltop = lastv; coltop <= c_tmp; coltop++) {
 80031a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80031a8:	3301      	adds	r3, #1
 80031aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80031ae:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80031b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80031b6:	429a      	cmp	r2, r3
 80031b8:	ddd6      	ble.n	8003168 <qrFactor_jq+0x484>
        }

        for (lastv = 0; lastv < knt; lastv++) {
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031c0:	e010      	b.n	80031e4 <qrFactor_jq+0x500>
          beta1 *= 1.0020841800044864E-292;
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80031ca:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80031ce:	f7fd fa13 	bl	80005f8 <__aeabi_dmul>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        for (lastv = 0; lastv < knt; lastv++) {
 80031da:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80031de:	3301      	adds	r3, #1
 80031e0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031e4:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80031e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031ec:	429a      	cmp	r2, r3
 80031ee:	dbe8      	blt.n	80031c2 <qrFactor_jq+0x4de>
        }

        atmp = beta1;
 80031f0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80031f4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
 80031f8:	e07d      	b.n	80032f6 <qrFactor_jq+0x612>
      } else {
        tau[i] = (beta1 - b_A[ii]) / beta1;
 80031fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003204:	f107 0218 	add.w	r2, r7, #24
 8003208:	4413      	add	r3, r2
 800320a:	3bc8      	subs	r3, #200	; 0xc8
 800320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003210:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8003214:	f7fd f838 	bl	8000288 <__aeabi_dsub>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003224:	f7fd fb12 	bl	800084c <__aeabi_ddiv>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003234:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003238:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	e9c3 0100 	strd	r0, r1, [r3]
        atmp = 1.0 / (b_A[ii] - beta1);
 8003244:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800324e:	f107 0218 	add.w	r2, r7, #24
 8003252:	4413      	add	r3, r2
 8003254:	3bc8      	subs	r3, #200	; 0xc8
 8003256:	e9d3 0100 	ldrd	r0, r1, [r3]
 800325a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800325e:	f7fd f813 	bl	8000288 <__aeabi_dsub>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	f04f 0000 	mov.w	r0, #0
 800326a:	490b      	ldr	r1, [pc, #44]	; (8003298 <qrFactor_jq+0x5b4>)
 800326c:	f7fd faee 	bl	800084c <__aeabi_ddiv>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
        coltop = (ii - i) + 6;
 8003278:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800327c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	3306      	adds	r3, #6
 8003284:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
        for (knt = lastv; knt <= coltop; knt++) {
 8003288:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800328c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003290:	e027      	b.n	80032e2 <qrFactor_jq+0x5fe>
 8003292:	bf00      	nop
 8003294:	7c900000 	.word	0x7c900000
 8003298:	3ff00000 	.word	0x3ff00000
          b_A[knt - 1] *= atmp;
 800329c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80032a0:	3b01      	subs	r3, #1
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032a8:	f107 0218 	add.w	r2, r7, #24
 80032ac:	4413      	add	r3, r2
 80032ae:	3bc8      	subs	r3, #200	; 0xc8
 80032b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80032b8:	1e5c      	subs	r4, r3, #1
 80032ba:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80032be:	f7fd f99b 	bl	80005f8 <__aeabi_dmul>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	00e1      	lsls	r1, r4, #3
 80032c8:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 80032cc:	f107 0018 	add.w	r0, r7, #24
 80032d0:	4401      	add	r1, r0
 80032d2:	39c8      	subs	r1, #200	; 0xc8
 80032d4:	e9c1 2300 	strd	r2, r3, [r1]
        for (knt = lastv; knt <= coltop; knt++) {
 80032d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80032dc:	3301      	adds	r3, #1
 80032de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032e2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80032e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80032ea:	429a      	cmp	r2, r3
 80032ec:	ddd6      	ble.n	800329c <qrFactor_jq+0x5b8>
        }

        atmp = beta1;
 80032ee:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80032f2:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
      }
    }

    b_A[ii] = atmp;
 80032f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003300:	f107 0218 	add.w	r2, r7, #24
 8003304:	4413      	add	r3, r2
 8003306:	f1a3 01c8 	sub.w	r1, r3, #200	; 0xc8
 800330a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800330e:	e9c1 2300 	strd	r2, r3, [r1]
    if (i + 1 < 3) {
 8003312:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003316:	2b01      	cmp	r3, #1
 8003318:	f300 8114 	bgt.w	8003544 <qrFactor_jq+0x860>
      beta1 = b_A[ii];
 800331c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003326:	f107 0218 	add.w	r2, r7, #24
 800332a:	4413      	add	r3, r2
 800332c:	3bc8      	subs	r3, #200	; 0xc8
 800332e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003332:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      b_A[ii] = 1.0;
 8003336:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003340:	f107 0218 	add.w	r2, r7, #24
 8003344:	4413      	add	r3, r2
 8003346:	f1a3 01c8 	sub.w	r1, r3, #200	; 0xc8
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	4bb6      	ldr	r3, [pc, #728]	; (8003628 <qrFactor_jq+0x944>)
 8003350:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[i] != 0.0) {
 8003354:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003358:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 800335c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	f7fd fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 8093 	bne.w	80034a2 <qrFactor_jq+0x7be>
        boolean_T exitg2;
        lastv = 6 - i;
 800337c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003380:	f1c3 0306 	rsb	r3, r3, #6
 8003384:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        knt = (ii - i) + 5;
 8003388:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800338c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	3305      	adds	r3, #5
 8003394:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        while ((lastv > 0) && (b_A[knt] == 0.0)) {
 8003398:	e009      	b.n	80033ae <qrFactor_jq+0x6ca>
          lastv--;
 800339a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800339e:	3b01      	subs	r3, #1
 80033a0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
          knt--;
 80033a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033a8:	3b01      	subs	r3, #1
 80033aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        while ((lastv > 0) && (b_A[knt] == 0.0)) {
 80033ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dd13      	ble.n	80033de <qrFactor_jq+0x6fa>
 80033b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80033c0:	f107 0218 	add.w	r2, r7, #24
 80033c4:	4413      	add	r3, r2
 80033c6:	3bc8      	subs	r3, #200	; 0xc8
 80033c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	f7fd fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1dd      	bne.n	800339a <qrFactor_jq+0x6b6>
        }

        knt = 2 - i;
 80033de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80033e2:	f1c3 0302 	rsb	r3, r3, #2
 80033e6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
        exitg2 = false;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
        while ((!exitg2) && (knt > 0)) {
 80033f0:	e04e      	b.n	8003490 <qrFactor_jq+0x7ac>
          int32_T exitg1;
          coltop = ((knt - 1) * 6 + ii) + 6;
 80033f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	461a      	mov	r2, r3
 8003402:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003406:	4413      	add	r3, r2
 8003408:	3306      	adds	r3, #6
 800340a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
          c_tmp = coltop;
 800340e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003412:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
          do {
            exitg1 = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            if (c_tmp + 1 <= coltop + lastv) {
 800341c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8003420:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003424:	4413      	add	r3, r2
 8003426:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800342a:	429a      	cmp	r2, r3
 800342c:	da1d      	bge.n	800346a <qrFactor_jq+0x786>
              if (b_A[c_tmp] != 0.0) {
 800342e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003438:	f107 0218 	add.w	r2, r7, #24
 800343c:	4413      	add	r3, r2
 800343e:	3bc8      	subs	r3, #200	; 0xc8
 8003440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	f7fd fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <qrFactor_jq+0x77a>
                exitg1 = 1;
 8003456:	2301      	movs	r3, #1
 8003458:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800345c:	e00d      	b.n	800347a <qrFactor_jq+0x796>
              } else {
                c_tmp++;
 800345e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003462:	3301      	adds	r3, #1
 8003464:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003468:	e007      	b.n	800347a <qrFactor_jq+0x796>
              }
            } else {
              knt--;
 800346a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800346e:	3b01      	subs	r3, #1
 8003470:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
              exitg1 = 2;
 8003474:	2302      	movs	r3, #2
 8003476:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            }
          } while (exitg1 == 0);
 800347a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0c9      	beq.n	8003416 <qrFactor_jq+0x732>

          if (exitg1 == 1) {
 8003482:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <qrFactor_jq+0x7ac>
            exitg2 = true;
 800348a:	2301      	movs	r3, #1
 800348c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
        while ((!exitg2) && (knt > 0)) {
 8003490:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <qrFactor_jq+0x7ca>
 8003498:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800349c:	2b00      	cmp	r3, #0
 800349e:	dca8      	bgt.n	80033f2 <qrFactor_jq+0x70e>
 80034a0:	e005      	b.n	80034ae <qrFactor_jq+0x7ca>
          }
        }
      } else {
        lastv = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
        knt = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      }

      if (lastv > 0) {
 80034ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dd38      	ble.n	8003528 <qrFactor_jq+0x844>
        xgemv_g(lastv, knt, b_A, ii + 7, b_A, ii + 1, work);
 80034b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034ba:	1dd8      	adds	r0, r3, #7
 80034bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034c0:	3301      	adds	r3, #1
 80034c2:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80034c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034ca:	9202      	str	r2, [sp, #8]
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	4603      	mov	r3, r0
 80034d6:	460a      	mov	r2, r1
 80034d8:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80034dc:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80034e0:	f7ff fafe 	bl	8002ae0 <xgemv_g>
        xgerc_a(lastv, knt, -tau[i], ii + 1, work, b_A, ii + 7);
 80034e4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80034e8:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 80034ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	4690      	mov	r8, r2
 80034fa:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80034fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003508:	3307      	adds	r3, #7
 800350a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	460b      	mov	r3, r1
 8003518:	ec49 8b10 	vmov	d0, r8, r9
 800351c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8003520:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8003524:	f7ff fb5b 	bl	8002bde <xgerc_a>
      }

      b_A[ii] = beta1;
 8003528:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003532:	f107 0218 	add.w	r2, r7, #24
 8003536:	4413      	add	r3, r2
 8003538:	f1a3 01c8 	sub.w	r1, r3, #200	; 0xc8
 800353c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8003540:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 8003544:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003548:	3301      	adds	r3, #1
 800354a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800354e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003552:	2b02      	cmp	r3, #2
 8003554:	f77f acb3 	ble.w	8002ebe <qrFactor_jq+0x1da>
    }
  }

  for (i = 0; i < 3; i++) {
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800355e:	e05a      	b.n	8003616 <qrFactor_jq+0x932>
    for (ii = 0; ii <= i; ii++) {
 8003560:	2300      	movs	r3, #0
 8003562:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003566:	e027      	b.n	80035b8 <qrFactor_jq+0x8d4>
      R[ii + 3 * i] = b_A[6 * i + ii];
 8003568:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800356c:	4613      	mov	r3, r2
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	4413      	add	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	461a      	mov	r2, r3
 8003576:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800357a:	18d0      	adds	r0, r2, r3
 800357c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	441a      	add	r2, r3
 8003586:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800358a:	18d1      	adds	r1, r2, r3
 800358c:	00c3      	lsls	r3, r0, #3
 800358e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003592:	f107 0218 	add.w	r2, r7, #24
 8003596:	4413      	add	r3, r2
 8003598:	3bc8      	subs	r3, #200	; 0xc8
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 80035a2:	f5a0 7088 	sub.w	r0, r0, #272	; 0x110
 80035a6:	00c9      	lsls	r1, r1, #3
 80035a8:	4401      	add	r1, r0
 80035aa:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = 0; ii <= i; ii++) {
 80035ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035b2:	3301      	adds	r3, #1
 80035b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80035b8:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80035bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80035c0:	429a      	cmp	r2, r3
 80035c2:	ddd1      	ble.n	8003568 <qrFactor_jq+0x884>
    }

    for (ii = i + 2; ii < 4; ii++) {
 80035c4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80035c8:	3302      	adds	r3, #2
 80035ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80035ce:	e019      	b.n	8003604 <qrFactor_jq+0x920>
      R[(ii + 3 * i) - 1] = 0.0;
 80035d0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	441a      	add	r2, r3
 80035da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035de:	4413      	add	r3, r2
 80035e0:	3b01      	subs	r3, #1
 80035e2:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80035e6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	18d1      	adds	r1, r2, r3
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = i + 2; ii < 4; ii++) {
 80035fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035fe:	3301      	adds	r3, #1
 8003600:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003604:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003608:	2b03      	cmp	r3, #3
 800360a:	dde1      	ble.n	80035d0 <qrFactor_jq+0x8ec>
  for (i = 0; i < 3; i++) {
 800360c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003610:	3301      	adds	r3, #1
 8003612:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003616:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800361a:	2b02      	cmp	r3, #2
 800361c:	dda0      	ble.n	8003560 <qrFactor_jq+0x87c>
    }
  }

  for (i = 0; i < 3; i++) {
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003624:	e054      	b.n	80036d0 <qrFactor_jq+0x9ec>
 8003626:	bf00      	nop
 8003628:	3ff00000 	.word	0x3ff00000
    S[3 * i] = R[i];
 800362c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003630:	4613      	mov	r3, r2
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	4413      	add	r3, r2
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	461a      	mov	r2, r3
 800363a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800363e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	1899      	adds	r1, r3, r2
 8003646:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800364a:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 800364e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	e9c1 2300 	strd	r2, r3, [r1]
    S[3 * i + 1] = R[i + 3];
 800365e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003662:	1cd8      	adds	r0, r3, #3
 8003664:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	3308      	adds	r3, #8
 8003672:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8003676:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	18d1      	adds	r1, r2, r3
 800367e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003682:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 8003686:	00c3      	lsls	r3, r0, #3
 8003688:	4413      	add	r3, r2
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	e9c1 2300 	strd	r2, r3, [r1]
    S[3 * i + 2] = R[i + 6];
 8003692:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003696:	1d98      	adds	r0, r3, #6
 8003698:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 800369c:	4613      	mov	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	3310      	adds	r3, #16
 80036a6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80036aa:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	18d1      	adds	r1, r2, r3
 80036b2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80036b6:	f5a3 7288 	sub.w	r2, r3, #272	; 0x110
 80036ba:	00c3      	lsls	r3, r0, #3
 80036bc:	4413      	add	r3, r2
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 3; i++) {
 80036c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036ca:	3301      	adds	r3, #1
 80036cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80036d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	dda9      	ble.n	800362c <qrFactor_jq+0x948>
  }
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80036e0:	46bd      	mov	sp, r7
 80036e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036e6:	bf00      	nop

080036e8 <xnrm2_gwq>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T xnrm2_gwq(int32_T n, const real_T x[9], int32_T ix0)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b092      	sub	sp, #72	; 0x48
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	f340 8090 	ble.w	8003828 <xnrm2_gwq+0x140>
    if (n == 1) {
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d10e      	bne.n	800372c <xnrm2_gwq+0x44>
      y = fabs(x[ix0 - 1]);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003714:	3b01      	subs	r3, #1
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	4413      	add	r3, r2
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	4611      	mov	r1, r2
 8003722:	6439      	str	r1, [r7, #64]	; 0x40
 8003724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
 800372a:	e07d      	b.n	8003828 <xnrm2_gwq+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 8003734:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	3b01      	subs	r3, #1
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003746:	e05d      	b.n	8003804 <xnrm2_gwq+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 8003748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800374a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800374e:	3b01      	subs	r3, #1
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4413      	add	r3, r2
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	4611      	mov	r1, r2
 800375c:	6239      	str	r1, [r7, #32]
 800375e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 8003764:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003768:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800376c:	f7fd f9d4 	bl	8000b18 <__aeabi_dcmpgt>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d029      	beq.n	80037ca <xnrm2_gwq+0xe2>
          real_T t;
          t = scale / absxk;
 8003776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800377a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800377e:	f7fd f865 	bl	800084c <__aeabi_ddiv>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 800378a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800378e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003792:	f7fc ff31 	bl	80005f8 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037a2:	f7fc ff29 	bl	80005f8 <__aeabi_dmul>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	4b23      	ldr	r3, [pc, #140]	; (8003840 <xnrm2_gwq+0x158>)
 80037b4:	f7fc fd6a 	bl	800028c <__adddf3>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 80037c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80037c8:	e019      	b.n	80037fe <xnrm2_gwq+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 80037ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80037d2:	f7fd f83b 	bl	800084c <__aeabi_ddiv>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 80037de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80037e6:	f7fc ff07 	bl	80005f8 <__aeabi_dmul>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037f2:	f7fc fd4b 	bl	800028c <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 80037fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003800:	3301      	adds	r3, #1
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	429a      	cmp	r2, r3
 800380a:	dd9d      	ble.n	8003748 <xnrm2_gwq+0x60>
        }
      }

      y = scale * sqrt(y);
 800380c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003810:	f00d f9ba 	bl	8010b88 <sqrt>
 8003814:	ec53 2b10 	vmov	r2, r3, d0
 8003818:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800381c:	f7fc feec 	bl	80005f8 <__aeabi_dmul>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8003828:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800382c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003830:	eeb0 0a47 	vmov.f32	s0, s14
 8003834:	eef0 0a67 	vmov.f32	s1, s15
 8003838:	3748      	adds	r7, #72	; 0x48
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	3ff00000 	.word	0x3ff00000

08003844 <xdotc>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T xdotc(int32_T n, const real_T x[9], int32_T ix0, const real_T y[9],
                    int32_T iy0)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  real_T d;
  int32_T k;
  d = 0.0;
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (n >= 1) {
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	dd2b      	ble.n	80038bc <xdotc+0x78>
    for (k = 0; k < n; k++) {
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e024      	b.n	80038b4 <xdotc+0x70>
      d += x[(ix0 + k) - 1] * y[(iy0 + k) - 1];
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4413      	add	r3, r2
 8003870:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003874:	3b01      	subs	r3, #1
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	4413      	add	r3, r2
 800387c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4413      	add	r3, r2
 8003886:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800388a:	3b01      	subs	r3, #1
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	4413      	add	r3, r2
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc feaf 	bl	80005f8 <__aeabi_dmul>
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80038a2:	f7fc fcf3 	bl	800028c <__adddf3>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (k = 0; k < n; k++) {
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3301      	adds	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dbd6      	blt.n	800386a <xdotc+0x26>
    }
  }

  return d;
 80038bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038c0:	ec43 2b17 	vmov	d7, r2, r3
}
 80038c4:	eeb0 0a47 	vmov.f32	s0, s14
 80038c8:	eef0 0a67 	vmov.f32	s1, s15
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <xaxpy>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xaxpy(int32_T n, real_T a, int32_T ix0, real_T y[9], int32_T iy0)
{
 80038d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038d4:	b089      	sub	sp, #36	; 0x24
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6178      	str	r0, [r7, #20]
 80038da:	ed87 0b02 	vstr	d0, [r7, #8]
 80038de:	6139      	str	r1, [r7, #16]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	dd41      	ble.n	800396e <xaxpy+0x9c>
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038f6:	f7fd f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d000      	beq.n	8003902 <xaxpy+0x30>
      int32_T tmp;
      tmp = (iy0 + k) - 1;
      y[tmp] += y[(ix0 + k) - 1] * a;
    }
  }
}
 8003900:	e035      	b.n	800396e <xaxpy+0x9c>
    for (k = 0; k < n; k++) {
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e02e      	b.n	8003966 <xaxpy+0x94>
      tmp = (iy0 + k) - 1;
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	4413      	add	r3, r2
 800390e:	3b01      	subs	r3, #1
 8003910:	61bb      	str	r3, [r7, #24]
      y[tmp] += y[(ix0 + k) - 1] * a;
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	4413      	add	r3, r2
 8003924:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003928:	3b01      	subs	r3, #1
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003938:	f7fc fe5e 	bl	80005f8 <__aeabi_dmul>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	18d6      	adds	r6, r2, r3
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4620      	mov	r0, r4
 8003952:	4629      	mov	r1, r5
 8003954:	f7fc fc9a 	bl	800028c <__adddf3>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	e9c6 2300 	strd	r2, r3, [r6]
    for (k = 0; k < n; k++) {
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	3301      	adds	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	429a      	cmp	r2, r3
 800396c:	dbcc      	blt.n	8003908 <xaxpy+0x36>
}
 800396e:	bf00      	nop
 8003970:	3724      	adds	r7, #36	; 0x24
 8003972:	46bd      	mov	sp, r7
 8003974:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003978 <xnrm2_gwqu>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static real_T xnrm2_gwqu(int32_T n, const real_T x[3], int32_T ix0)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b092      	sub	sp, #72	; 0x48
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  real_T y;
  int32_T k;
  y = 0.0;
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  if (n >= 1) {
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f340 8090 	ble.w	8003ab8 <xnrm2_gwqu+0x140>
    if (n == 1) {
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d10e      	bne.n	80039bc <xnrm2_gwqu+0x44>
      y = fabs(x[ix0 - 1]);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80039a4:	3b01      	subs	r3, #1
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	4413      	add	r3, r2
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	4611      	mov	r1, r2
 80039b2:	6439      	str	r1, [r7, #64]	; 0x40
 80039b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039b8:	647b      	str	r3, [r7, #68]	; 0x44
 80039ba:	e07d      	b.n	8003ab8 <xnrm2_gwqu+0x140>
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 53e6 	mov.w	r3, #482344960	; 0x1cc00000
 80039c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      kend = (ix0 + n) - 1;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	3b01      	subs	r3, #1
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (k = ix0; k <= kend; k++) {
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d6:	e05d      	b.n	8003a94 <xnrm2_gwqu+0x11c>
        real_T absxk;
        absxk = fabs(x[k - 1]);
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039da:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80039de:	3b01      	subs	r3, #1
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	4413      	add	r3, r2
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	4611      	mov	r1, r2
 80039ec:	6239      	str	r1, [r7, #32]
 80039ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
        if (absxk > scale) {
 80039f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039fc:	f7fd f88c 	bl	8000b18 <__aeabi_dcmpgt>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d029      	beq.n	8003a5a <xnrm2_gwqu+0xe2>
          real_T t;
          t = scale / absxk;
 8003a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003a0e:	f7fc ff1d 	bl	800084c <__aeabi_ddiv>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	e9c7 2304 	strd	r2, r3, [r7, #16]
          y = y * t * t + 1.0;
 8003a1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a1e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a22:	f7fc fde9 	bl	80005f8 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a32:	f7fc fde1 	bl	80005f8 <__aeabi_dmul>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4b23      	ldr	r3, [pc, #140]	; (8003ad0 <xnrm2_gwqu+0x158>)
 8003a44:	f7fc fc22 	bl	800028c <__adddf3>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          scale = absxk;
 8003a50:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8003a58:	e019      	b.n	8003a8e <xnrm2_gwqu+0x116>
        } else {
          real_T t;
          t = absxk / scale;
 8003a5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003a5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a62:	f7fc fef3 	bl	800084c <__aeabi_ddiv>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
          y += t * t;
 8003a6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a76:	f7fc fdbf 	bl	80005f8 <__aeabi_dmul>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003a82:	f7fc fc03 	bl	800028c <__adddf3>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
      for (k = ix0; k <= kend; k++) {
 8003a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a90:	3301      	adds	r3, #1
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	dd9d      	ble.n	80039d8 <xnrm2_gwqu+0x60>
        }
      }

      y = scale * sqrt(y);
 8003a9c:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8003aa0:	f00d f872 	bl	8010b88 <sqrt>
 8003aa4:	ec53 2b10 	vmov	r2, r3, d0
 8003aa8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003aac:	f7fc fda4 	bl	80005f8 <__aeabi_dmul>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }
  }

  return y;
 8003ab8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003abc:	ec43 2b17 	vmov	d7, r2, r3
}
 8003ac0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ac4:	eef0 0a67 	vmov.f32	s1, s15
 8003ac8:	3748      	adds	r7, #72	; 0x48
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	3ff00000 	.word	0x3ff00000

08003ad4 <xaxpy_c>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xaxpy_c(int32_T n, real_T a, const real_T x[9], int32_T ix0, real_T
                    y[3], int32_T iy0)
{
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad6:	b089      	sub	sp, #36	; 0x24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6178      	str	r0, [r7, #20]
 8003adc:	ed87 0b02 	vstr	d0, [r7, #8]
 8003ae0:	6139      	str	r1, [r7, #16]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	dd41      	ble.n	8003b70 <xaxpy_c+0x9c>
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003af8:	f7fc ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d000      	beq.n	8003b04 <xaxpy_c+0x30>
      int32_T tmp;
      tmp = (iy0 + k) - 1;
      y[tmp] += x[(ix0 + k) - 1] * a;
    }
  }
}
 8003b02:	e035      	b.n	8003b70 <xaxpy_c+0x9c>
    for (k = 0; k < n; k++) {
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
 8003b08:	e02e      	b.n	8003b68 <xaxpy_c+0x94>
      tmp = (iy0 + k) - 1;
 8003b0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3b01      	subs	r3, #1
 8003b12:	61bb      	str	r3, [r7, #24]
      y[tmp] += x[(ix0 + k) - 1] * a;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	4413      	add	r3, r2
 8003b26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b3a:	f7fc fd5d 	bl	80005f8 <__aeabi_dmul>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4610      	mov	r0, r2
 8003b44:	4619      	mov	r1, r3
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	18d6      	adds	r6, r2, r3
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f7fc fb99 	bl	800028c <__adddf3>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	e9c6 2300 	strd	r2, r3, [r6]
    for (k = 0; k < n; k++) {
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3301      	adds	r3, #1
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	dbcc      	blt.n	8003b0a <xaxpy_c+0x36>
}
 8003b70:	bf00      	nop
 8003b72:	3724      	adds	r7, #36	; 0x24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b78 <xaxpy_cs>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xaxpy_cs(int32_T n, real_T a, const real_T x[3], int32_T ix0, real_T
                     y[9], int32_T iy0)
{
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6178      	str	r0, [r7, #20]
 8003b80:	ed87 0b02 	vstr	d0, [r7, #8]
 8003b84:	6139      	str	r1, [r7, #16]
 8003b86:	607a      	str	r2, [r7, #4]
 8003b88:	603b      	str	r3, [r7, #0]
  int32_T k;
  if ((n >= 1) && (!(a == 0.0))) {
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	dd41      	ble.n	8003c14 <xaxpy_cs+0x9c>
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b9c:	f7fc ff94 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d000      	beq.n	8003ba8 <xaxpy_cs+0x30>
      int32_T tmp;
      tmp = (iy0 + k) - 1;
      y[tmp] += x[(ix0 + k) - 1] * a;
    }
  }
}
 8003ba6:	e035      	b.n	8003c14 <xaxpy_cs+0x9c>
    for (k = 0; k < n; k++) {
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e02e      	b.n	8003c0c <xaxpy_cs+0x94>
      tmp = (iy0 + k) - 1;
 8003bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	61bb      	str	r3, [r7, #24]
      y[tmp] += x[(ix0 + k) - 1] * a;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bde:	f7fc fd0b 	bl	80005f8 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	18d6      	adds	r6, r2, r3
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fb47 	bl	800028c <__adddf3>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	e9c6 2300 	strd	r2, r3, [r6]
    for (k = 0; k < n; k++) {
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	69fa      	ldr	r2, [r7, #28]
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	dbcc      	blt.n	8003bae <xaxpy_cs+0x36>
}
 8003c14:	bf00      	nop
 8003c16:	3724      	adds	r7, #36	; 0x24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c1c <xswap>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xswap(real_T x[9], int32_T ix0, int32_T iy0)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  real_T temp;
  temp = x[ix0 - 1];
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 - 1] = x[iy0 - 1];
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003c44:	3b01      	subs	r3, #1
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003c52:	3b01      	subs	r3, #1
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	4419      	add	r1, r3
 8003c5a:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003c5e:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 - 1] = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	18d1      	adds	r1, r2, r3
 8003c70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c74:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0];
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0] = x[iy0];
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	00d2      	lsls	r2, r2, #3
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	4411      	add	r1, r2
 8003c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9c:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0] = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	18d1      	adds	r1, r2, r3
 8003ca8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cac:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[ix0 + 1];
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  x[ix0 + 1] = x[iy0 + 1];
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	3201      	adds	r2, #1
 8003cd0:	00d2      	lsls	r2, r2, #3
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	4411      	add	r1, r2
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	e9c1 2300 	strd	r2, r3, [r1]
  x[iy0 + 1] = temp;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	18d1      	adds	r1, r2, r3
 8003ce8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003cec:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <xrotg>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xrotg(real_T *a, real_T *b, real_T *c, real_T *s)
{
 8003cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d00:	b090      	sub	sp, #64	; 0x40
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
  real_T absa;
  real_T absb;
  real_T roe;
  real_T scale;
  roe = *b;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  absa = fabs(*a);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  absb = fabs(*b);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	6239      	str	r1, [r7, #32]
 8003d30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
  if (absa > absb) {
 8003d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d3e:	f7fc feeb 	bl	8000b18 <__aeabi_dcmpgt>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <xrotg+0x56>
    roe = *a;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  }

  scale = absa + absb;
 8003d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d5a:	f7fc fa97 	bl	800028c <__adddf3>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  if (scale == 0.0) {
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003d72:	f7fc fea9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01b      	beq.n	8003db4 <xrotg+0xb8>
    *s = 0.0;
 8003d7c:	6839      	ldr	r1, [r7, #0]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	e9c1 2300 	strd	r2, r3, [r1]
    *c = 1.0;
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <xrotg+0x1fc>)
 8003d92:	e9c1 2300 	strd	r2, r3, [r1]
    *a = 0.0;
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	e9c1 2300 	strd	r2, r3, [r1]
    *b = 0.0;
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9c1 2300 	strd	r2, r3, [r1]
      *b = 1.0;
    }

    *a = scale;
  }
}
 8003db2:	e09b      	b.n	8003eec <xrotg+0x1f0>
    ads = absa / scale;
 8003db4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003db8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dbc:	f7fc fd46 	bl	800084c <__aeabi_ddiv>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    bds = absb / scale;
 8003dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dcc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003dd0:	f7fc fd3c 	bl	800084c <__aeabi_ddiv>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    scale *= sqrt(ads * ads + bds * bds);
 8003ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4690      	mov	r8, r2
 8003dee:	4699      	mov	r9, r3
 8003df0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003df4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003df8:	f7fc fbfe 	bl	80005f8 <__aeabi_dmul>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	460b      	mov	r3, r1
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc fa42 	bl	800028c <__adddf3>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	ec43 2b17 	vmov	d7, r2, r3
 8003e10:	eeb0 0a47 	vmov.f32	s0, s14
 8003e14:	eef0 0a67 	vmov.f32	s1, s15
 8003e18:	f00c feb6 	bl	8010b88 <sqrt>
 8003e1c:	ec53 2b10 	vmov	r2, r3, d0
 8003e20:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003e24:	f7fc fbe8 	bl	80005f8 <__aeabi_dmul>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (roe < 0.0) {
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003e3c:	f7fc fe4e 	bl	8000adc <__aeabi_dcmplt>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <xrotg+0x156>
      scale = -scale;
 8003e46:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003e4e:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    *c = *a / scale;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e5c:	f7fc fcf6 	bl	800084c <__aeabi_ddiv>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	e9c1 2300 	strd	r2, r3, [r1]
    *s = *b / scale;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e74:	f7fc fcea 	bl	800084c <__aeabi_ddiv>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	e9c1 2300 	strd	r2, r3, [r1]
    if (absa > absb) {
 8003e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e8a:	f7fc fe45 	bl	8000b18 <__aeabi_dcmpgt>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d006      	beq.n	8003ea2 <xrotg+0x1a6>
      *b = *s;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	e9c1 2300 	strd	r2, r3, [r1]
 8003ea0:	e01f      	b.n	8003ee2 <xrotg+0x1e6>
    } else if (*c != 0.0) {
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	f7fc fe0a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <xrotg+0x1da>
      *b = 1.0 / *c;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f04f 0000 	mov.w	r0, #0
 8003ec4:	490c      	ldr	r1, [pc, #48]	; (8003ef8 <xrotg+0x1fc>)
 8003ec6:	f7fc fcc1 	bl	800084c <__aeabi_ddiv>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	e9c1 2300 	strd	r2, r3, [r1]
 8003ed4:	e005      	b.n	8003ee2 <xrotg+0x1e6>
      *b = 1.0;
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <xrotg+0x1fc>)
 8003ede:	e9c1 2300 	strd	r2, r3, [r1]
    *a = scale;
 8003ee2:	68f9      	ldr	r1, [r7, #12]
 8003ee4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ee8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003eec:	bf00      	nop
 8003eee:	3740      	adds	r7, #64	; 0x40
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ef6:	bf00      	nop
 8003ef8:	3ff00000 	.word	0x3ff00000

08003efc <xrot>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xrot(real_T x[9], int32_T ix0, int32_T iy0, real_T c, real_T s)
{
 8003efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f00:	b08c      	sub	sp, #48	; 0x30
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	61f8      	str	r0, [r7, #28]
 8003f06:	61b9      	str	r1, [r7, #24]
 8003f08:	617a      	str	r2, [r7, #20]
 8003f0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8003f0e:	ed87 1b00 	vstr	d1, [r7]
  real_T temp;
  real_T temp_tmp;
  temp = x[iy0 - 1];
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 - 1];
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	4413      	add	r3, r2
 8003f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 - 1] = temp * c - temp_tmp * s;
 8003f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f46:	f7fc fb57 	bl	80005f8 <__aeabi_dmul>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4699      	mov	r9, r3
 8003f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f5a:	f7fc fb4d 	bl	80005f8 <__aeabi_dmul>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	18d4      	adds	r4, r2, r3
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4640      	mov	r0, r8
 8003f7a:	4649      	mov	r1, r9
 8003f7c:	f7fc f984 	bl	8000288 <__aeabi_dsub>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 - 1] = temp_tmp * c + temp * s;
 8003f88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003f90:	f7fc fb32 	bl	80005f8 <__aeabi_dmul>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4690      	mov	r8, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fa0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fa4:	f7fc fb28 	bl	80005f8 <__aeabi_dmul>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	69fa      	ldr	r2, [r7, #28]
 8003fbc:	18d4      	adds	r4, r2, r3
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4640      	mov	r0, r8
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	f7fc f961 	bl	800028c <__adddf3>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	e9c4 2300 	strd	r2, r3, [r4]
  temp = x[ix0] * c + x[iy0] * s;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe2:	f7fc fb09 	bl	80005f8 <__aeabi_dmul>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4614      	mov	r4, r2
 8003fec:	461d      	mov	r5, r3
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ffe:	f7fc fafb 	bl	80005f8 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4620      	mov	r0, r4
 8004008:	4629      	mov	r1, r5
 800400a:	f7fc f93f 	bl	800028c <__adddf3>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  x[iy0] = x[iy0] * c - x[ix0] * s;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004022:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004026:	f7fc fae7 	bl	80005f8 <__aeabi_dmul>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4690      	mov	r8, r2
 8004030:	4699      	mov	r9, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	4413      	add	r3, r2
 800403a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004042:	f7fc fad9 	bl	80005f8 <__aeabi_dmul>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	18d4      	adds	r4, r2, r3
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4640      	mov	r0, r8
 800405c:	4649      	mov	r1, r9
 800405e:	f7fc f913 	bl	8000288 <__aeabi_dsub>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0] = temp;
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	18d1      	adds	r1, r2, r3
 8004072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004076:	e9c1 2300 	strd	r2, r3, [r1]
  temp = x[iy0 + 1];
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	3301      	adds	r3, #1
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	4413      	add	r3, r2
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  temp_tmp = x[ix0 + 1];
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	3301      	adds	r3, #1
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  x[iy0 + 1] = temp * c - temp_tmp * s;
 800409e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040a6:	f7fc faa7 	bl	80005f8 <__aeabi_dmul>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4690      	mov	r8, r2
 80040b0:	4699      	mov	r9, r3
 80040b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040b6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80040ba:	f7fc fa9d 	bl	80005f8 <__aeabi_dmul>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	18d4      	adds	r4, r2, r3
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc f8d6 	bl	8000288 <__aeabi_dsub>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	e9c4 2300 	strd	r2, r3, [r4]
  x[ix0 + 1] = temp_tmp * c + temp * s;
 80040e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80040ec:	f7fc fa84 	bl	80005f8 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4690      	mov	r8, r2
 80040f6:	4699      	mov	r9, r3
 80040f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004100:	f7fc fa7a 	bl	80005f8 <__aeabi_dmul>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	4610      	mov	r0, r2
 800410a:	4619      	mov	r1, r3
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	3301      	adds	r3, #1
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	18d4      	adds	r4, r2, r3
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc f8b5 	bl	800028c <__adddf3>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	e9c4 2300 	strd	r2, r3, [r4]
}
 800412a:	bf00      	nop
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004134:	0000      	movs	r0, r0
	...

08004138 <svd>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void svd(const real_T A[9], real_T U[9], real_T s[3], real_T V[9])
{
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	ed2d 8b02 	vpush	{d8}
 8004140:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8004144:	af02      	add	r7, sp, #8
 8004146:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
 800414a:	f507 7008 	add.w	r0, r7, #544	; 0x220
 800414e:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8004152:	6001      	str	r1, [r0, #0]
 8004154:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8004158:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 800415c:	600a      	str	r2, [r1, #0]
 800415e:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8004162:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004166:	6013      	str	r3, [r2, #0]
  int32_T kase;
  int32_T m;
  int32_T qjj;
  int32_T qp1;
  int32_T qq;
  b_s[0] = 0.0;
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9c7 235e 	strd	r2, r3, [r7, #376]	; 0x178
  e[0] = 0.0;
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
  work[0] = 0.0;
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
  b_s[1] = 0.0;
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9c7 2360 	strd	r2, r3, [r7, #384]	; 0x180
  e[1] = 0.0;
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  work[1] = 0.0;
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
  b_s[2] = 0.0;
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  e[2] = 0.0;
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  work[2] = 0.0;
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	e9c7 2356 	strd	r2, r3, [r7, #344]	; 0x158
  for (m = 0; m < 9; m++) {
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80041da:	e035      	b.n	8004248 <svd+0x110>
    b_A[m] = A[m];
 80041dc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80041e0:	00da      	lsls	r2, r3, #3
 80041e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80041e6:	4413      	add	r3, r2
 80041e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80041f6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80041fa:	4413      	add	r3, r2
 80041fc:	3b90      	subs	r3, #144	; 0x90
 80041fe:	e9c3 0100 	strd	r0, r1, [r3]
    U[m] = 0.0;
 8004202:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004206:	00da      	lsls	r2, r3, #3
 8004208:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800420c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	1899      	adds	r1, r3, r2
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9c1 2300 	strd	r2, r3, [r1]
    V[m] = 0.0;
 8004220:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004224:	00da      	lsls	r2, r3, #3
 8004226:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800422a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	1899      	adds	r1, r3, r2
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	e9c1 2300 	strd	r2, r3, [r1]
  for (m = 0; m < 9; m++) {
 800423e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004242:	3301      	adds	r3, #1
 8004244:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8004248:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800424c:	2b08      	cmp	r3, #8
 800424e:	ddc5      	ble.n	80041dc <svd+0xa4>
  }

  for (m = 0; m < 2; m++) {
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8004256:	e383      	b.n	8004960 <svd+0x828>
    boolean_T apply_transform;
    qp1 = m + 2;
 8004258:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800425c:	3302      	adds	r3, #2
 800425e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    qq = (3 * m + m) + 1;
 8004262:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	3301      	adds	r3, #1
 800426a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    apply_transform = false;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
    nrm = xnrm2_gwq(3 - m, b_A, qq);
 8004274:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004278:	f1c3 0003 	rsb	r0, r3, #3
 800427c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004280:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8004284:	4619      	mov	r1, r3
 8004286:	f7ff fa2f 	bl	80036e8 <xnrm2_gwq>
 800428a:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
    if (nrm > 0.0) {
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800429a:	f7fc fc3d 	bl	8000b18 <__aeabi_dcmpgt>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8124 	beq.w	80044ee <svd+0x3b6>
      apply_transform = true;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
      if (b_A[qq - 1] < 0.0) {
 80042ac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80042b0:	3b01      	subs	r3, #1
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042b8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80042bc:	4413      	add	r3, r2
 80042be:	3b90      	subs	r3, #144	; 0x90
 80042c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f7fc fc06 	bl	8000adc <__aeabi_dcmplt>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d017      	beq.n	8004306 <svd+0x1ce>
        b_s[m] = -nrm;
 80042d6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80042da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80042de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80042e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80042ea:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042f4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80042f8:	4413      	add	r3, r2
 80042fa:	3ba8      	subs	r3, #168	; 0xa8
 80042fc:	ed97 7b44 	vldr	d7, [r7, #272]	; 0x110
 8004300:	ed83 7b00 	vstr	d7, [r3]
 8004304:	e00d      	b.n	8004322 <svd+0x1ea>
      } else {
        b_s[m] = nrm;
 8004306:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004310:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004314:	4413      	add	r3, r2
 8004316:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 800431a:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800431e:	e9c1 2300 	strd	r2, r3, [r1]
      }

      if (fabs(b_s[m]) >= 1.0020841800044864E-292) {
 8004322:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800432c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004330:	4413      	add	r3, r2
 8004332:	3ba8      	subs	r3, #168	; 0xa8
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800433c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004340:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800434c:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8004350:	f7fc fbd8 	bl	8000b04 <__aeabi_dcmpge>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d04c      	beq.n	80043f4 <svd+0x2bc>
        nrm = 1.0 / b_s[m];
 800435a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004364:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004368:	4413      	add	r3, r2
 800436a:	3ba8      	subs	r3, #168	; 0xa8
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f04f 0000 	mov.w	r0, #0
 8004374:	49d1      	ldr	r1, [pc, #836]	; (80046bc <svd+0x584>)
 8004376:	f7fc fa69 	bl	800084c <__aeabi_ddiv>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
        qjj = (qq - m) + 2;
 8004382:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8004386:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	3302      	adds	r3, #2
 800438e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        for (kase = qq; kase <= qjj; kase++) {
 8004392:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004396:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800439a:	e024      	b.n	80043e6 <svd+0x2ae>
          b_A[kase - 1] *= nrm;
 800439c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80043a0:	3b01      	subs	r3, #1
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80043a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80043ac:	4413      	add	r3, r2
 80043ae:	3b90      	subs	r3, #144	; 0x90
 80043b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043b4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80043b8:	1e5c      	subs	r4, r3, #1
 80043ba:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80043be:	f7fc f91b 	bl	80005f8 <__aeabi_dmul>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	00e3      	lsls	r3, r4, #3
 80043cc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80043d0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80043d4:	4413      	add	r3, r2
 80043d6:	3b90      	subs	r3, #144	; 0x90
 80043d8:	e9c3 0100 	strd	r0, r1, [r3]
        for (kase = qq; kase <= qjj; kase++) {
 80043dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80043e0:	3301      	adds	r3, #1
 80043e2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80043e6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80043ea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80043ee:	429a      	cmp	r2, r3
 80043f0:	ddd4      	ble.n	800439c <svd+0x264>
 80043f2:	e044      	b.n	800447e <svd+0x346>
        }
      } else {
        qjj = (qq - m) + 2;
 80043f4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80043f8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	3302      	adds	r3, #2
 8004400:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        for (kase = qq; kase <= qjj; kase++) {
 8004404:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004408:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800440c:	e031      	b.n	8004472 <svd+0x33a>
          b_A[kase - 1] /= b_s[m];
 800440e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004412:	3b01      	subs	r3, #1
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800441a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800441e:	4413      	add	r3, r2
 8004420:	3b90      	subs	r3, #144	; 0x90
 8004422:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004426:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004430:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004434:	4413      	add	r3, r2
 8004436:	3ba8      	subs	r3, #168	; 0xa8
 8004438:	e9d3 0100 	ldrd	r0, r1, [r3]
 800443c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004440:	1e5e      	subs	r6, r3, #1
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f7fc f9ff 	bl	800084c <__aeabi_ddiv>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4610      	mov	r0, r2
 8004454:	4619      	mov	r1, r3
 8004456:	00f3      	lsls	r3, r6, #3
 8004458:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800445c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004460:	4413      	add	r3, r2
 8004462:	3b90      	subs	r3, #144	; 0x90
 8004464:	e9c3 0100 	strd	r0, r1, [r3]
        for (kase = qq; kase <= qjj; kase++) {
 8004468:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800446c:	3301      	adds	r3, #1
 800446e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004472:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8004476:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800447a:	429a      	cmp	r2, r3
 800447c:	ddc7      	ble.n	800440e <svd+0x2d6>
        }
      }

      b_A[qq - 1]++;
 800447e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004482:	1e5c      	subs	r4, r3, #1
 8004484:	00e3      	lsls	r3, r4, #3
 8004486:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800448a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800448e:	4413      	add	r3, r2
 8004490:	3b90      	subs	r3, #144	; 0x90
 8004492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	4b88      	ldr	r3, [pc, #544]	; (80046bc <svd+0x584>)
 800449c:	f7fb fef6 	bl	800028c <__adddf3>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	00e3      	lsls	r3, r4, #3
 80044aa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044ae:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80044b2:	4413      	add	r3, r2
 80044b4:	3b90      	subs	r3, #144	; 0x90
 80044b6:	e9c3 0100 	strd	r0, r1, [r3]
      b_s[m] = -b_s[m];
 80044ba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044c4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80044c8:	4413      	add	r3, r2
 80044ca:	3ba8      	subs	r3, #168	; 0xa8
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	4692      	mov	sl, r2
 80044d2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 80044d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044e0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80044e4:	4413      	add	r3, r2
 80044e6:	3ba8      	subs	r3, #168	; 0xa8
 80044e8:	e9c3 ab00 	strd	sl, fp, [r3]
 80044ec:	e00f      	b.n	800450e <svd+0x3d6>
    } else {
      b_s[m] = 0.0;
 80044ee:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80044f8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80044fc:	4413      	add	r3, r2
 80044fe:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	f04f 0300 	mov.w	r3, #0
 800450a:	e9c1 2300 	strd	r2, r3, [r1]
    }

    for (kase = qp1; kase < 4; kase++) {
 800450e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004512:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004516:	e063      	b.n	80045e0 <svd+0x4a8>
      qjj = (kase - 1) * 3 + m;
 8004518:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800451c:	1e5a      	subs	r2, r3, #1
 800451e:	4613      	mov	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	441a      	add	r2, r3
 8004524:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004528:	4413      	add	r3, r2
 800452a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
      if (apply_transform) {
 800452e:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 8004532:	2b00      	cmp	r3, #0
 8004534:	d038      	beq.n	80045a8 <svd+0x470>
        xaxpy(3 - m, -(xdotc(3 - m, b_A, qq, b_A, qjj + 1) / b_A[m + 3 * m]), qq,
 8004536:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800453a:	f1c3 0403 	rsb	r4, r3, #3
 800453e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004542:	f1c3 0003 	rsb	r0, r3, #3
 8004546:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800454a:	3301      	adds	r3, #1
 800454c:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004550:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800455c:	f7ff f972 	bl	8003844 <xdotc>
 8004560:	ec51 0b10 	vmov	r0, r1, d0
 8004564:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004570:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004574:	4413      	add	r3, r2
 8004576:	3b90      	subs	r3, #144	; 0x90
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	f7fc f966 	bl	800084c <__aeabi_ddiv>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8004588:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800458c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004590:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004594:	3301      	adds	r3, #1
 8004596:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800459a:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800459e:	ed97 0b40 	vldr	d0, [r7, #256]	; 0x100
 80045a2:	4620      	mov	r0, r4
 80045a4:	f7ff f995 	bl	80038d2 <xaxpy>
              b_A, qjj + 1);
      }

      e[kase - 1] = b_A[qjj];
 80045a8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80045ac:	1e5a      	subs	r2, r3, #1
 80045ae:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80045b8:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80045bc:	440b      	add	r3, r1
 80045be:	3b90      	subs	r3, #144	; 0x90
 80045c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045c4:	00d3      	lsls	r3, r2, #3
 80045c6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80045ca:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80045ce:	4413      	add	r3, r2
 80045d0:	3bc0      	subs	r3, #192	; 0xc0
 80045d2:	e9c3 0100 	strd	r0, r1, [r3]
    for (kase = qp1; kase < 4; kase++) {
 80045d6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80045da:	3301      	adds	r3, #1
 80045dc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80045e0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	dd97      	ble.n	8004518 <svd+0x3e0>
    }

    for (qq = m + 1; qq < 4; qq++) {
 80045e8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80045ec:	3301      	adds	r3, #1
 80045ee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80045f2:	e025      	b.n	8004640 <svd+0x508>
      kase = (3 * m + qq) - 1;
 80045f4:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004602:	4413      	add	r3, r2
 8004604:	3b01      	subs	r3, #1
 8004606:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
      U[kase] = b_A[kase];
 800460a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800460e:	00da      	lsls	r2, r3, #3
 8004610:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004614:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	1899      	adds	r1, r3, r2
 800461c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004626:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800462a:	4413      	add	r3, r2
 800462c:	3b90      	subs	r3, #144	; 0x90
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	e9c1 2300 	strd	r2, r3, [r1]
    for (qq = m + 1; qq < 4; qq++) {
 8004636:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800463a:	3301      	adds	r3, #1
 800463c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004640:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004644:	2b03      	cmp	r3, #3
 8004646:	ddd5      	ble.n	80045f4 <svd+0x4bc>
    }

    if (m + 1 <= 1) {
 8004648:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800464c:	2b00      	cmp	r3, #0
 800464e:	f300 8182 	bgt.w	8004956 <svd+0x81e>
      nrm = xnrm2_gwqu(2, e, 2);
 8004652:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8004656:	2202      	movs	r2, #2
 8004658:	4619      	mov	r1, r3
 800465a:	2002      	movs	r0, #2
 800465c:	f7ff f98c 	bl	8003978 <xnrm2_gwqu>
 8004660:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
      if (nrm == 0.0) {
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004670:	f7fc fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <svd+0x550>
        e[0] = 0.0;
 800467a:	f04f 0200 	mov.w	r2, #0
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
 8004686:	e13e      	b.n	8004906 <svd+0x7ce>
      } else {
        if (e[1] < 0.0) {
 8004688:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	f7fc fa22 	bl	8000adc <__aeabi_dcmplt>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d010      	beq.n	80046c0 <svd+0x588>
          e[0] = -nrm;
 800469e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80046a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80046a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80046aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80046ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80046b2:	ed97 7b3e 	vldr	d7, [r7, #248]	; 0xf8
 80046b6:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
 80046ba:	e005      	b.n	80046c8 <svd+0x590>
 80046bc:	3ff00000 	.word	0x3ff00000
        } else {
          e[0] = nrm;
 80046c0:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80046c4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
        }

        nrm = e[0];
 80046c8:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80046cc:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
        if (fabs(e[0]) >= 1.0020841800044864E-292) {
 80046d0:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80046d4:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80046d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80046e8:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80046ec:	f7fc fa0a 	bl	8000b04 <__aeabi_dcmpge>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d039      	beq.n	800476a <svd+0x632>
          nrm = 1.0 / e[0];
 80046f6:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80046fa:	f04f 0000 	mov.w	r0, #0
 80046fe:	49c8      	ldr	r1, [pc, #800]	; (8004a20 <svd+0x8e8>)
 8004700:	f7fc f8a4 	bl	800084c <__aeabi_ddiv>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
          for (qq = qp1; qq < 4; qq++) {
 800470c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004710:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004714:	e024      	b.n	8004760 <svd+0x628>
            e[qq - 1] *= nrm;
 8004716:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800471a:	3b01      	subs	r3, #1
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004722:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004726:	4413      	add	r3, r2
 8004728:	3bc0      	subs	r3, #192	; 0xc0
 800472a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800472e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004732:	1e5c      	subs	r4, r3, #1
 8004734:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004738:	f7fb ff5e 	bl	80005f8 <__aeabi_dmul>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4610      	mov	r0, r2
 8004742:	4619      	mov	r1, r3
 8004744:	00e3      	lsls	r3, r4, #3
 8004746:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800474a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800474e:	4413      	add	r3, r2
 8004750:	3bc0      	subs	r3, #192	; 0xc0
 8004752:	e9c3 0100 	strd	r0, r1, [r3]
          for (qq = qp1; qq < 4; qq++) {
 8004756:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800475a:	3301      	adds	r3, #1
 800475c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004760:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004764:	2b03      	cmp	r3, #3
 8004766:	ddd6      	ble.n	8004716 <svd+0x5de>
 8004768:	e02d      	b.n	80047c6 <svd+0x68e>
          }
        } else {
          for (qq = qp1; qq < 4; qq++) {
 800476a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800476e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004772:	e024      	b.n	80047be <svd+0x686>
            e[qq - 1] /= nrm;
 8004774:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004778:	3b01      	subs	r3, #1
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004780:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004784:	4413      	add	r3, r2
 8004786:	3bc0      	subs	r3, #192	; 0xc0
 8004788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004790:	1e5c      	subs	r4, r3, #1
 8004792:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004796:	f7fc f859 	bl	800084c <__aeabi_ddiv>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	00e3      	lsls	r3, r4, #3
 80047a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80047a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80047ac:	4413      	add	r3, r2
 80047ae:	3bc0      	subs	r3, #192	; 0xc0
 80047b0:	e9c3 0100 	strd	r0, r1, [r3]
          for (qq = qp1; qq < 4; qq++) {
 80047b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80047b8:	3301      	adds	r3, #1
 80047ba:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80047be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80047c2:	2b03      	cmp	r3, #3
 80047c4:	ddd6      	ble.n	8004774 <svd+0x63c>
          }
        }

        e[1]++;
 80047c6:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	4b94      	ldr	r3, [pc, #592]	; (8004a20 <svd+0x8e8>)
 80047d0:	f7fb fd5c 	bl	800028c <__adddf3>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
        e[0] = -e[0];
 80047dc:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80047e0:	4690      	mov	r8, r2
 80047e2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80047e6:	e9c7 8958 	strd	r8, r9, [r7, #352]	; 0x160
        for (qq = qp1; qq < 4; qq++) {
 80047ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80047ee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80047f2:	e015      	b.n	8004820 <svd+0x6e8>
          work[qq - 1] = 0.0;
 80047f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80047f8:	3b01      	subs	r3, #1
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004800:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004804:	4413      	add	r3, r2
 8004806:	f1a3 01d8 	sub.w	r1, r3, #216	; 0xd8
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	e9c1 2300 	strd	r2, r3, [r1]
        for (qq = qp1; qq < 4; qq++) {
 8004816:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800481a:	3301      	adds	r3, #1
 800481c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004820:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004824:	2b03      	cmp	r3, #3
 8004826:	dde5      	ble.n	80047f4 <svd+0x6bc>
        }

        for (qq = qp1; qq < 4; qq++) {
 8004828:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800482c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004830:	e026      	b.n	8004880 <svd+0x748>
          xaxpy_c(2, e[qq - 1], b_A, 3 * (qq - 1) + 2, work, 2);
 8004832:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004836:	3b01      	subs	r3, #1
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800483e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004842:	4413      	add	r3, r2
 8004844:	3bc0      	subs	r3, #192	; 0xc0
 8004846:	ed93 7b00 	vldr	d7, [r3]
 800484a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800484e:	1e5a      	subs	r2, r3, #1
 8004850:	4613      	mov	r3, r2
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	4413      	add	r3, r2
 8004856:	1c98      	adds	r0, r3, #2
 8004858:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800485c:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8004860:	2302      	movs	r3, #2
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	4613      	mov	r3, r2
 8004866:	4602      	mov	r2, r0
 8004868:	eeb0 0a47 	vmov.f32	s0, s14
 800486c:	eef0 0a67 	vmov.f32	s1, s15
 8004870:	2002      	movs	r0, #2
 8004872:	f7ff f92f 	bl	8003ad4 <xaxpy_c>
        for (qq = qp1; qq < 4; qq++) {
 8004876:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800487a:	3301      	adds	r3, #1
 800487c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004880:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004884:	2b03      	cmp	r3, #3
 8004886:	ddd4      	ble.n	8004832 <svd+0x6fa>
        }

        for (qq = qp1; qq < 4; qq++) {
 8004888:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800488c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8004890:	e035      	b.n	80048fe <svd+0x7c6>
          xaxpy_cs(2, -e[qq - 1] / e[1], work, 2, b_A, 3 * (qq - 1) + 2);
 8004892:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004896:	3b01      	subs	r3, #1
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800489e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80048a2:	4413      	add	r3, r2
 80048a4:	3bc0      	subs	r3, #192	; 0xc0
 80048a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048aa:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80048ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80048b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80048b6:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 80048ba:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80048be:	f7fb ffc5 	bl	800084c <__aeabi_ddiv>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	ec43 2b17 	vmov	d7, r2, r3
 80048ca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80048ce:	1e5a      	subs	r2, r3, #1
 80048d0:	4613      	mov	r3, r2
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4413      	add	r3, r2
 80048d6:	3302      	adds	r3, #2
 80048d8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 80048dc:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	4613      	mov	r3, r2
 80048e4:	2202      	movs	r2, #2
 80048e6:	eeb0 0a47 	vmov.f32	s0, s14
 80048ea:	eef0 0a67 	vmov.f32	s1, s15
 80048ee:	2002      	movs	r0, #2
 80048f0:	f7ff f942 	bl	8003b78 <xaxpy_cs>
        for (qq = qp1; qq < 4; qq++) {
 80048f4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80048f8:	3301      	adds	r3, #1
 80048fa:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80048fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004902:	2b03      	cmp	r3, #3
 8004904:	ddc5      	ble.n	8004892 <svd+0x75a>
        }
      }

      for (qq = qp1; qq < 4; qq++) {
 8004906:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800490a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800490e:	e01e      	b.n	800494e <svd+0x816>
        V[qq - 1] = e[qq - 1];
 8004910:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004914:	1e58      	subs	r0, r3, #1
 8004916:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800491a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800491e:	3b01      	subs	r3, #1
 8004920:	00da      	lsls	r2, r3, #3
 8004922:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	1899      	adds	r1, r3, r2
 800492e:	00c3      	lsls	r3, r0, #3
 8004930:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004934:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004938:	4413      	add	r3, r2
 800493a:	3bc0      	subs	r3, #192	; 0xc0
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	e9c1 2300 	strd	r2, r3, [r1]
      for (qq = qp1; qq < 4; qq++) {
 8004944:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004948:	3301      	adds	r3, #1
 800494a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800494e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004952:	2b03      	cmp	r3, #3
 8004954:	dddc      	ble.n	8004910 <svd+0x7d8>
  for (m = 0; m < 2; m++) {
 8004956:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800495a:	3301      	adds	r3, #1
 800495c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8004960:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8004964:	2b01      	cmp	r3, #1
 8004966:	f77f ac77 	ble.w	8004258 <svd+0x120>
      }
    }
  }

  m = 1;
 800496a:	2301      	movs	r3, #1
 800496c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  b_s[2] = b_A[8];
 8004970:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8004974:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
  e[1] = b_A[7];
 8004978:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 800497c:	e9c7 235a 	strd	r2, r3, [r7, #360]	; 0x168
  e[2] = 0.0;
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
  U[6] = 0.0;
 800498c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004990:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9c1 2300 	strd	r2, r3, [r1]
  U[7] = 0.0;
 80049a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80049aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9c1 2300 	strd	r2, r3, [r1]
  U[8] = 1.0;
 80049c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80049c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <svd+0x8e8>)
 80049d4:	e9c1 2300 	strd	r2, r3, [r1]
  for (qp1 = 1; qp1 >= 0; qp1--) {
 80049d8:	2301      	movs	r3, #1
 80049da:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 80049de:	e12a      	b.n	8004c36 <svd+0xafe>
    qq = 3 * qp1 + qp1;
 80049e0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    if (b_s[qp1] != 0.0) {
 80049ea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80049f4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80049f8:	4413      	add	r3, r2
 80049fa:	3ba8      	subs	r3, #168	; 0xa8
 80049fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	f7fc f85e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 80c3 	bne.w	8004b9a <svd+0xa62>
      for (kase = qp1 + 2; kase < 4; kase++) {
 8004a14:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004a18:	3302      	adds	r3, #2
 8004a1a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004a1e:	e054      	b.n	8004aca <svd+0x992>
 8004a20:	3ff00000 	.word	0x3ff00000
        qjj = ((kase - 1) * 3 + qp1) + 1;
 8004a24:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004a28:	1e5a      	subs	r2, r3, #1
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	441a      	add	r2, r3
 8004a30:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004a34:	4413      	add	r3, r2
 8004a36:	3301      	adds	r3, #1
 8004a38:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        xaxpy(3 - qp1, -(xdotc(3 - qp1, U, qq + 1, U, qjj) / U[qq]), qq + 1, U,
 8004a3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004a40:	f1c3 0503 	rsb	r5, r3, #3
 8004a44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004a48:	f1c3 0403 	rsb	r4, r3, #3
 8004a4c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004a50:	1c58      	adds	r0, r3, #1
 8004a52:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004a56:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8004a5a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004a5e:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8004a62:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	6813      	ldr	r3, [r2, #0]
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	6809      	ldr	r1, [r1, #0]
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7fe fee8 	bl	8003844 <xdotc>
 8004a74:	ec51 0b10 	vmov	r0, r1, d0
 8004a78:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004a7c:	00da      	lsls	r2, r3, #3
 8004a7e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004a82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4413      	add	r3, r2
 8004a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8e:	f7fb fedd 	bl	800084c <__aeabi_ddiv>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8004a9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004aa2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004aa6:	1c59      	adds	r1, r3, #1
 8004aa8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004aac:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8004ab0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	ed97 0b38 	vldr	d0, [r7, #224]	; 0xe0
 8004aba:	4628      	mov	r0, r5
 8004abc:	f7fe ff09 	bl	80038d2 <xaxpy>
      for (kase = qp1 + 2; kase < 4; kase++) {
 8004ac0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8004aca:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	dda8      	ble.n	8004a24 <svd+0x8ec>
              qjj);
      }

      for (qjj = qp1 + 1; qjj < 4; qjj++) {
 8004ad2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004adc:	e02d      	b.n	8004b3a <svd+0xa02>
        kase = (3 * qp1 + qjj) - 1;
 8004ade:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	441a      	add	r2, r3
 8004ae8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004aec:	4413      	add	r3, r2
 8004aee:	3b01      	subs	r3, #1
 8004af0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        U[kase] = -U[kase];
 8004af4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004af8:	00da      	lsls	r2, r3, #3
 8004afa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004afe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4413      	add	r3, r2
 8004b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b0a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8004b0e:	00da      	lsls	r2, r3, #3
 8004b10:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004b14:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8004b20:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8004b24:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b28:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8004b2c:	ed83 7b00 	vstr	d7, [r3]
      for (qjj = qp1 + 1; qjj < 4; qjj++) {
 8004b30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b34:	3301      	adds	r3, #1
 8004b36:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004b3a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	ddcd      	ble.n	8004ade <svd+0x9a6>
      }

      U[qq]++;
 8004b42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004b46:	00da      	lsls	r2, r3, #3
 8004b48:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004b4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	189c      	adds	r4, r3, r2
 8004b54:	e9d4 0100 	ldrd	r0, r1, [r4]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	4b9d      	ldr	r3, [pc, #628]	; (8004dd4 <svd+0xc9c>)
 8004b5e:	f7fb fb95 	bl	800028c <__adddf3>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	e9c4 2300 	strd	r2, r3, [r4]
      if (qp1 - 1 >= 0) {
 8004b6a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dd5c      	ble.n	8004c2c <svd+0xaf4>
        U[3 * qp1] = 0.0;
 8004b72:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004b76:	4613      	mov	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004b84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	1899      	adds	r1, r3, r2
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9c1 2300 	strd	r2, r3, [r1]
 8004b98:	e048      	b.n	8004c2c <svd+0xaf4>
      }
    } else {
      U[3 * qp1] = 0.0;
 8004b9a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004bac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	1899      	adds	r1, r3, r2
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * qp1 + 1] = 0.0;
 8004bc0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	f103 0208 	add.w	r2, r3, #8
 8004bd0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004bd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1899      	adds	r1, r3, r2
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	e9c1 2300 	strd	r2, r3, [r1]
      U[3 * qp1 + 2] = 0.0;
 8004be8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004bec:	4613      	mov	r3, r2
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	4413      	add	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	f103 0210 	add.w	r2, r3, #16
 8004bf8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004bfc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	1899      	adds	r1, r3, r2
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9c1 2300 	strd	r2, r3, [r1]
      U[qq] = 1.0;
 8004c10:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004c14:	00da      	lsls	r2, r3, #3
 8004c16:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004c1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1899      	adds	r1, r3, r2
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	4b6b      	ldr	r3, [pc, #428]	; (8004dd4 <svd+0xc9c>)
 8004c28:	e9c1 2300 	strd	r2, r3, [r1]
  for (qp1 = 1; qp1 >= 0; qp1--) {
 8004c2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c30:	3b01      	subs	r3, #1
 8004c32:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004c36:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f6bf aed0 	bge.w	80049e0 <svd+0x8a8>
    }
  }

  for (qp1 = 2; qp1 >= 0; qp1--) {
 8004c40:	2302      	movs	r3, #2
 8004c42:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004c46:	e0bc      	b.n	8004dc2 <svd+0xc8a>
    if ((qp1 + 1 <= 1) && (e[0] != 0.0)) {
 8004c48:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	dc6a      	bgt.n	8004d26 <svd+0xbee>
 8004c50:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	f7fb ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d15f      	bne.n	8004d26 <svd+0xbee>
      xaxpy(2, -(xdotc(2, V, 2, V, 5) / V[1]), 2, V, 5);
 8004c66:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004c6a:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004c6e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004c72:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8004c76:	2305      	movs	r3, #5
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	6813      	ldr	r3, [r2, #0]
 8004c7c:	2202      	movs	r2, #2
 8004c7e:	6809      	ldr	r1, [r1, #0]
 8004c80:	2002      	movs	r0, #2
 8004c82:	f7fe fddf 	bl	8003844 <xdotc>
 8004c86:	ec51 0b10 	vmov	r0, r1, d0
 8004c8a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	f7fb fdd7 	bl	800084c <__aeabi_ddiv>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8004ca6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004cae:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004cb2:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004cb6:	2305      	movs	r3, #5
 8004cb8:	6812      	ldr	r2, [r2, #0]
 8004cba:	2102      	movs	r1, #2
 8004cbc:	ed97 0b34 	vldr	d0, [r7, #208]	; 0xd0
 8004cc0:	2002      	movs	r0, #2
 8004cc2:	f7fe fe06 	bl	80038d2 <xaxpy>
      xaxpy(2, -(xdotc(2, V, 2, V, 8) / V[1]), 2, V, 8);
 8004cc6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004cca:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004cce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004cd2:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	6813      	ldr	r3, [r2, #0]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	6809      	ldr	r1, [r1, #0]
 8004ce0:	2002      	movs	r0, #2
 8004ce2:	f7fe fdaf 	bl	8003844 <xdotc>
 8004ce6:	ec51 0b10 	vmov	r0, r1, d0
 8004cea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f7fb fda7 	bl	800084c <__aeabi_ddiv>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	460b      	mov	r3, r1
 8004d02:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8004d06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004d0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d0e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004d12:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8004d16:	2308      	movs	r3, #8
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8004d20:	2002      	movs	r0, #2
 8004d22:	f7fe fdd6 	bl	80038d2 <xaxpy>
    }

    V[3 * qp1] = 0.0;
 8004d26:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	461a      	mov	r2, r3
 8004d34:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	1899      	adds	r1, r3, r2
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qp1 + 1] = 0.0;
 8004d4c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	f103 0208 	add.w	r2, r3, #8
 8004d5c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	1899      	adds	r1, r3, r2
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	e9c1 2300 	strd	r2, r3, [r1]
    V[3 * qp1 + 2] = 0.0;
 8004d74:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004d78:	4613      	mov	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	f103 0210 	add.w	r2, r3, #16
 8004d84:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	1899      	adds	r1, r3, r2
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9c1 2300 	strd	r2, r3, [r1]
    V[qp1 + 3 * qp1] = 1.0;
 8004d9c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004da6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	1899      	adds	r1, r3, r2
 8004dae:	f04f 0200 	mov.w	r2, #0
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <svd+0xc9c>)
 8004db4:	e9c1 2300 	strd	r2, r3, [r1]
  for (qp1 = 2; qp1 >= 0; qp1--) {
 8004db8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004dc2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f6bf af3e 	bge.w	8004c48 <svd+0xb10>
  }

  for (qp1 = 0; qp1 < 3; qp1++) {
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8004dd2:	e138      	b.n	8005046 <svd+0xf0e>
 8004dd4:	3ff00000 	.word	0x3ff00000
    smm1 = e[qp1];
 8004dd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004de2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004de6:	4413      	add	r3, r2
 8004de8:	3bc0      	subs	r3, #192	; 0xc0
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
    if (b_s[qp1] != 0.0) {
 8004df2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004dfc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004e00:	4413      	add	r3, r2
 8004e02:	3ba8      	subs	r3, #168	; 0xa8
 8004e04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	f7fb fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d17d      	bne.n	8004f16 <svd+0xdde>
      rt = fabs(b_s[qp1]);
 8004e1a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004e24:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004e28:	4413      	add	r3, r2
 8004e2a:	3ba8      	subs	r3, #168	; 0xa8
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8004e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e3c:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8004e40:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
      nrm = b_s[qp1] / rt;
 8004e44:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004e4e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004e52:	4413      	add	r3, r2
 8004e54:	3ba8      	subs	r3, #168	; 0xa8
 8004e56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e5a:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004e5e:	f7fb fcf5 	bl	800084c <__aeabi_ddiv>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
      b_s[qp1] = rt;
 8004e6a:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004e6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004e78:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3ba8      	subs	r3, #168	; 0xa8
 8004e80:	e9c3 0100 	strd	r0, r1, [r3]
      if (qp1 + 1 < 3) {
 8004e84:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	dc09      	bgt.n	8004ea0 <svd+0xd68>
        smm1 /= nrm;
 8004e8c:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004e90:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004e94:	f7fb fcda 	bl	800084c <__aeabi_ddiv>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      }

      qq = 3 * qp1 + 1;
 8004ea0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	4413      	add	r3, r2
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 8004eb0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004eb4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004eb8:	e026      	b.n	8004f08 <svd+0xdd0>
        U[qjj - 1] *= nrm;
 8004eba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004ebe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	00da      	lsls	r2, r3, #3
 8004ec6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004eca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ed6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004eda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	00da      	lsls	r2, r3, #3
 8004ee2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004ee6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	189c      	adds	r4, r3, r2
 8004eee:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004ef2:	f7fb fb81 	bl	80005f8 <__aeabi_dmul>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	e9c4 2300 	strd	r2, r3, [r4]
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 8004efe:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004f02:	3301      	adds	r3, #1
 8004f04:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004f08:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004f0c:	1c9a      	adds	r2, r3, #2
 8004f0e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004f12:	4293      	cmp	r3, r2
 8004f14:	ddd1      	ble.n	8004eba <svd+0xd82>
      }
    }

    if ((qp1 + 1 < 3) && (smm1 != 0.0)) {
 8004f16:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	f300 8081 	bgt.w	8005022 <svd+0xeea>
 8004f20:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	f7fb fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d175      	bne.n	8005022 <svd+0xeea>
      rt = fabs(smm1);
 8004f36:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004f3a:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8004f3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f46:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8004f4a:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
      nrm = rt / smm1;
 8004f4e:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004f52:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8004f56:	f7fb fc79 	bl	800084c <__aeabi_ddiv>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
      smm1 = rt;
 8004f62:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8004f66:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
      b_s[qp1 + 1] *= nrm;
 8004f6a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004f6e:	3301      	adds	r3, #1
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004f76:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3ba8      	subs	r3, #168	; 0xa8
 8004f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004f82:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004f86:	1c5c      	adds	r4, r3, #1
 8004f88:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004f8c:	f7fb fb34 	bl	80005f8 <__aeabi_dmul>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	00e3      	lsls	r3, r4, #3
 8004f9a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004f9e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8004fa2:	4413      	add	r3, r2
 8004fa4:	3ba8      	subs	r3, #168	; 0xa8
 8004fa6:	e9c3 0100 	strd	r0, r1, [r3]
      qq = (qp1 + 1) * 3 + 1;
 8004faa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 8004fbc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8004fc0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004fc4:	e026      	b.n	8005014 <svd+0xedc>
        V[qjj - 1] *= nrm;
 8004fc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004fca:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	00da      	lsls	r2, r3, #3
 8004fd2:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004fd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004fe2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8004fe6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8004fea:	3b01      	subs	r3, #1
 8004fec:	00da      	lsls	r2, r3, #3
 8004fee:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8004ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	189c      	adds	r4, r3, r2
 8004ffa:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8004ffe:	f7fb fafb 	bl	80005f8 <__aeabi_dmul>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	e9c4 2300 	strd	r2, r3, [r4]
      for (qjj = qq; qjj <= qq + 2; qjj++) {
 800500a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800500e:	3301      	adds	r3, #1
 8005010:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005014:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005018:	1c9a      	adds	r2, r3, #2
 800501a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800501e:	4293      	cmp	r3, r2
 8005020:	ddd1      	ble.n	8004fc6 <svd+0xe8e>
      }
    }

    e[qp1] = smm1;
 8005022:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005026:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005030:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005034:	4413      	add	r3, r2
 8005036:	3bc0      	subs	r3, #192	; 0xc0
 8005038:	e9c3 0100 	strd	r0, r1, [r3]
  for (qp1 = 0; qp1 < 3; qp1++) {
 800503c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005040:	3301      	adds	r3, #1
 8005042:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005046:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800504a:	2b02      	cmp	r3, #2
 800504c:	f77f aec4 	ble.w	8004dd8 <svd+0xca0>
  }

  qp1 = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 8005056:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800505a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800505e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005066:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 800506a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800506e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005076:	ed97 1b2a 	vldr	d1, [r7, #168]	; 0xa8
 800507a:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800507e:	f00b fce7 	bl	8010a50 <fmax>
 8005082:	eeb0 7a40 	vmov.f32	s14, s0
 8005086:	eef0 7a60 	vmov.f32	s15, s1
 800508a:	eeb0 1a47 	vmov.f32	s2, s14
 800508e:	eef0 1a67 	vmov.f32	s3, s15
 8005092:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 8005300 <svd+0x11c8>
 8005096:	f00b fcdb 	bl	8010a50 <fmax>
 800509a:	eeb0 8a40 	vmov.f32	s16, s0
 800509e:	eef0 8a60 	vmov.f32	s17, s1
 80050a2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 80050a6:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 80050aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    fabs(e[1]))), fmax(fabs(b_s[2]), fabs(e[2])));
 80050b2:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 80050b6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80050ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050c2:	ed97 1b26 	vldr	d1, [r7, #152]	; 0x98
 80050c6:	ed97 0b28 	vldr	d0, [r7, #160]	; 0xa0
 80050ca:	f00b fcc1 	bl	8010a50 <fmax>
 80050ce:	eeb0 7a40 	vmov.f32	s14, s0
 80050d2:	eef0 7a60 	vmov.f32	s15, s1
 80050d6:	eeb0 1a47 	vmov.f32	s2, s14
 80050da:	eef0 1a67 	vmov.f32	s3, s15
 80050de:	eeb0 0a48 	vmov.f32	s0, s16
 80050e2:	eef0 0a68 	vmov.f32	s1, s17
 80050e6:	f00b fcb3 	bl	8010a50 <fmax>
 80050ea:	eeb0 8a40 	vmov.f32	s16, s0
 80050ee:	eef0 8a60 	vmov.f32	s17, s1
    fabs(e[1]))), fmax(fabs(b_s[2]), fabs(e[2])));
 80050f2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 80050f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80050fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    fabs(e[1]))), fmax(fabs(b_s[2]), fabs(e[2])));
 8005102:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
  nrm = fmax(fmax(fmax(0.0, fmax(fabs(b_s[0]), fabs(e[0]))), fmax(fabs(b_s[1]),
 8005106:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800510a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800510e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005112:	ed97 1b22 	vldr	d1, [r7, #136]	; 0x88
 8005116:	ed97 0b24 	vldr	d0, [r7, #144]	; 0x90
 800511a:	f00b fc99 	bl	8010a50 <fmax>
 800511e:	eeb0 7a40 	vmov.f32	s14, s0
 8005122:	eef0 7a60 	vmov.f32	s15, s1
 8005126:	eeb0 1a47 	vmov.f32	s2, s14
 800512a:	eef0 1a67 	vmov.f32	s3, s15
 800512e:	eeb0 0a48 	vmov.f32	s0, s16
 8005132:	eef0 0a68 	vmov.f32	s1, s17
 8005136:	f00b fc8b 	bl	8010a50 <fmax>
 800513a:	ed87 0b7a 	vstr	d0, [r7, #488]	; 0x1e8
  while ((m + 2 > 0) && (qp1 < 75)) {
 800513e:	f000 bf39 	b.w	8005fb4 <svd+0x1e7c>
    kase = m + 1;
 8005142:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005146:	3301      	adds	r3, #1
 8005148:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    int32_T exitg1;
    do {
      exitg1 = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
      qq = kase;
 8005152:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005156:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      if (kase == 0) {
 800515a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <svd+0x1032>
        exitg1 = 1;
 8005162:	2301      	movs	r3, #1
 8005164:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005168:	e09e      	b.n	80052a8 <svd+0x1170>
      } else {
        rt = fabs(e[kase - 1]);
 800516a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800516e:	3b01      	subs	r3, #1
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005176:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800517a:	4413      	add	r3, r2
 800517c:	3bc0      	subs	r3, #192	; 0xc0
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005186:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800518a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800518e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8005192:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
        if (rt <= (fabs(b_s[kase - 1]) + fabs(b_s[kase])) *
 8005196:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800519a:	3b01      	subs	r3, #1
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80051a2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80051a6:	4413      	add	r3, r2
 80051a8:	3ba8      	subs	r3, #168	; 0xa8
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	67ba      	str	r2, [r7, #120]	; 0x78
 80051b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051b6:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80051c0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80051c4:	4413      	add	r3, r2
 80051c6:	3ba8      	subs	r3, #168	; 0xa8
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	673a      	str	r2, [r7, #112]	; 0x70
 80051ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051d2:	677b      	str	r3, [r7, #116]	; 0x74
 80051d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80051d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80051dc:	f7fb f856 	bl	800028c <__adddf3>
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	4610      	mov	r0, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	4b46      	ldr	r3, [pc, #280]	; (8005308 <svd+0x11d0>)
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80051fe:	f7fb fc81 	bl	8000b04 <__aeabi_dcmpge>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d014      	beq.n	8005232 <svd+0x10fa>
            2.2204460492503131E-16) {
          e[kase - 1] = 0.0;
 8005208:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800520c:	3b01      	subs	r3, #1
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005214:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005218:	4413      	add	r3, r2
 800521a:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 800522a:	2301      	movs	r3, #1
 800522c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005230:	e03a      	b.n	80052a8 <svd+0x1170>
        } else if ((rt <= 1.0020841800044864E-292) || ((qp1 > 20) && (rt <=
 8005232:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 800523e:	f7fb fc57 	bl	8000af0 <__aeabi_dcmple>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d115      	bne.n	8005274 <svd+0x113c>
 8005248:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800524c:	2b14      	cmp	r3, #20
 800524e:	dd26      	ble.n	800529e <svd+0x1166>
                     2.2204460492503131E-16 * nrm))) {
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <svd+0x11d0>)
 8005256:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800525a:	f7fb f9cd 	bl	80005f8 <__aeabi_dmul>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
        } else if ((rt <= 1.0020841800044864E-292) || ((qp1 > 20) && (rt <=
 8005266:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 800526a:	f7fb fc4b 	bl	8000b04 <__aeabi_dcmpge>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d014      	beq.n	800529e <svd+0x1166>
          e[kase - 1] = 0.0;
 8005274:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005278:	3b01      	subs	r3, #1
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005280:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005284:	4413      	add	r3, r2
 8005286:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9c1 2300 	strd	r2, r3, [r1]
          exitg1 = 1;
 8005296:	2301      	movs	r3, #1
 8005298:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800529c:	e004      	b.n	80052a8 <svd+0x1170>
        } else {
          kase--;
 800529e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80052a2:	3b01      	subs	r3, #1
 80052a4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        }
      }
    } while (exitg1 == 0);
 80052a8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f43f af4d 	beq.w	800514c <svd+0x1014>

    if (m + 1 == kase) {
 80052b2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80052bc:	4293      	cmp	r3, r2
 80052be:	d103      	bne.n	80052c8 <svd+0x1190>
      kase = 4;
 80052c0:	2304      	movs	r3, #4
 80052c2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80052c6:	e0d5      	b.n	8005474 <svd+0x133c>
    } else {
      int32_T k_ii;
      boolean_T exitg2;
      qjj = m + 2;
 80052c8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80052cc:	3302      	adds	r3, #2
 80052ce:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
      k_ii = m + 2;
 80052d2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80052d6:	3302      	adds	r3, #2
 80052d8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      exitg2 = false;
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
      while ((!exitg2) && (k_ii >= kase)) {
 80052e2:	e0a0      	b.n	8005426 <svd+0x12ee>
        qjj = k_ii;
 80052e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80052e8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
        if (k_ii == kase) {
 80052ec:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80052f0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d109      	bne.n	800530c <svd+0x11d4>
          exitg2 = true;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 80052fe:	e092      	b.n	8005426 <svd+0x12ee>
	...
 8005308:	3cb00000 	.word	0x3cb00000
        } else {
          rt = 0.0;
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          if (k_ii < m + 2) {
 8005318:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005322:	4293      	cmp	r3, r2
 8005324:	dc13      	bgt.n	800534e <svd+0x1216>
            rt = fabs(e[k_ii - 1]);
 8005326:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800532a:	3b01      	subs	r3, #1
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005332:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005336:	4413      	add	r3, r2
 8005338:	3bc0      	subs	r3, #192	; 0xc0
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	66ba      	str	r2, [r7, #104]	; 0x68
 8005340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005346:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800534a:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
          }

          if (k_ii > kase + 1) {
 800534e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005358:	4293      	cmp	r3, r2
 800535a:	dd19      	ble.n	8005390 <svd+0x1258>
            rt += fabs(e[k_ii - 2]);
 800535c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005360:	3b02      	subs	r3, #2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005368:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800536c:	4413      	add	r3, r2
 800536e:	3bc0      	subs	r3, #192	; 0xc0
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	663a      	str	r2, [r7, #96]	; 0x60
 8005376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800537a:	667b      	str	r3, [r7, #100]	; 0x64
 800537c:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005380:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005384:	f7fa ff82 	bl	800028c <__adddf3>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          }

          ztest = fabs(b_s[k_ii - 1]);
 8005390:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005394:	3b01      	subs	r3, #1
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800539c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80053a0:	4413      	add	r3, r2
 80053a2:	3ba8      	subs	r3, #168	; 0xa8
 80053a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80053aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80053b4:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
          if ((ztest <= 2.2204460492503131E-16 * rt) || (ztest <=
 80053b8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	4bc7      	ldr	r3, [pc, #796]	; (80056e0 <svd+0x15a8>)
 80053c2:	f7fb f919 	bl	80005f8 <__aeabi_dmul>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80053d2:	f7fb fb97 	bl	8000b04 <__aeabi_dcmpge>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <svd+0x12ba>
 80053dc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 80053e8:	f7fb fb82 	bl	8000af0 <__aeabi_dcmple>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d014      	beq.n	800541c <svd+0x12e4>
               1.0020841800044864E-292)) {
            b_s[k_ii - 1] = 0.0;
 80053f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053f6:	3b01      	subs	r3, #1
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80053fe:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005402:	4413      	add	r3, r2
 8005404:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9c1 2300 	strd	r2, r3, [r1]
            exitg2 = true;
 8005414:	2301      	movs	r3, #1
 8005416:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
 800541a:	e004      	b.n	8005426 <svd+0x12ee>
          } else {
            k_ii--;
 800541c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005420:	3b01      	subs	r3, #1
 8005422:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
      while ((!exitg2) && (k_ii >= kase)) {
 8005426:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <svd+0x1304>
 800542e:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8005432:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005436:	429a      	cmp	r2, r3
 8005438:	f6bf af54 	bge.w	80052e4 <svd+0x11ac>
          }
        }
      }

      if (qjj == kase) {
 800543c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005440:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005444:	429a      	cmp	r2, r3
 8005446:	d103      	bne.n	8005450 <svd+0x1318>
        kase = 3;
 8005448:	2303      	movs	r3, #3
 800544a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800544e:	e011      	b.n	8005474 <svd+0x133c>
      } else if (m + 2 == qjj) {
 8005450:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800545a:	4293      	cmp	r3, r2
 800545c:	d103      	bne.n	8005466 <svd+0x132e>
        kase = 1;
 800545e:	2301      	movs	r3, #1
 8005460:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8005464:	e006      	b.n	8005474 <svd+0x133c>
      } else {
        kase = 2;
 8005466:	2302      	movs	r3, #2
 8005468:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
        qq = qjj;
 800546c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005470:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
      }
    }

    switch (kase) {
 8005474:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005478:	2b03      	cmp	r3, #3
 800547a:	f000 8133 	beq.w	80056e4 <svd+0x15ac>
 800547e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005482:	2b03      	cmp	r3, #3
 8005484:	f300 849b 	bgt.w	8005dbe <svd+0x1c86>
 8005488:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d006      	beq.n	800549e <svd+0x1366>
 8005490:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8005494:	2b02      	cmp	r3, #2
 8005496:	f000 808b 	beq.w	80055b0 <svd+0x1478>
 800549a:	f000 bc90 	b.w	8005dbe <svd+0x1c86>
     case 1:
      rt = e[m];
 800549e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80054a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80054ac:	4413      	add	r3, r2
 80054ae:	3bc0      	subs	r3, #192	; 0xc0
 80054b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
      e[m] = 0.0;
 80054b8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80054bc:	00db      	lsls	r3, r3, #3
 80054be:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80054c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80054c6:	4413      	add	r3, r2
 80054c8:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	e9c1 2300 	strd	r2, r3, [r1]
      for (qjj = m + 1; qjj >= qq + 1; qjj--) {
 80054d8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80054dc:	3301      	adds	r3, #1
 80054de:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80054e2:	e05d      	b.n	80055a0 <svd+0x1468>
        smm1 = e[0];
 80054e4:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 80054e8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        xrotg(&b_s[qjj - 1], &rt, &ztest, &sqds);
 80054ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80054f0:	3b01      	subs	r3, #1
 80054f2:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	18d0      	adds	r0, r2, r3
 80054fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fe:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005502:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005506:	f7fe fbf9 	bl	8003cfc <xrotg>
        if (qjj > qq + 1) {
 800550a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005514:	4293      	cmp	r3, r2
 8005516:	dd19      	ble.n	800554c <svd+0x1414>
          rt = -sqds * e[0];
 8005518:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800551c:	653a      	str	r2, [r7, #80]	; 0x50
 800551e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005522:	657b      	str	r3, [r7, #84]	; 0x54
 8005524:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8005528:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800552c:	f7fb f864 	bl	80005f8 <__aeabi_dmul>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          smm1 = e[0] * ztest;
 8005538:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800553c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005540:	f7fb f85a 	bl	80005f8 <__aeabi_dmul>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        }

        xrot(V, 3 * (qjj - 1) + 1, 3 * (m + 1) + 1, ztest, sqds);
 800554c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005550:	1e5a      	subs	r2, r3, #1
 8005552:	4613      	mov	r3, r2
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	4413      	add	r3, r2
 8005558:	1c59      	adds	r1, r3, #1
 800555a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	4613      	mov	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	4413      	add	r3, r2
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 800556c:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8005570:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005578:	eeb0 1a46 	vmov.f32	s2, s12
 800557c:	eef0 1a66 	vmov.f32	s3, s13
 8005580:	eeb0 0a47 	vmov.f32	s0, s14
 8005584:	eef0 0a67 	vmov.f32	s1, s15
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f7fe fcb7 	bl	8003efc <xrot>
        e[0] = smm1;
 800558e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005592:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
      for (qjj = m + 1; qjj >= qq + 1; qjj--) {
 8005596:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800559a:	3b01      	subs	r3, #1
 800559c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80055a0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80055a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80055a8:	429a      	cmp	r2, r3
 80055aa:	db9b      	blt.n	80054e4 <svd+0x13ac>
      }
      break;
 80055ac:	f000 bd02 	b.w	8005fb4 <svd+0x1e7c>

     case 2:
      {
        rt = e[qq - 1];
 80055b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055b4:	3b01      	subs	r3, #1
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80055bc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80055c0:	4413      	add	r3, r2
 80055c2:	3bc0      	subs	r3, #192	; 0xc0
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        e[qq - 1] = 0.0;
 80055cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055d0:	3b01      	subs	r3, #1
 80055d2:	00db      	lsls	r3, r3, #3
 80055d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80055d8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80055dc:	4413      	add	r3, r2
 80055de:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	e9c1 2300 	strd	r2, r3, [r1]
        for (qjj = qq + 1; qjj <= m + 2; qjj++) {
 80055ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80055f2:	3301      	adds	r3, #1
 80055f4:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80055f8:	e068      	b.n	80056cc <svd+0x1594>
          real_T emm1;
          xrotg(&b_s[qjj - 1], &rt, &ztest, &sqds);
 80055fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80055fe:	3b01      	subs	r3, #1
 8005600:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	18d0      	adds	r0, r2, r3
 8005608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8005610:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8005614:	f7fe fb72 	bl	8003cfc <xrotg>
          emm1 = e[qjj - 1];
 8005618:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800561c:	3b01      	subs	r3, #1
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005624:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005628:	4413      	add	r3, r2
 800562a:	3bc0      	subs	r3, #192	; 0xc0
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	e9c7 2376 	strd	r2, r3, [r7, #472]	; 0x1d8
          rt = emm1 * -sqds;
 8005634:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005638:	64ba      	str	r2, [r7, #72]	; 0x48
 800563a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005640:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8005644:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005648:	f7fa ffd6 	bl	80005f8 <__aeabi_dmul>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          e[qjj - 1] = emm1 * ztest;
 8005654:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8005658:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800565c:	1e5c      	subs	r4, r3, #1
 800565e:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 8005662:	f7fa ffc9 	bl	80005f8 <__aeabi_dmul>
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	00e3      	lsls	r3, r4, #3
 8005670:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005674:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005678:	4413      	add	r3, r2
 800567a:	3bc0      	subs	r3, #192	; 0xc0
 800567c:	e9c3 0100 	strd	r0, r1, [r3]
          xrot(U, 3 * (qjj - 1) + 1, 3 * (qq - 1) + 1, ztest, sqds);
 8005680:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005684:	1e5a      	subs	r2, r3, #1
 8005686:	4613      	mov	r3, r2
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4413      	add	r3, r2
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005692:	1e5a      	subs	r2, r3, #1
 8005694:	4613      	mov	r3, r2
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	4413      	add	r3, r2
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80056a0:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80056a4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80056a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056ac:	eeb0 1a46 	vmov.f32	s2, s12
 80056b0:	eef0 1a66 	vmov.f32	s3, s13
 80056b4:	eeb0 0a47 	vmov.f32	s0, s14
 80056b8:	eef0 0a67 	vmov.f32	s1, s15
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	f7fe fc1d 	bl	8003efc <xrot>
        for (qjj = qq + 1; qjj <= m + 2; qjj++) {
 80056c2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80056c6:	3301      	adds	r3, #1
 80056c8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 80056cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80056d0:	1c9a      	adds	r2, r3, #2
 80056d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80056d6:	4293      	cmp	r3, r2
 80056d8:	dd8f      	ble.n	80055fa <svd+0x14c2>
        }
      }
      break;
 80056da:	f000 bc6b 	b.w	8005fb4 <svd+0x1e7c>
 80056de:	bf00      	nop
 80056e0:	3cb00000 	.word	0x3cb00000

     case 3:
      {
        real_T emm1;
        real_T shift;
        sqds = b_s[m + 1];
 80056e4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80056e8:	3301      	adds	r3, #1
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80056f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80056f4:	4413      	add	r3, r2
 80056f6:	3ba8      	subs	r3, #168	; 0xa8
 80056f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fc:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 8005700:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005704:	643a      	str	r2, [r7, #64]	; 0x40
 8005706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800570a:	647b      	str	r3, [r7, #68]	; 0x44
 800570c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005716:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800571a:	4413      	add	r3, r2
 800571c:	3ba8      	subs	r3, #168	; 0xa8
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	63ba      	str	r2, [r7, #56]	; 0x38
 8005724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572a:	ed97 1b0e 	vldr	d1, [r7, #56]	; 0x38
 800572e:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8005732:	f00b f98d 	bl	8010a50 <fmax>
 8005736:	eeb0 7a40 	vmov.f32	s14, s0
 800573a:	eef0 7a60 	vmov.f32	s15, s1
 800573e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005748:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800574c:	4413      	add	r3, r2
 800574e:	3bc0      	subs	r3, #192	; 0xc0
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	633a      	str	r2, [r7, #48]	; 0x30
 8005756:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800575a:	637b      	str	r3, [r7, #52]	; 0x34
 800575c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8005760:	eeb0 0a47 	vmov.f32	s0, s14
 8005764:	eef0 0a67 	vmov.f32	s1, s15
 8005768:	f00b f972 	bl	8010a50 <fmax>
 800576c:	eeb0 7a40 	vmov.f32	s14, s0
 8005770:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[qq])), fabs(e[qq]));
 8005774:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800577e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005782:	4413      	add	r3, r2
 8005784:	3ba8      	subs	r3, #168	; 0xa8
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 800578a:	62ba      	str	r2, [r7, #40]	; 0x28
 800578c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005792:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8005796:	eeb0 0a47 	vmov.f32	s0, s14
 800579a:	eef0 0a67 	vmov.f32	s1, s15
 800579e:	f00b f957 	bl	8010a50 <fmax>
 80057a2:	eeb0 7a40 	vmov.f32	s14, s0
 80057a6:	eef0 7a60 	vmov.f32	s15, s1
                          (b_s[qq])), fabs(e[qq]));
 80057aa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80057b4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80057b8:	4413      	add	r3, r2
 80057ba:	3bc0      	subs	r3, #192	; 0xc0
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
        ztest = fmax(fmax(fmax(fmax(fabs(sqds), fabs(b_s[m])), fabs(e[m])), fabs
 80057c0:	623a      	str	r2, [r7, #32]
 80057c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	ed97 1b08 	vldr	d1, [r7, #32]
 80057cc:	eeb0 0a47 	vmov.f32	s0, s14
 80057d0:	eef0 0a67 	vmov.f32	s1, s15
 80057d4:	f00b f93c 	bl	8010a50 <fmax>
 80057d8:	eeb0 7a40 	vmov.f32	s14, s0
 80057dc:	eef0 7a60 	vmov.f32	s15, s1
 80057e0:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
        rt = sqds / ztest;
 80057e4:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80057e8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80057ec:	f7fb f82e 	bl	800084c <__aeabi_ddiv>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        smm1 = b_s[m] / ztest;
 80057f8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005802:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005806:	4413      	add	r3, r2
 8005808:	3ba8      	subs	r3, #168	; 0xa8
 800580a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800580e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005812:	f7fb f81b 	bl	800084c <__aeabi_ddiv>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        emm1 = e[m] / ztest;
 800581e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005828:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800582c:	4413      	add	r3, r2
 800582e:	3bc0      	subs	r3, #192	; 0xc0
 8005830:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005834:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005838:	f7fb f808 	bl	800084c <__aeabi_ddiv>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
        sqds = b_s[qq] / ztest;
 8005844:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800584e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005852:	4413      	add	r3, r2
 8005854:	3ba8      	subs	r3, #168	; 0xa8
 8005856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800585a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800585e:	f7fa fff5 	bl	800084c <__aeabi_ddiv>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
        smm1 = ((smm1 + rt) * (smm1 - rt) + emm1 * emm1) / 2.0;
 800586a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800586e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005872:	f7fa fd0b 	bl	800028c <__adddf3>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4614      	mov	r4, r2
 800587c:	461d      	mov	r5, r3
 800587e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005882:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005886:	f7fa fcff 	bl	8000288 <__aeabi_dsub>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4620      	mov	r0, r4
 8005890:	4629      	mov	r1, r5
 8005892:	f7fa feb1 	bl	80005f8 <__aeabi_dmul>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4614      	mov	r4, r2
 800589c:	461d      	mov	r5, r3
 800589e:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80058a2:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 80058a6:	f7fa fea7 	bl	80005f8 <__aeabi_dmul>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fa fceb 	bl	800028c <__adddf3>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058c6:	f7fa ffc1 	bl	800084c <__aeabi_ddiv>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
        emm1 *= rt;
 80058d2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80058d6:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 80058da:	f7fa fe8d 	bl	80005f8 <__aeabi_dmul>
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
        emm1 *= emm1;
 80058e6:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 80058ea:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 80058ee:	f7fa fe83 	bl	80005f8 <__aeabi_dmul>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
        if ((smm1 != 0.0) || (emm1 != 0.0)) {
 80058fa:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	f7fb f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <svd+0x17ee>
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800591c:	f7fb f8d4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d141      	bne.n	80059aa <svd+0x1872>
          shift = sqrt(smm1 * smm1 + emm1);
 8005926:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800592a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800592e:	f7fa fe63 	bl	80005f8 <__aeabi_dmul>
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800593e:	f7fa fca5 	bl	800028c <__adddf3>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	ec43 2b17 	vmov	d7, r2, r3
 800594a:	eeb0 0a47 	vmov.f32	s0, s14
 800594e:	eef0 0a67 	vmov.f32	s1, s15
 8005952:	f00b f919 	bl	8010b88 <sqrt>
 8005956:	ed87 0b7c 	vstr	d0, [r7, #496]	; 0x1f0
          if (smm1 < 0.0) {
 800595a:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	f7fb f8b9 	bl	8000adc <__aeabi_dcmplt>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <svd+0x1850>
            shift = -shift;
 8005970:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005974:	603b      	str	r3, [r7, #0]
 8005976:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800597a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800597e:	607b      	str	r3, [r7, #4]
 8005980:	ed97 7b00 	vldr	d7, [r7]
 8005984:	ed87 7b7c 	vstr	d7, [r7, #496]	; 0x1f0
          }

          shift = emm1 / (smm1 + shift);
 8005988:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800598c:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 8005990:	f7fa fc7c 	bl	800028c <__adddf3>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800599c:	f7fa ff56 	bl	800084c <__aeabi_ddiv>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
 80059a8:	e005      	b.n	80059b6 <svd+0x187e>
        } else {
          shift = 0.0;
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9c7 237c 	strd	r2, r3, [r7, #496]	; 0x1f0
        }

        rt = (sqds + rt) * (sqds - rt) + shift;
 80059b6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80059ba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80059be:	f7fa fc65 	bl	800028c <__adddf3>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4614      	mov	r4, r2
 80059c8:	461d      	mov	r5, r3
 80059ca:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80059ce:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80059d2:	f7fa fc59 	bl	8000288 <__aeabi_dsub>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fa fe0b 	bl	80005f8 <__aeabi_dmul>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80059ee:	f7fa fc4d 	bl	800028c <__adddf3>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        ztest = e[qq] / ztest * sqds;
 80059fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005a04:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005a08:	4413      	add	r3, r2
 8005a0a:	3bc0      	subs	r3, #192	; 0xc0
 8005a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a10:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8005a14:	f7fa ff1a 	bl	800084c <__aeabi_ddiv>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005a24:	f7fa fde8 	bl	80005f8 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
        for (qjj = qq + 1; qjj <= m + 1; qjj++) {
 8005a30:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005a34:	3301      	adds	r3, #1
 8005a36:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005a3a:	e1a5      	b.n	8005d88 <svd+0x1c50>
          xrotg(&rt, &ztest, &sqds, &smm1);
 8005a3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005a40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a44:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8005a48:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8005a4c:	f7fe f956 	bl	8003cfc <xrotg>
          if (qjj > qq + 1) {
 8005a50:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	dd03      	ble.n	8005a66 <svd+0x192e>
            e[0] = rt;
 8005a5e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8005a62:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
          }

          emm1 = e[qjj - 1];
 8005a66:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005a72:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005a76:	4413      	add	r3, r2
 8005a78:	3bc0      	subs	r3, #192	; 0xc0
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	e9c7 2378 	strd	r2, r3, [r7, #480]	; 0x1e0
          rt = b_s[qjj - 1];
 8005a82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005a86:	3b01      	subs	r3, #1
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005a8e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005a92:	4413      	add	r3, r2
 8005a94:	3ba8      	subs	r3, #168	; 0xa8
 8005a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9a:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          e[qjj - 1] = emm1 * sqds - rt * smm1;
 8005a9e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 8005aa2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8005aa6:	f7fa fda7 	bl	80005f8 <__aeabi_dmul>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4690      	mov	r8, r2
 8005ab0:	4699      	mov	r9, r3
 8005ab2:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005ab6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005aba:	f7fa fd9d 	bl	80005f8 <__aeabi_dmul>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005aca:	1e5c      	subs	r4, r3, #1
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	f7fa fbd8 	bl	8000288 <__aeabi_dsub>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	00e3      	lsls	r3, r4, #3
 8005ae2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ae6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005aea:	4413      	add	r3, r2
 8005aec:	3bc0      	subs	r3, #192	; 0xc0
 8005aee:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * b_s[qjj];
 8005af2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005afc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005b00:	4413      	add	r3, r2
 8005b02:	3ba8      	subs	r3, #168	; 0xa8
 8005b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b08:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005b0c:	f7fa fd74 	bl	80005f8 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          b_s[qjj] *= sqds;
 8005b18:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b22:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005b26:	4413      	add	r3, r2
 8005b28:	3ba8      	subs	r3, #168	; 0xa8
 8005b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b2e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005b32:	f7fa fd61 	bl	80005f8 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005b48:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3ba8      	subs	r3, #168	; 0xa8
 8005b50:	e9c3 0100 	strd	r0, r1, [r3]
          xrot(V, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8005b54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005b58:	1e5a      	subs	r2, r3, #1
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	4413      	add	r3, r2
 8005b60:	1c59      	adds	r1, r3, #1
 8005b62:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005b66:	4613      	mov	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8005b72:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 8005b76:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b7e:	eeb0 1a46 	vmov.f32	s2, s12
 8005b82:	eef0 1a66 	vmov.f32	s3, s13
 8005b86:	eeb0 0a47 	vmov.f32	s0, s14
 8005b8a:	eef0 0a67 	vmov.f32	s1, s15
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f7fe f9b4 	bl	8003efc <xrot>
          b_s[qjj - 1] = rt * sqds + emm1 * smm1;
 8005b94:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005b98:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005b9c:	f7fa fd2c 	bl	80005f8 <__aeabi_dmul>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4690      	mov	r8, r2
 8005ba6:	4699      	mov	r9, r3
 8005ba8:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 8005bac:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8005bb0:	f7fa fd22 	bl	80005f8 <__aeabi_dmul>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005bc0:	1e5c      	subs	r4, r3, #1
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4640      	mov	r0, r8
 8005bc8:	4649      	mov	r1, r9
 8005bca:	f7fa fb5f 	bl	800028c <__adddf3>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	00e3      	lsls	r3, r4, #3
 8005bd8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005bdc:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005be0:	4413      	add	r3, r2
 8005be2:	3ba8      	subs	r3, #168	; 0xa8
 8005be4:	e9c3 0100 	strd	r0, r1, [r3]
          xrotg(&b_s[qjj - 1], &ztest, &sqds, &smm1);
 8005be8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005bec:	3b01      	subs	r3, #1
 8005bee:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	18d0      	adds	r0, r2, r3
 8005bf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005bfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bfe:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8005c02:	f7fe f87b 	bl	8003cfc <xrotg>
          rt = e[qjj - 1] * sqds + smm1 * b_s[qjj];
 8005c06:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005c12:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005c16:	4413      	add	r3, r2
 8005c18:	3bc0      	subs	r3, #192	; 0xc0
 8005c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c1e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005c22:	f7fa fce9 	bl	80005f8 <__aeabi_dmul>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4614      	mov	r4, r2
 8005c2c:	461d      	mov	r5, r3
 8005c2e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005c32:	00db      	lsls	r3, r3, #3
 8005c34:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005c38:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3ba8      	subs	r3, #168	; 0xa8
 8005c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c44:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c48:	f7fa fcd6 	bl	80005f8 <__aeabi_dmul>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4620      	mov	r0, r4
 8005c52:	4629      	mov	r1, r5
 8005c54:	f7fa fb1a 	bl	800028c <__adddf3>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
          b_s[qjj] = e[qjj - 1] * -smm1 + sqds * b_s[qjj];
 8005c60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005c64:	3b01      	subs	r3, #1
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005c6c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005c70:	4413      	add	r3, r2
 8005c72:	3bc0      	subs	r3, #192	; 0xc0
 8005c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c78:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005c7c:	61ba      	str	r2, [r7, #24]
 8005c7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c88:	f7fa fcb6 	bl	80005f8 <__aeabi_dmul>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4614      	mov	r4, r2
 8005c92:	461d      	mov	r5, r3
 8005c94:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005c9e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3ba8      	subs	r3, #168	; 0xa8
 8005ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005caa:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005cae:	f7fa fca3 	bl	80005f8 <__aeabi_dmul>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa fae7 	bl	800028c <__adddf3>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005cd0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3ba8      	subs	r3, #168	; 0xa8
 8005cd8:	e9c3 0100 	strd	r0, r1, [r3]
          ztest = smm1 * e[qjj];
 8005cdc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ce6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005cea:	4413      	add	r3, r2
 8005cec:	3bc0      	subs	r3, #192	; 0xc0
 8005cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cf2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8005cf6:	f7fa fc7f 	bl	80005f8 <__aeabi_dmul>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
          e[qjj] *= sqds;
 8005d02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005d0c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005d10:	4413      	add	r3, r2
 8005d12:	3bc0      	subs	r3, #192	; 0xc0
 8005d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d18:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8005d1c:	f7fa fc6c 	bl	80005f8 <__aeabi_dmul>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005d32:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005d36:	4413      	add	r3, r2
 8005d38:	3bc0      	subs	r3, #192	; 0xc0
 8005d3a:	e9c3 0100 	strd	r0, r1, [r3]
          xrot(U, 3 * (qjj - 1) + 1, 3 * qjj + 1, sqds, smm1);
 8005d3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8005d50:	4613      	mov	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4413      	add	r3, r2
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8005d5c:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 8005d60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005d64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d68:	eeb0 1a46 	vmov.f32	s2, s12
 8005d6c:	eef0 1a66 	vmov.f32	s3, s13
 8005d70:	eeb0 0a47 	vmov.f32	s0, s14
 8005d74:	eef0 0a67 	vmov.f32	s1, s15
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	f7fe f8bf 	bl	8003efc <xrot>
        for (qjj = qq + 1; qjj <= m + 1; qjj++) {
 8005d7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005d82:	3301      	adds	r3, #1
 8005d84:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005d88:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005d92:	4293      	cmp	r3, r2
 8005d94:	f77f ae52 	ble.w	8005a3c <svd+0x1904>
        }

        e[m] = rt;
 8005d98:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005d9c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005da6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005daa:	4413      	add	r3, r2
 8005dac:	3bc0      	subs	r3, #192	; 0xc0
 8005dae:	e9c3 0100 	strd	r0, r1, [r3]
        qp1++;
 8005db2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005db6:	3301      	adds	r3, #1
 8005db8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      }
      break;
 8005dbc:	e0fa      	b.n	8005fb4 <svd+0x1e7c>

     default:
      if (b_s[qq] < 0.0) {
 8005dbe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005dc8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005dcc:	4413      	add	r3, r2
 8005dce:	3ba8      	subs	r3, #168	; 0xa8
 8005dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	f7fa fe7e 	bl	8000adc <__aeabi_dcmplt>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d056      	beq.n	8005e94 <svd+0x1d5c>
        b_s[qq] = -b_s[qq];
 8005de6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005df0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005df4:	4413      	add	r3, r2
 8005df6:	3ba8      	subs	r3, #168	; 0xa8
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	613a      	str	r2, [r7, #16]
 8005dfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005e0e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005e12:	4413      	add	r3, r2
 8005e14:	3ba8      	subs	r3, #168	; 0xa8
 8005e16:	ed97 7b04 	vldr	d7, [r7, #16]
 8005e1a:	ed83 7b00 	vstr	d7, [r3]
        qp1 = 3 * qq + 1;
 8005e1e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8005e22:	4613      	mov	r3, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	4413      	add	r3, r2
 8005e28:	3301      	adds	r3, #1
 8005e2a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
        for (qjj = qp1; qjj <= qp1 + 2; qjj++) {
 8005e2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005e32:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005e36:	e026      	b.n	8005e86 <svd+0x1d4e>
          V[qjj - 1] = -V[qjj - 1];
 8005e38:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005e3c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e40:	3b01      	subs	r3, #1
 8005e42:	00da      	lsls	r2, r3, #3
 8005e44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4413      	add	r3, r2
 8005e50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005e58:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	00da      	lsls	r2, r3, #3
 8005e60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	60b8      	str	r0, [r7, #8]
 8005e6e:	f081 4200 	eor.w	r2, r1, #2147483648	; 0x80000000
 8005e72:	60fa      	str	r2, [r7, #12]
 8005e74:	ed97 7b02 	vldr	d7, [r7, #8]
 8005e78:	ed83 7b00 	vstr	d7, [r3]
        for (qjj = qp1; qjj <= qp1 + 2; qjj++) {
 8005e7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005e80:	3301      	adds	r3, #1
 8005e82:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8005e86:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005e8a:	1c9a      	adds	r2, r3, #2
 8005e8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8005e90:	4293      	cmp	r3, r2
 8005e92:	ddd1      	ble.n	8005e38 <svd+0x1d00>
        }
      }

      qp1 = qq + 1;
 8005e94:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005e98:	3301      	adds	r3, #1
 8005e9a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      while ((qq + 1 < 3) && (b_s[qq] < b_s[qp1])) {
 8005e9e:	e060      	b.n	8005f62 <svd+0x1e2a>
        rt = b_s[qq];
 8005ea0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005ea4:	00db      	lsls	r3, r3, #3
 8005ea6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005eaa:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005eae:	4413      	add	r3, r2
 8005eb0:	3ba8      	subs	r3, #168	; 0xa8
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
        b_s[qq] = b_s[qp1];
 8005eba:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ec4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005ec8:	4413      	add	r3, r2
 8005eca:	3ba8      	subs	r3, #168	; 0xa8
 8005ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ed0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005eda:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005ede:	4413      	add	r3, r2
 8005ee0:	3ba8      	subs	r3, #168	; 0xa8
 8005ee2:	e9c3 0100 	strd	r0, r1, [r3]
        b_s[qp1] = rt;
 8005ee6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005eea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ef4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005ef8:	4413      	add	r3, r2
 8005efa:	3ba8      	subs	r3, #168	; 0xa8
 8005efc:	e9c3 0100 	strd	r0, r1, [r3]
        xswap(V, 3 * qq + 1, 3 * (qq + 1) + 1);
 8005f00:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8005f04:	4613      	mov	r3, r2
 8005f06:	005b      	lsls	r3, r3, #1
 8005f08:	4413      	add	r3, r2
 8005f0a:	1c59      	adds	r1, r3, #1
 8005f0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	4613      	mov	r3, r2
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	4413      	add	r3, r2
 8005f18:	1c5a      	adds	r2, r3, #1
 8005f1a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	f7fd fe7a 	bl	8003c1c <xswap>
        xswap(U, 3 * qq + 1, 3 * (qq + 1) + 1);
 8005f28:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	1c59      	adds	r1, r3, #1
 8005f34:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	4413      	add	r3, r2
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005f46:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	f7fd fe66 	bl	8003c1c <xswap>
        qq = qp1;
 8005f50:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005f54:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
        qp1++;
 8005f58:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      while ((qq + 1 < 3) && (b_s[qq] < b_s[qp1])) {
 8005f62:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	dc1b      	bgt.n	8005fa2 <svd+0x1e6a>
 8005f6a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005f74:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005f78:	4413      	add	r3, r2
 8005f7a:	3ba8      	subs	r3, #168	; 0xa8
 8005f7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f80:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005f8a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8005f8e:	4413      	add	r3, r2
 8005f90:	3ba8      	subs	r3, #168	; 0xa8
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa fda1 	bl	8000adc <__aeabi_dcmplt>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f47f af7f 	bne.w	8005ea0 <svd+0x1d68>
      }

      qp1 = 0;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
      m--;
 8005fa8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005fac:	3b01      	subs	r3, #1
 8005fae:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
      break;
 8005fb2:	bf00      	nop
  while ((m + 2 > 0) && (qp1 < 75)) {
 8005fb4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8005fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbc:	db04      	blt.n	8005fc8 <svd+0x1e90>
 8005fbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8005fc2:	2b4a      	cmp	r3, #74	; 0x4a
 8005fc4:	f77f a8bd 	ble.w	8005142 <svd+0x100a>
    }
  }

  s[0] = b_s[0];
 8005fc8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8005fcc:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8005fd0:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8005fd4:	6809      	ldr	r1, [r1, #0]
 8005fd6:	e9c1 2300 	strd	r2, r3, [r1]
  s[1] = b_s[1];
 8005fda:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f103 0108 	add.w	r1, r3, #8
 8005fe8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8005fec:	e9c1 2300 	strd	r2, r3, [r1]
  s[2] = b_s[2];
 8005ff0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8005ff4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f103 0110 	add.w	r1, r3, #16
 8005ffe:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8006002:	e9c1 2300 	strd	r2, r3, [r1]
}
 8006006:	bf00      	nop
 8006008:	f507 7709 	add.w	r7, r7, #548	; 0x224
 800600c:	46bd      	mov	sp, r7
 800600e:	ecbd 8b02 	vpop	{d8}
 8006012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006016:	bf00      	nop

08006018 <xgemv_gp>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xgemv_gp(int32_T m, int32_T n, const real_T A[9], int32_T ia0, const
                     real_T x[9], int32_T ix0, real_T y[3])
{
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b08b      	sub	sp, #44	; 0x2c
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  int32_T b_iy;
  int32_T iyend;
  if ((m != 0) && (n != 0)) {
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d06e      	beq.n	800610a <xgemv_gp+0xf2>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d06b      	beq.n	800610a <xgemv_gp+0xf2>
    int32_T b;
    if (n - 1 >= 0) {
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd06      	ble.n	8006046 <xgemv_gp+0x2e>
      memset(&y[0], 0, (uint32_T)n * sizeof(real_T));
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	461a      	mov	r2, r3
 800603e:	2100      	movs	r1, #0
 8006040:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006042:	f006 fac3 	bl	800c5cc <memset>
    }

    b = (n - 1) * 3 + ia0;
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	1e5a      	subs	r2, r3, #1
 800604a:	4613      	mov	r3, r2
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	4413      	add	r3, r2
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	4413      	add	r3, r2
 8006054:	617b      	str	r3, [r7, #20]
    for (b_iy = ia0; b_iy <= b; b_iy += 3) {
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
 800605a:	e052      	b.n	8006102 <xgemv_gp+0xea>
      real_T c;
      int32_T d;
      c = 0.0;
 800605c:	f04f 0200 	mov.w	r2, #0
 8006060:	f04f 0300 	mov.w	r3, #0
 8006064:	e9c7 2306 	strd	r2, r3, [r7, #24]
      d = b_iy + m;
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
      for (iyend = b_iy; iyend < d; iyend++) {
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	623b      	str	r3, [r7, #32]
 8006074:	e024      	b.n	80060c0 <xgemv_gp+0xa8>
        c += x[((ix0 + iyend) - b_iy) - 1] * A[iyend - 1];
 8006076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	441a      	add	r2, r3
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006084:	3b01      	subs	r3, #1
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800608a:	4413      	add	r3, r2
 800608c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006096:	3b01      	subs	r3, #1
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa faa9 	bl	80005f8 <__aeabi_dmul>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060ae:	f7fa f8ed 	bl	800028c <__adddf3>
 80060b2:	4602      	mov	r2, r0
 80060b4:	460b      	mov	r3, r1
 80060b6:	e9c7 2306 	strd	r2, r3, [r7, #24]
      for (iyend = b_iy; iyend < d; iyend++) {
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	3301      	adds	r3, #1
 80060be:	623b      	str	r3, [r7, #32]
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	dbd6      	blt.n	8006076 <xgemv_gp+0x5e>
      }

      iyend = div_nde_s32_floor(b_iy - ia0, 3);
 80060c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2103      	movs	r1, #3
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fb fa49 	bl	8001568 <div_nde_s32_floor>
 80060d6:	6238      	str	r0, [r7, #32]
      y[iyend] += c;
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060de:	4413      	add	r3, r2
 80060e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ea:	18d4      	adds	r4, r2, r3
 80060ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060f0:	f7fa f8cc 	bl	800028c <__adddf3>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	e9c4 2300 	strd	r2, r3, [r4]
    for (b_iy = ia0; b_iy <= b; b_iy += 3) {
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	3303      	adds	r3, #3
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	429a      	cmp	r2, r3
 8006108:	dda8      	ble.n	800605c <xgemv_gp+0x44>
    }
  }
}
 800610a:	bf00      	nop
 800610c:	372c      	adds	r7, #44	; 0x2c
 800610e:	46bd      	mov	sp, r7
 8006110:	bd90      	pop	{r4, r7, pc}

08006112 <xgerc_aq>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void xgerc_aq(int32_T m, int32_T n, real_T alpha1, int32_T ix0, const
                     real_T y[3], real_T A[9], int32_T ia0)
{
 8006112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006114:	b08f      	sub	sp, #60	; 0x3c
 8006116:	af00      	add	r7, sp, #0
 8006118:	6178      	str	r0, [r7, #20]
 800611a:	6139      	str	r1, [r7, #16]
 800611c:	ed87 0b02 	vstr	d0, [r7, #8]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	603b      	str	r3, [r7, #0]
  int32_T ijA;
  int32_T j;
  if (!(alpha1 == 0.0)) {
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	f04f 0300 	mov.w	r3, #0
 800612c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006130:	f7fa fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d000      	beq.n	800613c <xgerc_aq+0x2a>
      }

      jA += 3;
    }
  }
}
 800613a:	e068      	b.n	800620e <xgerc_aq+0xfc>
    jA = ia0;
 800613c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8006140:	2300      	movs	r3, #0
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
 8006144:	e05f      	b.n	8006206 <xgerc_aq+0xf4>
      temp = y[j];
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	4413      	add	r3, r2
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	e9c7 2308 	strd	r2, r3, [r7, #32]
      if (temp != 0.0) {
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006162:	f7fa fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d146      	bne.n	80061fa <xgerc_aq+0xe8>
        temp *= alpha1;
 800616c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006170:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006174:	f7fa fa40 	bl	80005f8 <__aeabi_dmul>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	e9c7 2308 	strd	r2, r3, [r7, #32]
        b = m + jA;
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	4413      	add	r3, r2
 8006186:	61fb      	str	r3, [r7, #28]
        for (ijA = jA; ijA < b; ijA++) {
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	e031      	b.n	80061f2 <xgerc_aq+0xe0>
          A[ijA - 1] += A[((ix0 + ijA) - jA) - 1] * temp;
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006194:	3b01      	subs	r3, #1
 8006196:	00db      	lsls	r3, r3, #3
 8006198:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800619a:	4413      	add	r3, r2
 800619c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	441a      	add	r2, r3
 80061a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061ae:	3b01      	subs	r3, #1
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061b4:	4413      	add	r3, r2
 80061b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061be:	f7fa fa1b 	bl	80005f8 <__aeabi_dmul>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80061d0:	3b01      	subs	r3, #1
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061d6:	18d6      	adds	r6, r2, r3
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4620      	mov	r0, r4
 80061de:	4629      	mov	r1, r5
 80061e0:	f7fa f854 	bl	800028c <__adddf3>
 80061e4:	4602      	mov	r2, r0
 80061e6:	460b      	mov	r3, r1
 80061e8:	e9c6 2300 	strd	r2, r3, [r6]
        for (ijA = jA; ijA < b; ijA++) {
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	3301      	adds	r3, #1
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
 80061f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	dbc9      	blt.n	800618e <xgerc_aq+0x7c>
      jA += 3;
 80061fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fc:	3303      	adds	r3, #3
 80061fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (j = 0; j < n; j++) {
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	3301      	adds	r3, #1
 8006204:	633b      	str	r3, [r7, #48]	; 0x30
 8006206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	429a      	cmp	r2, r3
 800620c:	db9b      	blt.n	8006146 <xgerc_aq+0x34>
}
 800620e:	bf00      	nop
 8006210:	373c      	adds	r7, #60	; 0x3c
 8006212:	46bd      	mov	sp, r7
 8006214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006218 <qr>:

/* Function for MATLAB Function: '<S3>/Discrete-Time SqrtKF - Calculate SLMZ' */
static void qr(const real_T A[9], real_T Q[9], real_T R[9])
{
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	b0bb      	sub	sp, #236	; 0xec
 800621e:	af04      	add	r7, sp, #16
 8006220:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006222:	62b9      	str	r1, [r7, #40]	; 0x28
 8006224:	627a      	str	r2, [r7, #36]	; 0x24
  int32_T exitg1;
  int32_T ii;
  int32_T itau;
  int32_T knt;
  boolean_T exitg2;
  memcpy(&b_A[0], &A[0], 9U * sizeof(real_T));
 8006226:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800622a:	2248      	movs	r2, #72	; 0x48
 800622c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800622e:	4618      	mov	r0, r3
 8006230:	f006 f9be 	bl	800c5b0 <memcpy>
  tau[0] = 0.0;
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  work[0] = 0.0;
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  tau[1] = 0.0;
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	f04f 0300 	mov.w	r3, #0
 8006254:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  work[1] = 0.0;
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  tau[2] = 0.0;
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  work[2] = 0.0;
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  for (itau = 0; itau < 3; itau++) {
 800627c:	2300      	movs	r3, #0
 800627e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006282:	e342      	b.n	800690a <qr+0x6f2>
    ii = itau * 3 + itau;
 8006284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (itau + 1 < 3) {
 800628e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006292:	2b01      	cmp	r3, #1
 8006294:	f300 832e 	bgt.w	80068f4 <qr+0x6dc>
      real_T atmp;
      real_T beta1;
      atmp = b_A[ii];
 8006298:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	33b8      	adds	r3, #184	; 0xb8
 80062a0:	f107 0220 	add.w	r2, r7, #32
 80062a4:	4413      	add	r3, r2
 80062a6:	3b78      	subs	r3, #120	; 0x78
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
      b_lastv = ii + 2;
 80062b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062b4:	3302      	adds	r3, #2
 80062b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      tau[itau] = 0.0;
 80062ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	33b8      	adds	r3, #184	; 0xb8
 80062c2:	f107 0220 	add.w	r2, r7, #32
 80062c6:	4413      	add	r3, r2
 80062c8:	f1a3 0190 	sub.w	r1, r3, #144	; 0x90
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9c1 2300 	strd	r2, r3, [r1]
      beta1 = xnrm2_gwq(2 - itau, b_A, ii + 2);
 80062d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062dc:	f1c3 0002 	rsb	r0, r3, #2
 80062e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7fd f9fc 	bl	80036e8 <xnrm2_gwq>
 80062f0:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
      if (beta1 != 0.0) {
 80062f4:	f04f 0200 	mov.w	r2, #0
 80062f8:	f04f 0300 	mov.w	r3, #0
 80062fc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006300:	f7fa fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 81d7 	bne.w	80066ba <qr+0x4a2>
        beta1 = rt_hypotd_snf(b_A[ii], beta1);
 800630c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	33b8      	adds	r3, #184	; 0xb8
 8006314:	f107 0220 	add.w	r2, r7, #32
 8006318:	4413      	add	r3, r2
 800631a:	3b78      	subs	r3, #120	; 0x78
 800631c:	ed93 7b00 	vldr	d7, [r3]
 8006320:	ed97 1b2a 	vldr	d1, [r7, #168]	; 0xa8
 8006324:	eeb0 0a47 	vmov.f32	s0, s14
 8006328:	eef0 0a67 	vmov.f32	s1, s15
 800632c:	f7fb f9f4 	bl	8001718 <rt_hypotd_snf>
 8006330:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
        if (b_A[ii] >= 0.0) {
 8006334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	33b8      	adds	r3, #184	; 0xb8
 800633c:	f107 0220 	add.w	r2, r7, #32
 8006340:	4413      	add	r3, r2
 8006342:	3b78      	subs	r3, #120	; 0x78
 8006344:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006348:	f04f 0200 	mov.w	r2, #0
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	f7fa fbd8 	bl	8000b04 <__aeabi_dcmpge>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <qr+0x152>
          beta1 = -beta1;
 800635a:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 800635e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006362:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8006366:	e9c7 562a 	strd	r5, r6, [r7, #168]	; 0xa8
        }

        if (fabs(beta1) < 1.0020841800044864E-292) {
 800636a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800636e:	61bb      	str	r3, [r7, #24]
 8006370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8006382:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006386:	f7fa fba9 	bl	8000adc <__aeabi_dcmplt>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8118 	beq.w	80065c2 <qr+0x3aa>
          knt = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
          b_coltop = (ii - itau) + 3;
 8006398:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800639c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	3303      	adds	r3, #3
 80063a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
          do {
            knt++;
 80063a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063ac:	3301      	adds	r3, #1
 80063ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 80063b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063ba:	e023      	b.n	8006404 <qr+0x1ec>
              b_A[coltop - 1] *= 9.9792015476736E+291;
 80063bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063c0:	3b01      	subs	r3, #1
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	33b8      	adds	r3, #184	; 0xb8
 80063c6:	f107 0220 	add.w	r2, r7, #32
 80063ca:	4413      	add	r3, r2
 80063cc:	3b78      	subs	r3, #120	; 0x78
 80063ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063d6:	1e5c      	subs	r4, r3, #1
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	4b9e      	ldr	r3, [pc, #632]	; (8006658 <qr+0x440>)
 80063de:	f7fa f90b 	bl	80005f8 <__aeabi_dmul>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	00e3      	lsls	r3, r4, #3
 80063ec:	33b8      	adds	r3, #184	; 0xb8
 80063ee:	f107 0220 	add.w	r2, r7, #32
 80063f2:	4413      	add	r3, r2
 80063f4:	3b78      	subs	r3, #120	; 0x78
 80063f6:	e9c3 0100 	strd	r0, r1, [r3]
            for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 80063fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80063fe:	3301      	adds	r3, #1
 8006400:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006404:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640c:	429a      	cmp	r2, r3
 800640e:	ddd5      	ble.n	80063bc <qr+0x1a4>
            }

            beta1 *= 9.9792015476736E+291;
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	4b90      	ldr	r3, [pc, #576]	; (8006658 <qr+0x440>)
 8006416:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800641a:	f7fa f8ed 	bl	80005f8 <__aeabi_dmul>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
            atmp *= 9.9792015476736E+291;
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	4b8b      	ldr	r3, [pc, #556]	; (8006658 <qr+0x440>)
 800642c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006430:	f7fa f8e2 	bl	80005f8 <__aeabi_dmul>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
          } while ((fabs(beta1) < 1.0020841800044864E-292) && (knt < 20));
 800643c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006440:	613b      	str	r3, [r7, #16]
 8006442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006446:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8006454:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006458:	f7fa fb40 	bl	8000adc <__aeabi_dcmplt>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <qr+0x252>
 8006462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006466:	2b13      	cmp	r3, #19
 8006468:	dd9e      	ble.n	80063a8 <qr+0x190>

          beta1 = rt_hypotd_snf(atmp, xnrm2_gwq(2 - itau, b_A, ii + 2));
 800646a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800646e:	f1c3 0002 	rsb	r0, r3, #2
 8006472:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006476:	1c9a      	adds	r2, r3, #2
 8006478:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800647c:	4619      	mov	r1, r3
 800647e:	f7fd f933 	bl	80036e8 <xnrm2_gwq>
 8006482:	eeb0 7a40 	vmov.f32	s14, s0
 8006486:	eef0 7a60 	vmov.f32	s15, s1
 800648a:	eeb0 1a47 	vmov.f32	s2, s14
 800648e:	eef0 1a67 	vmov.f32	s3, s15
 8006492:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8006496:	f7fb f93f 	bl	8001718 <rt_hypotd_snf>
 800649a:	ed87 0b2a 	vstr	d0, [r7, #168]	; 0xa8
          if (atmp >= 0.0) {
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064aa:	f7fa fb2b 	bl	8000b04 <__aeabi_dcmpge>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <qr+0x2b4>
            beta1 = -beta1;
 80064b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064b8:	603b      	str	r3, [r7, #0]
 80064ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064be:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80064c2:	607b      	str	r3, [r7, #4]
 80064c4:	ed97 7b00 	vldr	d7, [r7]
 80064c8:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
          }

          tau[itau] = (beta1 - atmp) / beta1;
 80064cc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80064d0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80064d4:	f7f9 fed8 	bl	8000288 <__aeabi_dsub>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80064e4:	f7fa f9b2 	bl	800084c <__aeabi_ddiv>
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4610      	mov	r0, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	33b8      	adds	r3, #184	; 0xb8
 80064f8:	f107 0220 	add.w	r2, r7, #32
 80064fc:	4413      	add	r3, r2
 80064fe:	3b90      	subs	r3, #144	; 0x90
 8006500:	e9c3 0100 	strd	r0, r1, [r3]
          atmp = 1.0 / (atmp - beta1);
 8006504:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006508:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800650c:	f7f9 febc 	bl	8000288 <__aeabi_dsub>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	f04f 0000 	mov.w	r0, #0
 8006518:	4950      	ldr	r1, [pc, #320]	; (800665c <qr+0x444>)
 800651a:	f7fa f997 	bl	800084c <__aeabi_ddiv>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
          for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 8006526:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800652a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800652e:	e022      	b.n	8006576 <qr+0x35e>
            b_A[coltop - 1] *= atmp;
 8006530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006534:	3b01      	subs	r3, #1
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	33b8      	adds	r3, #184	; 0xb8
 800653a:	f107 0220 	add.w	r2, r7, #32
 800653e:	4413      	add	r3, r2
 8006540:	3b78      	subs	r3, #120	; 0x78
 8006542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006546:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800654a:	1e5c      	subs	r4, r3, #1
 800654c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006550:	f7fa f852 	bl	80005f8 <__aeabi_dmul>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4610      	mov	r0, r2
 800655a:	4619      	mov	r1, r3
 800655c:	00e3      	lsls	r3, r4, #3
 800655e:	33b8      	adds	r3, #184	; 0xb8
 8006560:	f107 0220 	add.w	r2, r7, #32
 8006564:	4413      	add	r3, r2
 8006566:	3b78      	subs	r3, #120	; 0x78
 8006568:	e9c3 0100 	strd	r0, r1, [r3]
          for (coltop = b_lastv; coltop <= b_coltop; coltop++) {
 800656c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006570:	3301      	adds	r3, #1
 8006572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006576:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800657a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657e:	429a      	cmp	r2, r3
 8006580:	ddd6      	ble.n	8006530 <qr+0x318>
          }

          for (b_lastv = 0; b_lastv < knt; b_lastv++) {
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006588:	e010      	b.n	80065ac <qr+0x394>
            beta1 *= 1.0020841800044864E-292;
 800658a:	f04f 0200 	mov.w	r2, #0
 800658e:	f04f 7354 	mov.w	r3, #55574528	; 0x3500000
 8006592:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006596:	f7fa f82f 	bl	80005f8 <__aeabi_dmul>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
          for (b_lastv = 0; b_lastv < knt; b_lastv++) {
 80065a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80065a6:	3301      	adds	r3, #1
 80065a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065b4:	429a      	cmp	r2, r3
 80065b6:	dbe8      	blt.n	800658a <qr+0x372>
          }

          atmp = beta1;
 80065b8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80065bc:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
 80065c0:	e07b      	b.n	80066ba <qr+0x4a2>
        } else {
          tau[itau] = (beta1 - b_A[ii]) / beta1;
 80065c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	33b8      	adds	r3, #184	; 0xb8
 80065ca:	f107 0220 	add.w	r2, r7, #32
 80065ce:	4413      	add	r3, r2
 80065d0:	3b78      	subs	r3, #120	; 0x78
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80065da:	f7f9 fe55 	bl	8000288 <__aeabi_dsub>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80065ea:	f7fa f92f 	bl	800084c <__aeabi_ddiv>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4610      	mov	r0, r2
 80065f4:	4619      	mov	r1, r3
 80065f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	33b8      	adds	r3, #184	; 0xb8
 80065fe:	f107 0220 	add.w	r2, r7, #32
 8006602:	4413      	add	r3, r2
 8006604:	3b90      	subs	r3, #144	; 0x90
 8006606:	e9c3 0100 	strd	r0, r1, [r3]
          atmp = 1.0 / (b_A[ii] - beta1);
 800660a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800660e:	00db      	lsls	r3, r3, #3
 8006610:	33b8      	adds	r3, #184	; 0xb8
 8006612:	f107 0220 	add.w	r2, r7, #32
 8006616:	4413      	add	r3, r2
 8006618:	3b78      	subs	r3, #120	; 0x78
 800661a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800661e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8006622:	f7f9 fe31 	bl	8000288 <__aeabi_dsub>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	f04f 0000 	mov.w	r0, #0
 800662e:	490b      	ldr	r1, [pc, #44]	; (800665c <qr+0x444>)
 8006630:	f7fa f90c 	bl	800084c <__aeabi_ddiv>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
          knt = (ii - itau) + 3;
 800663c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	3303      	adds	r3, #3
 8006648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
          for (b_coltop = b_lastv; b_coltop <= knt; b_coltop++) {
 800664c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006654:	e027      	b.n	80066a6 <qr+0x48e>
 8006656:	bf00      	nop
 8006658:	7c900000 	.word	0x7c900000
 800665c:	3ff00000 	.word	0x3ff00000
            b_A[b_coltop - 1] *= atmp;
 8006660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006664:	3b01      	subs	r3, #1
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	33b8      	adds	r3, #184	; 0xb8
 800666a:	f107 0220 	add.w	r2, r7, #32
 800666e:	4413      	add	r3, r2
 8006670:	3b78      	subs	r3, #120	; 0x78
 8006672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667a:	1e5c      	subs	r4, r3, #1
 800667c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8006680:	f7f9 ffba 	bl	80005f8 <__aeabi_dmul>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4610      	mov	r0, r2
 800668a:	4619      	mov	r1, r3
 800668c:	00e3      	lsls	r3, r4, #3
 800668e:	33b8      	adds	r3, #184	; 0xb8
 8006690:	f107 0220 	add.w	r2, r7, #32
 8006694:	4413      	add	r3, r2
 8006696:	3b78      	subs	r3, #120	; 0x78
 8006698:	e9c3 0100 	strd	r0, r1, [r3]
          for (b_coltop = b_lastv; b_coltop <= knt; b_coltop++) {
 800669c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a0:	3301      	adds	r3, #1
 80066a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80066a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80066aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066ae:	429a      	cmp	r2, r3
 80066b0:	ddd6      	ble.n	8006660 <qr+0x448>
          }

          atmp = beta1;
 80066b2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80066b6:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
        }
      }

      b_A[ii] = atmp;
 80066ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	33b8      	adds	r3, #184	; 0xb8
 80066c2:	f107 0220 	add.w	r2, r7, #32
 80066c6:	4413      	add	r3, r2
 80066c8:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 80066cc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80066d0:	e9c1 2300 	strd	r2, r3, [r1]
      beta1 = b_A[ii];
 80066d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	33b8      	adds	r3, #184	; 0xb8
 80066dc:	f107 0220 	add.w	r2, r7, #32
 80066e0:	4413      	add	r3, r2
 80066e2:	3b78      	subs	r3, #120	; 0x78
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
      b_A[ii] = 1.0;
 80066ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	33b8      	adds	r3, #184	; 0xb8
 80066f4:	f107 0220 	add.w	r2, r7, #32
 80066f8:	4413      	add	r3, r2
 80066fa:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	4bbc      	ldr	r3, [pc, #752]	; (80069f4 <qr+0x7dc>)
 8006704:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[itau] != 0.0) {
 8006708:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	33b8      	adds	r3, #184	; 0xb8
 8006710:	f107 0220 	add.w	r2, r7, #32
 8006714:	4413      	add	r3, r2
 8006716:	3b90      	subs	r3, #144	; 0x90
 8006718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	f7fa f9d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	f040 808f 	bne.w	800684e <qr+0x636>
        b_lastv = 3 - itau;
 8006730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006734:	f1c3 0303 	rsb	r3, r3, #3
 8006738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        knt = (ii - itau) + 2;
 800673c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	3302      	adds	r3, #2
 8006748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        while ((b_lastv > 0) && (b_A[knt] == 0.0)) {
 800674c:	e009      	b.n	8006762 <qr+0x54a>
          b_lastv--;
 800674e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006752:	3b01      	subs	r3, #1
 8006754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          knt--;
 8006758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800675c:	3b01      	subs	r3, #1
 800675e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        while ((b_lastv > 0) && (b_A[knt] == 0.0)) {
 8006762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006766:	2b00      	cmp	r3, #0
 8006768:	dd12      	ble.n	8006790 <qr+0x578>
 800676a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	33b8      	adds	r3, #184	; 0xb8
 8006772:	f107 0220 	add.w	r2, r7, #32
 8006776:	4413      	add	r3, r2
 8006778:	3b78      	subs	r3, #120	; 0x78
 800677a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	f7fa f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1de      	bne.n	800674e <qr+0x536>
        }

        knt = 2 - itau;
 8006790:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006794:	f1c3 0302 	rsb	r3, r3, #2
 8006798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        exitg2 = false;
 800679c:	2300      	movs	r3, #0
 800679e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (knt > 0)) {
 80067a2:	e04b      	b.n	800683c <qr+0x624>
          b_coltop = ((knt - 1) * 3 + ii) + 3;
 80067a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80067a8:	1e5a      	subs	r2, r3, #1
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	441a      	add	r2, r3
 80067b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067b4:	4413      	add	r3, r2
 80067b6:	3303      	adds	r3, #3
 80067b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
          coltop = b_coltop;
 80067bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          do {
            exitg1 = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (coltop + 1 <= b_coltop + b_lastv) {
 80067ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80067ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80067d2:	441a      	add	r2, r3
 80067d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067d8:	4293      	cmp	r3, r2
 80067da:	da1c      	bge.n	8006816 <qr+0x5fe>
              if (b_A[coltop] != 0.0) {
 80067dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	33b8      	adds	r3, #184	; 0xb8
 80067e4:	f107 0220 	add.w	r2, r7, #32
 80067e8:	4413      	add	r3, r2
 80067ea:	3b78      	subs	r3, #120	; 0x78
 80067ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067f0:	f04f 0200 	mov.w	r2, #0
 80067f4:	f04f 0300 	mov.w	r3, #0
 80067f8:	f7fa f966 	bl	8000ac8 <__aeabi_dcmpeq>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d103      	bne.n	800680a <qr+0x5f2>
                exitg1 = 1;
 8006802:	2301      	movs	r3, #1
 8006804:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006808:	e00d      	b.n	8006826 <qr+0x60e>
              } else {
                coltop++;
 800680a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800680e:	3301      	adds	r3, #1
 8006810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006814:	e007      	b.n	8006826 <qr+0x60e>
              }
            } else {
              knt--;
 8006816:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800681a:	3b01      	subs	r3, #1
 800681c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
              exitg1 = 2;
 8006820:	2302      	movs	r3, #2
 8006822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            }
          } while (exitg1 == 0);
 8006826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0ca      	beq.n	80067c4 <qr+0x5ac>

          if (exitg1 == 1) {
 800682e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006832:	2b01      	cmp	r3, #1
 8006834:	d102      	bne.n	800683c <qr+0x624>
            exitg2 = true;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (knt > 0)) {
 800683c:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10a      	bne.n	800685a <qr+0x642>
 8006844:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006848:	2b00      	cmp	r3, #0
 800684a:	dcab      	bgt.n	80067a4 <qr+0x58c>
 800684c:	e005      	b.n	800685a <qr+0x642>
          }
        }
      } else {
        b_lastv = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
        knt = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      }

      if (b_lastv > 0) {
 800685a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800685e:	2b00      	cmp	r3, #0
 8006860:	dd3a      	ble.n	80068d8 <qr+0x6c0>
        xgemv_gp(b_lastv, knt, b_A, ii + 4, b_A, ii + 1, work);
 8006862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006866:	1d18      	adds	r0, r3, #4
 8006868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006872:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006876:	9302      	str	r3, [sp, #8]
 8006878:	9201      	str	r2, [sp, #4]
 800687a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	4603      	mov	r3, r0
 8006882:	460a      	mov	r2, r1
 8006884:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8006888:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800688c:	f7ff fbc4 	bl	8006018 <xgemv_gp>
        xgerc_aq(b_lastv, knt, -tau[itau], ii + 1, work, b_A, ii + 4);
 8006890:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	33b8      	adds	r3, #184	; 0xb8
 8006898:	f107 0220 	add.w	r2, r7, #32
 800689c:	4413      	add	r3, r2
 800689e:	3b90      	subs	r3, #144	; 0x90
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	60ba      	str	r2, [r7, #8]
 80068a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80068aa:	60fb      	str	r3, [r7, #12]
 80068ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068b0:	1c59      	adds	r1, r3, #1
 80068b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068b6:	3304      	adds	r3, #4
 80068b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	460a      	mov	r2, r1
 80068c8:	ed97 0b02 	vldr	d0, [r7, #8]
 80068cc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80068d0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80068d4:	f7ff fc1d 	bl	8006112 <xgerc_aq>
      }

      b_A[ii] = beta1;
 80068d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	33b8      	adds	r3, #184	; 0xb8
 80068e0:	f107 0220 	add.w	r2, r7, #32
 80068e4:	4413      	add	r3, r2
 80068e6:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 80068ea:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80068ee:	e9c1 2300 	strd	r2, r3, [r1]
 80068f2:	e005      	b.n	8006900 <qr+0x6e8>
    } else {
      tau[2] = 0.0;
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
  for (itau = 0; itau < 3; itau++) {
 8006900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006904:	3301      	adds	r3, #1
 8006906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800690a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800690e:	2b02      	cmp	r3, #2
 8006910:	f77f acb8 	ble.w	8006284 <qr+0x6c>
    }
  }

  for (itau = 0; itau < 3; itau++) {
 8006914:	2300      	movs	r3, #0
 8006916:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800691a:	e062      	b.n	80069e2 <qr+0x7ca>
    for (ii = 0; ii <= itau; ii++) {
 800691c:	2300      	movs	r3, #0
 800691e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006922:	e021      	b.n	8006968 <qr+0x750>
      R[ii + 3 * itau] = b_A[3 * itau + ii];
 8006924:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006928:	4613      	mov	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	441a      	add	r2, r3
 800692e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006932:	18d0      	adds	r0, r2, r3
 8006934:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006938:	4613      	mov	r3, r2
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	441a      	add	r2, r3
 800693e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006942:	4413      	add	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006948:	18d1      	adds	r1, r2, r3
 800694a:	00c3      	lsls	r3, r0, #3
 800694c:	33b8      	adds	r3, #184	; 0xb8
 800694e:	f107 0220 	add.w	r2, r7, #32
 8006952:	4413      	add	r3, r2
 8006954:	3b78      	subs	r3, #120	; 0x78
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = 0; ii <= itau; ii++) {
 800695e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006962:	3301      	adds	r3, #1
 8006964:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006968:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006970:	429a      	cmp	r2, r3
 8006972:	ddd7      	ble.n	8006924 <qr+0x70c>
    }

    for (ii = itau + 2; ii < 4; ii++) {
 8006974:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006978:	3302      	adds	r3, #2
 800697a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800697e:	e018      	b.n	80069b2 <qr+0x79a>
      R[(ii + 3 * itau) - 1] = 0.0;
 8006980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	441a      	add	r2, r3
 800698a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800698e:	4413      	add	r3, r2
 8006990:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006994:	3b01      	subs	r3, #1
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699a:	18d1      	adds	r1, r2, r3
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e9c1 2300 	strd	r2, r3, [r1]
    for (ii = itau + 2; ii < 4; ii++) {
 80069a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069ac:	3301      	adds	r3, #1
 80069ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	dde2      	ble.n	8006980 <qr+0x768>
    }

    work[itau] = 0.0;
 80069ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	33b8      	adds	r3, #184	; 0xb8
 80069c2:	f107 0220 	add.w	r2, r7, #32
 80069c6:	4413      	add	r3, r2
 80069c8:	f1a3 01a8 	sub.w	r1, r3, #168	; 0xa8
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	e9c1 2300 	strd	r2, r3, [r1]
  for (itau = 0; itau < 3; itau++) {
 80069d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069dc:	3301      	adds	r3, #1
 80069de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	dd98      	ble.n	800691c <qr+0x704>
  }

  for (ii = 2; ii >= 0; ii--) {
 80069ea:	2302      	movs	r3, #2
 80069ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069f0:	e184      	b.n	8006cfc <qr+0xae4>
 80069f2:	bf00      	nop
 80069f4:	3ff00000 	.word	0x3ff00000
    b_lastv = (ii * 3 + ii) + 4;
 80069f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80069fc:	3301      	adds	r3, #1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (ii + 1 < 3) {
 8006a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f300 8134 	bgt.w	8006c76 <qr+0xa5e>
      b_A[b_lastv - 4] = 1.0;
 8006a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a12:	3b04      	subs	r3, #4
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	33b8      	adds	r3, #184	; 0xb8
 8006a18:	f107 0220 	add.w	r2, r7, #32
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	4bba      	ldr	r3, [pc, #744]	; (8006d10 <qr+0xaf8>)
 8006a28:	e9c1 2300 	strd	r2, r3, [r1]
      if (tau[ii] != 0.0) {
 8006a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	33b8      	adds	r3, #184	; 0xb8
 8006a34:	f107 0220 	add.w	r2, r7, #32
 8006a38:	4413      	add	r3, r2
 8006a3a:	3b90      	subs	r3, #144	; 0x90
 8006a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	f7fa f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f040 808f 	bne.w	8006b72 <qr+0x95a>
        knt = 3 - ii;
 8006a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a58:	f1c3 0303 	rsb	r3, r3, #3
 8006a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        b_coltop = b_lastv - ii;
 8006a60:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        while ((knt > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8006a6e:	e009      	b.n	8006a84 <qr+0x86c>
          knt--;
 8006a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a74:	3b01      	subs	r3, #1
 8006a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
          b_coltop--;
 8006a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        while ((knt > 0) && (b_A[b_coltop - 2] == 0.0)) {
 8006a84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dd13      	ble.n	8006ab4 <qr+0x89c>
 8006a8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a90:	3b02      	subs	r3, #2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	33b8      	adds	r3, #184	; 0xb8
 8006a96:	f107 0220 	add.w	r2, r7, #32
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3b78      	subs	r3, #120	; 0x78
 8006a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	f04f 0300 	mov.w	r3, #0
 8006aaa:	f7fa f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1dd      	bne.n	8006a70 <qr+0x858>
        }

        b_coltop = 2 - ii;
 8006ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ab8:	f1c3 0302 	rsb	r3, r3, #2
 8006abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        exitg2 = false;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (b_coltop > 0)) {
 8006ac6:	e04b      	b.n	8006b60 <qr+0x948>
          coltop = (b_coltop - 1) * 3 + b_lastv;
 8006ac8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006acc:	1e5a      	subs	r2, r3, #1
 8006ace:	4613      	mov	r3, r2
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ad8:	4413      	add	r3, r2
 8006ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
          itau = coltop;
 8006ade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
          do {
            exitg1 = 0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            if (itau <= (coltop + knt) - 1) {
 8006aec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006af0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006af4:	4413      	add	r3, r2
 8006af6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006afa:	429a      	cmp	r2, r3
 8006afc:	da1d      	bge.n	8006b3a <qr+0x922>
              if (b_A[itau - 1] != 0.0) {
 8006afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b02:	3b01      	subs	r3, #1
 8006b04:	00db      	lsls	r3, r3, #3
 8006b06:	33b8      	adds	r3, #184	; 0xb8
 8006b08:	f107 0220 	add.w	r2, r7, #32
 8006b0c:	4413      	add	r3, r2
 8006b0e:	3b78      	subs	r3, #120	; 0x78
 8006b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b14:	f04f 0200 	mov.w	r2, #0
 8006b18:	f04f 0300 	mov.w	r3, #0
 8006b1c:	f7f9 ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d103      	bne.n	8006b2e <qr+0x916>
                exitg1 = 1;
 8006b26:	2301      	movs	r3, #1
 8006b28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b2c:	e00d      	b.n	8006b4a <qr+0x932>
              } else {
                itau++;
 8006b2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b32:	3301      	adds	r3, #1
 8006b34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b38:	e007      	b.n	8006b4a <qr+0x932>
              }
            } else {
              b_coltop--;
 8006b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
              exitg1 = 2;
 8006b44:	2302      	movs	r3, #2
 8006b46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            }
          } while (exitg1 == 0);
 8006b4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0c9      	beq.n	8006ae6 <qr+0x8ce>

          if (exitg1 == 1) {
 8006b52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d102      	bne.n	8006b60 <qr+0x948>
            exitg2 = true;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
        while ((!exitg2) && (b_coltop > 0)) {
 8006b60:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <qr+0x966>
 8006b68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dcab      	bgt.n	8006ac8 <qr+0x8b0>
 8006b70:	e005      	b.n	8006b7e <qr+0x966>
          }
        }
      } else {
        knt = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
        b_coltop = 0;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      }

      if (knt > 0) {
 8006b7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dd35      	ble.n	8006bf2 <qr+0x9da>
        xgemv_gp(knt, b_coltop, b_A, b_lastv, b_A, b_lastv - 3, work);
 8006b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b8a:	3b03      	subs	r3, #3
 8006b8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006b90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b94:	9202      	str	r2, [sp, #8]
 8006b96:	9301      	str	r3, [sp, #4]
 8006b98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ba2:	460a      	mov	r2, r1
 8006ba4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8006ba8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006bac:	f7ff fa34 	bl	8006018 <xgemv_gp>
        xgerc_aq(knt, b_coltop, -tau[ii], b_lastv - 3, work, b_A, b_lastv);
 8006bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	33b8      	adds	r3, #184	; 0xb8
 8006bb8:	f107 0220 	add.w	r2, r7, #32
 8006bbc:	4413      	add	r3, r2
 8006bbe:	3b90      	subs	r3, #144	; 0x90
 8006bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc4:	4692      	mov	sl, r2
 8006bc6:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8006bca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bce:	1eda      	subs	r2, r3, #3
 8006bd0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006bd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006bd8:	9301      	str	r3, [sp, #4]
 8006bda:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	460b      	mov	r3, r1
 8006be2:	ec4b ab10 	vmov	d0, sl, fp
 8006be6:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8006bea:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006bee:	f7ff fa90 	bl	8006112 <xgerc_aq>
      }

      knt = (b_lastv - ii) - 1;
 8006bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006bf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      for (b_coltop = b_lastv - 2; b_coltop <= knt; b_coltop++) {
 8006c02:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c06:	3b02      	subs	r3, #2
 8006c08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c0c:	e02d      	b.n	8006c6a <qr+0xa52>
        b_A[b_coltop - 1] *= -tau[ii];
 8006c0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c12:	3b01      	subs	r3, #1
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	33b8      	adds	r3, #184	; 0xb8
 8006c18:	f107 0220 	add.w	r2, r7, #32
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3b78      	subs	r3, #120	; 0x78
 8006c20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	33b8      	adds	r3, #184	; 0xb8
 8006c2c:	f107 0220 	add.w	r2, r7, #32
 8006c30:	4413      	add	r3, r2
 8006c32:	3b90      	subs	r3, #144	; 0x90
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	4690      	mov	r8, r2
 8006c3a:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8006c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c42:	1e5c      	subs	r4, r3, #1
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	f7f9 fcd6 	bl	80005f8 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	00e1      	lsls	r1, r4, #3
 8006c52:	31b8      	adds	r1, #184	; 0xb8
 8006c54:	f107 0020 	add.w	r0, r7, #32
 8006c58:	4401      	add	r1, r0
 8006c5a:	3978      	subs	r1, #120	; 0x78
 8006c5c:	e9c1 2300 	strd	r2, r3, [r1]
      for (b_coltop = b_lastv - 2; b_coltop <= knt; b_coltop++) {
 8006c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c64:	3301      	adds	r3, #1
 8006c66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c6a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006c72:	429a      	cmp	r2, r3
 8006c74:	ddcb      	ble.n	8006c0e <qr+0x9f6>
      }
    }

    b_A[b_lastv - 4] = 1.0 - tau[ii];
 8006c76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	33b8      	adds	r3, #184	; 0xb8
 8006c7e:	f107 0220 	add.w	r2, r7, #32
 8006c82:	4413      	add	r3, r2
 8006c84:	3b90      	subs	r3, #144	; 0x90
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006c8e:	1f0c      	subs	r4, r1, #4
 8006c90:	f04f 0000 	mov.w	r0, #0
 8006c94:	491e      	ldr	r1, [pc, #120]	; (8006d10 <qr+0xaf8>)
 8006c96:	f7f9 faf7 	bl	8000288 <__aeabi_dsub>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	00e1      	lsls	r1, r4, #3
 8006ca0:	31b8      	adds	r1, #184	; 0xb8
 8006ca2:	f107 0020 	add.w	r0, r7, #32
 8006ca6:	4401      	add	r1, r0
 8006ca8:	3978      	subs	r1, #120	; 0x78
 8006caa:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_coltop = 0; b_coltop < ii; b_coltop++) {
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006cb4:	e017      	b.n	8006ce6 <qr+0xace>
      b_A[(b_lastv - b_coltop) - 5] = 0.0;
 8006cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	3b05      	subs	r3, #5
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	33b8      	adds	r3, #184	; 0xb8
 8006cc6:	f107 0220 	add.w	r2, r7, #32
 8006cca:	4413      	add	r3, r2
 8006ccc:	f1a3 0178 	sub.w	r1, r3, #120	; 0x78
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9c1 2300 	strd	r2, r3, [r1]
    for (b_coltop = 0; b_coltop < ii; b_coltop++) {
 8006cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ce6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8006cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	dbe1      	blt.n	8006cb6 <qr+0xa9e>
  for (ii = 2; ii >= 0; ii--) {
 8006cf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f6bf ae79 	bge.w	80069f8 <qr+0x7e0>
    }
  }

  for (itau = 0; itau < 3; itau++) {
 8006d06:	2300      	movs	r3, #0
 8006d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d0c:	e051      	b.n	8006db2 <qr+0xb9a>
 8006d0e:	bf00      	nop
 8006d10:	3ff00000 	.word	0x3ff00000
    Q[3 * itau] = b_A[3 * itau];
 8006d14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	1898      	adds	r0, r3, r2
 8006d1e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2e:	1899      	adds	r1, r3, r2
 8006d30:	00c3      	lsls	r3, r0, #3
 8006d32:	33b8      	adds	r3, #184	; 0xb8
 8006d34:	f107 0220 	add.w	r2, r7, #32
 8006d38:	4413      	add	r3, r2
 8006d3a:	3b78      	subs	r3, #120	; 0x78
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	e9c1 2300 	strd	r2, r3, [r1]
    ii = 3 * itau + 1;
 8006d44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d48:	4613      	mov	r3, r2
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    Q[ii] = b_A[ii];
 8006d54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d5c:	18d1      	adds	r1, r2, r3
 8006d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	33b8      	adds	r3, #184	; 0xb8
 8006d66:	f107 0220 	add.w	r2, r7, #32
 8006d6a:	4413      	add	r3, r2
 8006d6c:	3b78      	subs	r3, #120	; 0x78
 8006d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d72:	e9c1 2300 	strd	r2, r3, [r1]
    ii = 3 * itau + 2;
 8006d76:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	3302      	adds	r3, #2
 8006d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    Q[ii] = b_A[ii];
 8006d86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d8a:	00db      	lsls	r3, r3, #3
 8006d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d8e:	18d1      	adds	r1, r2, r3
 8006d90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	33b8      	adds	r3, #184	; 0xb8
 8006d98:	f107 0220 	add.w	r2, r7, #32
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3b78      	subs	r3, #120	; 0x78
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	e9c1 2300 	strd	r2, r3, [r1]
  for (itau = 0; itau < 3; itau++) {
 8006da8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006dac:	3301      	adds	r3, #1
 8006dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006db2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	ddac      	ble.n	8006d14 <qr+0xafc>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	37dc      	adds	r7, #220	; 0xdc
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc6:	bf00      	nop

08006dc8 <RC_Model_KF_vout_for_MCU_step>:

/* Model step function */
void RC_Model_KF_vout_for_MCU_step(void)
{
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	f5ad 7d31 	sub.w	sp, sp, #708	; 0x2c4
 8006dd0:	af00      	add	r7, sp, #0
  boolean_T errorCondition;

  /* Delay: '<S1>/MemoryP' incorporates:
   *  Constant: '<S1>/P0'
   */
  if (rtDW.icLoad) {
 8006dd2:	4bc9      	ldr	r3, [pc, #804]	; (80070f8 <RC_Model_KF_vout_for_MCU_step+0x330>)
 8006dd4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <RC_Model_KF_vout_for_MCU_step+0x1e>
    memcpy(&rtDW.MemoryP_DSTATE[0], &rtConstP.P0_Value[0], 9U * sizeof(real_T));
 8006ddc:	2248      	movs	r2, #72	; 0x48
 8006dde:	49c7      	ldr	r1, [pc, #796]	; (80070fc <RC_Model_KF_vout_for_MCU_step+0x334>)
 8006de0:	48c5      	ldr	r0, [pc, #788]	; (80070f8 <RC_Model_KF_vout_for_MCU_step+0x330>)
 8006de2:	f005 fbe5 	bl	800c5b0 <memcpy>
  }

  /* Lookup_n-D: '<Root>/Rt' incorporates:
   *  Delay: '<Root>/Delay'
   */
  rtb_Rt = look1_binlca(rtDW.Delay_DSTATE, rtConstP.pooled3,
 8006de6:	4bc4      	ldr	r3, [pc, #784]	; (80070f8 <RC_Model_KF_vout_for_MCU_step+0x330>)
 8006de8:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006dec:	2206      	movs	r2, #6
 8006dee:	49c4      	ldr	r1, [pc, #784]	; (8007100 <RC_Model_KF_vout_for_MCU_step+0x338>)
 8006df0:	48c4      	ldr	r0, [pc, #784]	; (8007104 <RC_Model_KF_vout_for_MCU_step+0x33c>)
 8006df2:	eeb0 0a47 	vmov.f32	s0, s14
 8006df6:	eef0 0a67 	vmov.f32	s1, s15
 8006dfa:	f7fa fa7d 	bl	80012f8 <look1_binlca>
 8006dfe:	ed87 0ba6 	vstr	d0, [r7, #664]	; 0x298
                        rtConstP.Rt_tableData, 6U);

  /* Lookup_n-D: '<Root>/Rb' incorporates:
   *  Delay: '<Root>/Delay'
   */
  rtb_Rb = look1_binlca(rtDW.Delay_DSTATE, rtConstP.pooled3, rtConstP.pooled4,
 8006e02:	4bbd      	ldr	r3, [pc, #756]	; (80070f8 <RC_Model_KF_vout_for_MCU_step+0x330>)
 8006e04:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006e08:	2206      	movs	r2, #6
 8006e0a:	49bf      	ldr	r1, [pc, #764]	; (8007108 <RC_Model_KF_vout_for_MCU_step+0x340>)
 8006e0c:	48bd      	ldr	r0, [pc, #756]	; (8007104 <RC_Model_KF_vout_for_MCU_step+0x33c>)
 8006e0e:	eeb0 0a47 	vmov.f32	s0, s14
 8006e12:	eef0 0a67 	vmov.f32	s1, s15
 8006e16:	f7fa fa6f 	bl	80012f8 <look1_binlca>
 8006e1a:	ed87 0ba4 	vstr	d0, [r7, #656]	; 0x290
                        6U);

  /* Lookup_n-D: '<Root>/Cbulk' incorporates:
   *  Delay: '<Root>/Delay'
   */
  rtb_Cbulk = look1_binlca(rtDW.Delay_DSTATE, rtConstP.pooled3,
 8006e1e:	4bb6      	ldr	r3, [pc, #728]	; (80070f8 <RC_Model_KF_vout_for_MCU_step+0x330>)
 8006e20:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006e24:	2206      	movs	r2, #6
 8006e26:	49b9      	ldr	r1, [pc, #740]	; (800710c <RC_Model_KF_vout_for_MCU_step+0x344>)
 8006e28:	48b6      	ldr	r0, [pc, #728]	; (8007104 <RC_Model_KF_vout_for_MCU_step+0x33c>)
 8006e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8006e2e:	eef0 0a67 	vmov.f32	s1, s15
 8006e32:	f7fa fa61 	bl	80012f8 <look1_binlca>
 8006e36:	ed87 0ba2 	vstr	d0, [r7, #648]	; 0x288
    rtConstP.Cbulk_tableData, 6U);

  /* Lookup_n-D: '<Root>/Csurface' incorporates:
   *  Delay: '<Root>/Delay'
   */
  rtb_Csurface = look1_binlca(rtDW.Delay_DSTATE, rtConstP.pooled3,
 8006e3a:	4baf      	ldr	r3, [pc, #700]	; (80070f8 <RC_Model_KF_vout_for_MCU_step+0x330>)
 8006e3c:	ed93 7b18 	vldr	d7, [r3, #96]	; 0x60
 8006e40:	2206      	movs	r2, #6
 8006e42:	49b3      	ldr	r1, [pc, #716]	; (8007110 <RC_Model_KF_vout_for_MCU_step+0x348>)
 8006e44:	48af      	ldr	r0, [pc, #700]	; (8007104 <RC_Model_KF_vout_for_MCU_step+0x33c>)
 8006e46:	eeb0 0a47 	vmov.f32	s0, s14
 8006e4a:	eef0 0a67 	vmov.f32	s1, s15
 8006e4e:	f7fa fa53 	bl	80012f8 <look1_binlca>
 8006e52:	ed87 0ba0 	vstr	d0, [r7, #640]	; 0x280
    rtConstP.Csurface_tableData, 6U);

  /* MATLAB Function: '<Root>/Matrix Generator' */
  rtb_C[0] = 0.0;
 8006e56:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006e5a:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	f04f 0300 	mov.w	r3, #0
 8006e66:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_C[1] = 0.0;
 8006e6a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006e6e:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	f04f 0300 	mov.w	r3, #0
 8006e7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_C[2] = 1.0;
 8006e7e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006e82:	f5a3 711c 	sub.w	r1, r3, #624	; 0x270
 8006e86:	f04f 0200 	mov.w	r2, #0
 8006e8a:	4ba2      	ldr	r3, [pc, #648]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 8006e8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  Product3_idx_2 = 2.0 * rtb_Cbulk * rtb_Rb;
 8006e90:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	; 0x288
 8006e94:	4602      	mov	r2, r0
 8006e96:	460b      	mov	r3, r1
 8006e98:	f7f9 f9f8 	bl	800028c <__adddf3>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8006ea4:	f7f9 fba8 	bl	80005f8 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
  a_vo_tmp_tmp = 2.0 * rtb_Csurface * rtb_Rb;
 8006eb0:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	f7f9 f9e8 	bl	800028c <__adddf3>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
  a_vo_tmp = 1.0 / a_vo_tmp_tmp;
 8006ed0:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8006ed4:	f04f 0000 	mov.w	r0, #0
 8006ed8:	498e      	ldr	r1, [pc, #568]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 8006eda:	f7f9 fcb7 	bl	800084c <__aeabi_ddiv>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
  a_vo = 1.0 / Product3_idx_2 - a_vo_tmp;
 8006ee6:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8006eea:	f04f 0000 	mov.w	r0, #0
 8006eee:	4989      	ldr	r1, [pc, #548]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 8006ef0:	f7f9 fcac 	bl	800084c <__aeabi_ddiv>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4619      	mov	r1, r3
 8006efc:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8006f00:	f7f9 f9c2 	bl	8000288 <__aeabi_dsub>
 8006f04:	4602      	mov	r2, r0
 8006f06:	460b      	mov	r3, r1
 8006f08:	e9c7 2398 	strd	r2, r3, [r7, #608]	; 0x260
  yCovSqrt = exp(-0.1 / (2.0 * rtb_Rb * rtb_Cbulk));
 8006f0c:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	f7f9 f9ba 	bl	800028c <__adddf3>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4610      	mov	r0, r2
 8006f1e:	4619      	mov	r1, r3
 8006f20:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8006f24:	f7f9 fb68 	bl	80005f8 <__aeabi_dmul>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	a16e      	add	r1, pc, #440	; (adr r1, 80070e8 <RC_Model_KF_vout_for_MCU_step+0x320>)
 8006f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f32:	f7f9 fc8b 	bl	800084c <__aeabi_ddiv>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	ec43 2b17 	vmov	d7, r2, r3
 8006f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8006f42:	eef0 0a67 	vmov.f32	s1, s15
 8006f46:	f009 fdd7 	bl	8010af8 <exp>
 8006f4a:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
  scale = exp(-0.1 / (2.0 * rtb_Rb * rtb_Csurface));
 8006f4e:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	f7f9 f999 	bl	800028c <__adddf3>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4610      	mov	r0, r2
 8006f60:	4619      	mov	r1, r3
 8006f62:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8006f66:	f7f9 fb47 	bl	80005f8 <__aeabi_dmul>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	a15e      	add	r1, pc, #376	; (adr r1, 80070e8 <RC_Model_KF_vout_for_MCU_step+0x320>)
 8006f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f74:	f7f9 fc6a 	bl	800084c <__aeabi_ddiv>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	ec43 2b17 	vmov	d7, r2, r3
 8006f80:	eeb0 0a47 	vmov.f32	s0, s14
 8006f84:	eef0 0a67 	vmov.f32	s1, s15
 8006f88:	f009 fdb6 	bl	8010af8 <exp>
 8006f8c:	ed87 0b96 	vstr	d0, [r7, #600]	; 0x258
  absxk = exp(-a_vo * 0.1);
 8006f90:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8006f9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006f9e:	607b      	str	r3, [r7, #4]
 8006fa0:	a353      	add	r3, pc, #332	; (adr r3, 80070f0 <RC_Model_KF_vout_for_MCU_step+0x328>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	ec43 2b17 	vmov	d7, r2, r3
 8006fb6:	eeb0 0a47 	vmov.f32	s0, s14
 8006fba:	eef0 0a67 	vmov.f32	s1, s15
 8006fbe:	f009 fd9b 	bl	8010af8 <exp>
 8006fc2:	ed87 0b94 	vstr	d0, [r7, #592]	; 0x250
  rtb_A[0] = yCovSqrt;
 8006fc6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006fca:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8006fce:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006fd2:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_A[3] = 1.0 - yCovSqrt;
 8006fd6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8006fda:	f04f 0000 	mov.w	r0, #0
 8006fde:	494d      	ldr	r1, [pc, #308]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 8006fe0:	f7f9 f952 	bl	8000288 <__aeabi_dsub>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8006fec:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8006ff0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  rtb_A[6] = 0.0;
 8006ff4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8006ff8:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
  rtb_A[1] = 1.0 - scale;
 8007008:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800700c:	f04f 0000 	mov.w	r0, #0
 8007010:	4940      	ldr	r1, [pc, #256]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 8007012:	f7f9 f939 	bl	8000288 <__aeabi_dsub>
 8007016:	4602      	mov	r2, r0
 8007018:	460b      	mov	r3, r1
 800701a:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800701e:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8007022:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_A[4] = scale;
 8007026:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800702a:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 800702e:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 8007032:	e9c1 2308 	strd	r2, r3, [r1, #32]
  rtb_A[7] = 0.0;
 8007036:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800703a:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  rtb_A[2] = (-1.0 / Product3_idx_2 + a_vo_tmp) * (1.0 / a_vo * (absxk - 1.0));
 800704a:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 800704e:	f04f 0000 	mov.w	r0, #0
 8007052:	4931      	ldr	r1, [pc, #196]	; (8007118 <RC_Model_KF_vout_for_MCU_step+0x350>)
 8007054:	f7f9 fbfa 	bl	800084c <__aeabi_ddiv>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4610      	mov	r0, r2
 800705e:	4619      	mov	r1, r3
 8007060:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8007064:	f7f9 f912 	bl	800028c <__adddf3>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4690      	mov	r8, r2
 800706e:	4699      	mov	r9, r3
 8007070:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8007074:	f04f 0000 	mov.w	r0, #0
 8007078:	4926      	ldr	r1, [pc, #152]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 800707a:	f7f9 fbe7 	bl	800084c <__aeabi_ddiv>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	4692      	mov	sl, r2
 8007084:	469b      	mov	fp, r3
 8007086:	f04f 0200 	mov.w	r2, #0
 800708a:	4b22      	ldr	r3, [pc, #136]	; (8007114 <RC_Model_KF_vout_for_MCU_step+0x34c>)
 800708c:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	; 0x250
 8007090:	f7f9 f8fa 	bl	8000288 <__aeabi_dsub>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4650      	mov	r0, sl
 800709a:	4659      	mov	r1, fp
 800709c:	f7f9 faac 	bl	80005f8 <__aeabi_dmul>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4640      	mov	r0, r8
 80070a6:	4649      	mov	r1, r9
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80070b4:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 80070b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
  rtb_A[5] = 0.0;
 80070bc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80070c0:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80070c4:	f04f 0200 	mov.w	r2, #0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  rtb_A[8] = absxk;
 80070d0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80070d4:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80070d8:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80070dc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
   *  Constant: '<S23>/Bbar_'
   *  Constant: '<S23>/Qbar_'
   *  Constant: '<S23>/Rbar_'
   *  Delay: '<S1>/MemoryP'
   */
  yCovSqrt = qrFactor(rtb_C, rtDW.MemoryP_DSTATE, 1.0);
 80070e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80070e4:	e01a      	b.n	800711c <RC_Model_KF_vout_for_MCU_step+0x354>
 80070e6:	bf00      	nop
 80070e8:	9999999a 	.word	0x9999999a
 80070ec:	bfb99999 	.word	0xbfb99999
 80070f0:	9999999a 	.word	0x9999999a
 80070f4:	3fb99999 	.word	0x3fb99999
 80070f8:	20000200 	.word	0x20000200
 80070fc:	08011148 	.word	0x08011148
 8007100:	08011190 	.word	0x08011190
 8007104:	080111c8 	.word	0x080111c8
 8007108:	08011200 	.word	0x08011200
 800710c:	08011238 	.word	0x08011238
 8007110:	08011270 	.word	0x08011270
 8007114:	3ff00000 	.word	0x3ff00000
 8007118:	bff00000 	.word	0xbff00000
 800711c:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8007340 <RC_Model_KF_vout_for_MCU_step+0x578>
 8007120:	4989      	ldr	r1, [pc, #548]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 8007122:	4618      	mov	r0, r3
 8007124:	f7fa fba4 	bl	8001870 <qrFactor>
 8007128:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
  for (j = 0; j < 3; j++) {
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007132:	e0fb      	b.n	800732c <RC_Model_KF_vout_for_MCU_step+0x564>
    Hnew[j] = 0.0;
 8007134:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007138:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 800713c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	18d1      	adds	r1, r2, r3
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8007150:	2300      	movs	r3, #0
 8007152:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8007156:	e0df      	b.n	8007318 <RC_Model_KF_vout_for_MCU_step+0x550>
      i = 3 * iAcol + j;
 8007158:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 800715c:	4613      	mov	r3, r2
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	4413      	add	r3, r2
 8007162:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007166:	4413      	add	r3, r2
 8007168:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
      Ss[i] = 0.0;
 800716c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007170:	00db      	lsls	r3, r3, #3
 8007172:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007176:	f107 0208 	add.w	r2, r7, #8
 800717a:	4413      	add	r3, r2
 800717c:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 8007180:	f04f 0200 	mov.w	r2, #0
 8007184:	f04f 0300 	mov.w	r3, #0
 8007188:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[i] += rtDW.MemoryP_DSTATE[j] * rtDW.MemoryP_DSTATE[iAcol];
 800718c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007196:	f107 0208 	add.w	r2, r7, #8
 800719a:	4413      	add	r3, r2
 800719c:	3bc0      	subs	r3, #192	; 0xc0
 800719e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071a2:	4a69      	ldr	r2, [pc, #420]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 80071a4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80071a8:	00db      	lsls	r3, r3, #3
 80071aa:	4413      	add	r3, r2
 80071ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071b0:	4a65      	ldr	r2, [pc, #404]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 80071b2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4413      	add	r3, r2
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 fa1b 	bl	80005f8 <__aeabi_dmul>
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	4640      	mov	r0, r8
 80071c8:	4649      	mov	r1, r9
 80071ca:	f7f9 f85f 	bl	800028c <__adddf3>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80071d6:	00c9      	lsls	r1, r1, #3
 80071d8:	f501 712e 	add.w	r1, r1, #696	; 0x2b8
 80071dc:	f107 0008 	add.w	r0, r7, #8
 80071e0:	4401      	add	r1, r0
 80071e2:	39c0      	subs	r1, #192	; 0xc0
 80071e4:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[i] += rtDW.MemoryP_DSTATE[j + 3] * rtDW.MemoryP_DSTATE[iAcol + 3];
 80071e8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80071f2:	f107 0208 	add.w	r2, r7, #8
 80071f6:	4413      	add	r3, r2
 80071f8:	3bc0      	subs	r3, #192	; 0xc0
 80071fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071fe:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007202:	3303      	adds	r3, #3
 8007204:	4a50      	ldr	r2, [pc, #320]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4413      	add	r3, r2
 800720a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800720e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007212:	3303      	adds	r3, #3
 8007214:	4a4c      	ldr	r2, [pc, #304]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	4413      	add	r3, r2
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f9eb 	bl	80005f8 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4640      	mov	r0, r8
 8007228:	4649      	mov	r1, r9
 800722a:	f7f9 f82f 	bl	800028c <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007236:	00c9      	lsls	r1, r1, #3
 8007238:	f501 712e 	add.w	r1, r1, #696	; 0x2b8
 800723c:	f107 0008 	add.w	r0, r7, #8
 8007240:	4401      	add	r1, r0
 8007242:	39c0      	subs	r1, #192	; 0xc0
 8007244:	e9c1 2300 	strd	r2, r3, [r1]
      Ss[i] += rtDW.MemoryP_DSTATE[j + 6] * rtDW.MemoryP_DSTATE[iAcol + 6];
 8007248:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007252:	f107 0208 	add.w	r2, r7, #8
 8007256:	4413      	add	r3, r2
 8007258:	3bc0      	subs	r3, #192	; 0xc0
 800725a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800725e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007262:	3306      	adds	r3, #6
 8007264:	4a38      	ldr	r2, [pc, #224]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4413      	add	r3, r2
 800726a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800726e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007272:	3306      	adds	r3, #6
 8007274:	4a34      	ldr	r2, [pc, #208]	; (8007348 <RC_Model_KF_vout_for_MCU_step+0x580>)
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	4413      	add	r3, r2
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f7f9 f9bb 	bl	80005f8 <__aeabi_dmul>
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	4640      	mov	r0, r8
 8007288:	4649      	mov	r1, r9
 800728a:	f7f8 ffff 	bl	800028c <__adddf3>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007296:	00c9      	lsls	r1, r1, #3
 8007298:	f501 712e 	add.w	r1, r1, #696	; 0x2b8
 800729c:	f107 0008 	add.w	r0, r7, #8
 80072a0:	4401      	add	r1, r0
 80072a2:	39c0      	subs	r1, #192	; 0xc0
 80072a4:	e9c1 2300 	strd	r2, r3, [r1]
      Hnew[j] += Ss[i] * rtb_C[iAcol];
 80072a8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80072ac:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 80072b0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	4413      	add	r3, r2
 80072b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80072bc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80072c6:	f107 0208 	add.w	r2, r7, #8
 80072ca:	4413      	add	r3, r2
 80072cc:	3bc0      	subs	r3, #192	; 0xc0
 80072ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072d2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80072d6:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 80072da:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e6:	f7f9 f987 	bl	80005f8 <__aeabi_dmul>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4640      	mov	r0, r8
 80072f0:	4649      	mov	r1, r9
 80072f2:	f7f8 ffcb 	bl	800028c <__adddf3>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80072fe:	f5a1 7010 	sub.w	r0, r1, #576	; 0x240
 8007302:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 8007306:	00c9      	lsls	r1, r1, #3
 8007308:	4401      	add	r1, r0
 800730a:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 800730e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007312:	3301      	adds	r3, #1
 8007314:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8007318:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800731c:	2b02      	cmp	r3, #2
 800731e:	f77f af1b 	ble.w	8007158 <RC_Model_KF_vout_for_MCU_step+0x390>
  for (j = 0; j < 3; j++) {
 8007322:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007326:	3301      	adds	r3, #1
 8007328:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800732c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007330:	2b02      	cmp	r3, #2
 8007332:	f77f aeff 	ble.w	8007134 <RC_Model_KF_vout_for_MCU_step+0x36c>
    }
  }

  for (j = 0; j < 3; j++) {
 8007336:	2300      	movs	r3, #0
 8007338:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800733c:	e063      	b.n	8007406 <RC_Model_KF_vout_for_MCU_step+0x63e>
 800733e:	bf00      	nop
 8007340:	00000000 	.word	0x00000000
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	20000200 	.word	0x20000200
    b_c[j] = (rtb_A[j + 3] * Hnew[1] + rtb_A[j] * Hnew[0]) + rtb_A[j + 6] *
 800734c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007350:	3303      	adds	r3, #3
 8007352:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007356:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	4413      	add	r3, r2
 800735e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007362:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007366:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800736a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800736e:	f7f9 f943 	bl	80005f8 <__aeabi_dmul>
 8007372:	4602      	mov	r2, r0
 8007374:	460b      	mov	r3, r1
 8007376:	4690      	mov	r8, r2
 8007378:	4699      	mov	r9, r3
 800737a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800737e:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8007382:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	4413      	add	r3, r2
 800738a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800738e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007392:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f7f9 f92d 	bl	80005f8 <__aeabi_dmul>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f8 ff71 	bl	800028c <__adddf3>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4690      	mov	r8, r2
 80073b0:	4699      	mov	r9, r3
 80073b2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80073b6:	3306      	adds	r3, #6
 80073b8:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80073bc:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4413      	add	r3, r2
 80073c4:	e9d3 0100 	ldrd	r0, r1, [r3]
      Hnew[2];
 80073c8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80073cc:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80073d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    b_c[j] = (rtb_A[j + 3] * Hnew[1] + rtb_A[j] * Hnew[0]) + rtb_A[j + 6] *
 80073d4:	f7f9 f910 	bl	80005f8 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4640      	mov	r0, r8
 80073de:	4649      	mov	r1, r9
 80073e0:	f7f8 ff54 	bl	800028c <__adddf3>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80073ec:	f5a1 7016 	sub.w	r0, r1, #600	; 0x258
 80073f0:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 80073f4:	00c9      	lsls	r1, r1, #3
 80073f6:	4401      	add	r1, r0
 80073f8:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 3; j++) {
 80073fc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007400:	3301      	adds	r3, #1
 8007402:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007406:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800740a:	2b02      	cmp	r3, #2
 800740c:	dd9e      	ble.n	800734c <RC_Model_KF_vout_for_MCU_step+0x584>
  }

  trisolve(yCovSqrt, b_c);
 800740e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007412:	4618      	mov	r0, r3
 8007414:	ed97 0bae 	vldr	d0, [r7, #696]	; 0x2b8
 8007418:	f7fa fb78 	bl	8001b0c <trisolve>
  rtb_L[0] = b_c[0];
 800741c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007420:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800742c:	f5a1 7122 	sub.w	r1, r1, #648	; 0x288
 8007430:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_L[1] = b_c[1];
 8007434:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007438:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800743c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007440:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007444:	f5a1 7122 	sub.w	r1, r1, #648	; 0x288
 8007448:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_L[2] = b_c[2];
 800744c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007450:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8007454:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007458:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800745c:	f5a1 7122 	sub.w	r1, r1, #648	; 0x288
 8007460:	e9c1 2304 	strd	r2, r3, [r1, #16]
  trisolve(yCovSqrt, rtb_L);
 8007464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007468:	4618      	mov	r0, r3
 800746a:	ed97 0bae 	vldr	d0, [r7, #696]	; 0x2b8
 800746e:	f7fa fb4d 	bl	8001b0c <trisolve>
  b_c[0] = Hnew[0];
 8007472:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007476:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007482:	f5a1 7116 	sub.w	r1, r1, #600	; 0x258
 8007486:	e9c1 2300 	strd	r2, r3, [r1]
  b_c[1] = Hnew[1];
 800748a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800748e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8007492:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007496:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800749a:	f5a1 7116 	sub.w	r1, r1, #600	; 0x258
 800749e:	e9c1 2302 	strd	r2, r3, [r1, #8]
  b_c[2] = Hnew[2];
 80074a2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80074a6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80074aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80074ae:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80074b2:	f5a1 7116 	sub.w	r1, r1, #600	; 0x258
 80074b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
  trisolve(yCovSqrt, b_c);
 80074ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80074be:	4618      	mov	r0, r3
 80074c0:	ed97 0bae 	vldr	d0, [r7, #696]	; 0x2b8
 80074c4:	f7fa fb22 	bl	8001b0c <trisolve>
  rtb_M[0] = b_c[0];
 80074c8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80074cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80074d8:	f5a1 7128 	sub.w	r1, r1, #672	; 0x2a0
 80074dc:	e9c1 2300 	strd	r2, r3, [r1]
  rtb_M[1] = b_c[1];
 80074e0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80074e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80074e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80074ec:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80074f0:	f5a1 7128 	sub.w	r1, r1, #672	; 0x2a0
 80074f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
  rtb_M[2] = b_c[2];
 80074f8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80074fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8007500:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007504:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007508:	f5a1 7128 	sub.w	r1, r1, #672	; 0x2a0
 800750c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  trisolve(yCovSqrt, rtb_M);
 8007510:	f107 0320 	add.w	r3, r7, #32
 8007514:	4618      	mov	r0, r3
 8007516:	ed97 0bae 	vldr	d0, [r7, #696]	; 0x2b8
 800751a:	f7fa faf7 	bl	8001b0c <trisolve>
  for (i = 0; i < 9; i++) {
 800751e:	2300      	movs	r3, #0
 8007520:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8007524:	e025      	b.n	8007572 <RC_Model_KF_vout_for_MCU_step+0x7aa>
    Ss[i] = 0.0;
 8007526:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007530:	f107 0208 	add.w	r2, r7, #8
 8007534:	4413      	add	r3, r2
 8007536:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 800753a:	f04f 0200 	mov.w	r2, #0
 800753e:	f04f 0300 	mov.w	r3, #0
 8007542:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_Zs[i] = rtDW.MemoryP_DSTATE[i];
 8007546:	4ab1      	ldr	r2, [pc, #708]	; (800780c <RC_Model_KF_vout_for_MCU_step+0xa44>)
 8007548:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	4413      	add	r3, r2
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007558:	f5a1 700a 	sub.w	r0, r1, #552	; 0x228
 800755c:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007560:	00c9      	lsls	r1, r1, #3
 8007562:	4401      	add	r1, r0
 8007564:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 9; i++) {
 8007568:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800756c:	3301      	adds	r3, #1
 800756e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8007572:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007576:	2b08      	cmp	r3, #8
 8007578:	ddd5      	ble.n	8007526 <RC_Model_KF_vout_for_MCU_step+0x75e>
  }

  Ss[0] = 1.0;
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	4ba4      	ldr	r3, [pc, #656]	; (8007810 <RC_Model_KF_vout_for_MCU_step+0xa48>)
 8007580:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
  Ss[4] = 1.0;
 8007584:	f04f 0200 	mov.w	r2, #0
 8007588:	4ba1      	ldr	r3, [pc, #644]	; (8007810 <RC_Model_KF_vout_for_MCU_step+0xa48>)
 800758a:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
  Ss[8] = 1.0;
 800758e:	f04f 0200 	mov.w	r2, #0
 8007592:	4b9f      	ldr	r3, [pc, #636]	; (8007810 <RC_Model_KF_vout_for_MCU_step+0xa48>)
 8007594:	e9c7 2390 	strd	r2, r3, [r7, #576]	; 0x240
  for (j = 0; j < 3; j++) {
 8007598:	2300      	movs	r3, #0
 800759a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800759e:	e0b3      	b.n	8007708 <RC_Model_KF_vout_for_MCU_step+0x940>
    yCovSqrt = rtb_C[j];
 80075a0:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80075a4:	f5a3 721c 	sub.w	r2, r3, #624	; 0x270
 80075a8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	4413      	add	r3, r2
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
    rtb_SNew[3 * j] = Ss[3 * j] - rtb_M[0] * yCovSqrt;
 80075b8:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80075c8:	f107 0208 	add.w	r2, r7, #8
 80075cc:	4413      	add	r3, r2
 80075ce:	3bc0      	subs	r3, #192	; 0xc0
 80075d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075d4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80075d8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80075dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075e0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80075e4:	f7f9 f808 	bl	80005f8 <__aeabi_dmul>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4610      	mov	r0, r2
 80075ee:	4619      	mov	r1, r3
 80075f0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80075f4:	4613      	mov	r3, r2
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	189e      	adds	r6, r3, r2
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4640      	mov	r0, r8
 8007600:	4649      	mov	r1, r9
 8007602:	f7f8 fe41 	bl	8000288 <__aeabi_dsub>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800760e:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 8007612:	00f1      	lsls	r1, r6, #3
 8007614:	4401      	add	r1, r0
 8007616:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * j + 1;
 800761a:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800761e:	4613      	mov	r3, r2
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	4413      	add	r3, r2
 8007624:	3301      	adds	r3, #1
 8007626:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    rtb_SNew[iAcol] = Ss[iAcol] - rtb_M[1] * yCovSqrt;
 800762a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800762e:	00db      	lsls	r3, r3, #3
 8007630:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007634:	f107 0208 	add.w	r2, r7, #8
 8007638:	4413      	add	r3, r2
 800763a:	3bc0      	subs	r3, #192	; 0xc0
 800763c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007640:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007644:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8007648:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800764c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4640      	mov	r0, r8
 800765a:	4649      	mov	r1, r9
 800765c:	f7f8 fe14 	bl	8000288 <__aeabi_dsub>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007668:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 800766c:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8007670:	00c9      	lsls	r1, r1, #3
 8007672:	4401      	add	r1, r0
 8007674:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * j + 2;
 8007678:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800767c:	4613      	mov	r3, r2
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	4413      	add	r3, r2
 8007682:	3302      	adds	r3, #2
 8007684:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    rtb_SNew[iAcol] = Ss[iAcol] - rtb_M[2] * yCovSqrt;
 8007688:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007692:	f107 0208 	add.w	r2, r7, #8
 8007696:	4413      	add	r3, r2
 8007698:	3bc0      	subs	r3, #192	; 0xc0
 800769a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800769e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80076a2:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80076a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076aa:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f8 fde5 	bl	8000288 <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80076c6:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 80076ca:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 80076ce:	00c9      	lsls	r1, r1, #3
 80076d0:	4401      	add	r1, r0
 80076d2:	e9c1 2300 	strd	r2, r3, [r1]
    Hnew[j] = rtb_M[j];
 80076d6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80076da:	f5a3 7228 	sub.w	r2, r3, #672	; 0x2a0
 80076de:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	4413      	add	r3, r2
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80076ee:	f5a1 7010 	sub.w	r0, r1, #576	; 0x240
 80076f2:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 80076f6:	00c9      	lsls	r1, r1, #3
 80076f8:	4401      	add	r1, r0
 80076fa:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 3; j++) {
 80076fe:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007702:	3301      	adds	r3, #1
 8007704:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007708:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800770c:	2b02      	cmp	r3, #2
 800770e:	f77f af47 	ble.w	80075a0 <RC_Model_KF_vout_for_MCU_step+0x7d8>
  }

  qrFactor_j(rtb_SNew, rtb_Zs, Hnew);
 8007712:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8007716:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800771a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa fc70 	bl	8002004 <qrFactor_j>
  memcpy(&Ss[0], &rtb_Zs[0], 9U * sizeof(real_T));
 8007724:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8007728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800772c:	2248      	movs	r2, #72	; 0x48
 800772e:	4618      	mov	r0, r3
 8007730:	f004 ff3e 	bl	800c5b0 <memcpy>
  for (j = 0; j < 3; j++) {
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800773a:	e056      	b.n	80077ea <RC_Model_KF_vout_for_MCU_step+0xa22>
    rtb_SNew[3 * j] = rtb_A[3 * j];
 800773c:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007740:	4613      	mov	r3, r2
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	1898      	adds	r0, r3, r2
 8007746:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800774a:	4613      	mov	r3, r2
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	1899      	adds	r1, r3, r2
 8007750:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007754:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8007758:	00c3      	lsls	r3, r0, #3
 800775a:	4413      	add	r3, r2
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 8007764:	f5a0 70cc 	sub.w	r0, r0, #408	; 0x198
 8007768:	00c9      	lsls	r1, r1, #3
 800776a:	4401      	add	r1, r0
 800776c:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * j + 1;
 8007770:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	3301      	adds	r3, #1
 800777c:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    rtb_SNew[iAcol] = rtb_A[iAcol];
 8007780:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007784:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8007788:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4413      	add	r3, r2
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007798:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 800779c:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 80077a0:	00c9      	lsls	r1, r1, #3
 80077a2:	4401      	add	r1, r0
 80077a4:	e9c1 2300 	strd	r2, r3, [r1]
    iAcol = 3 * j + 2;
 80077a8:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80077ac:	4613      	mov	r3, r2
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	4413      	add	r3, r2
 80077b2:	3302      	adds	r3, #2
 80077b4:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    rtb_SNew[iAcol] = rtb_A[iAcol];
 80077b8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80077bc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80077c0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	4413      	add	r3, r2
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80077d0:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 80077d4:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 80077d8:	00c9      	lsls	r1, r1, #3
 80077da:	4401      	add	r1, r0
 80077dc:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 3; j++) {
 80077e0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80077e4:	3301      	adds	r3, #1
 80077e6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80077ea:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	dda4      	ble.n	800773c <RC_Model_KF_vout_for_MCU_step+0x974>
  }

  qrFactor_jq(rtb_SNew, Ss, rtConstP.Qbar_Value);
 80077f2:	f507 7100 	add.w	r1, r7, #512	; 0x200
 80077f6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80077fa:	4a06      	ldr	r2, [pc, #24]	; (8007814 <RC_Model_KF_vout_for_MCU_step+0xa4c>)
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fb fa71 	bl	8002ce4 <qrFactor_jq>
  for (j = 0; j < 3; j++) {
 8007802:	2300      	movs	r3, #0
 8007804:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007808:	e057      	b.n	80078ba <RC_Model_KF_vout_for_MCU_step+0xaf2>
 800780a:	bf00      	nop
 800780c:	20000200 	.word	0x20000200
 8007810:	3ff00000 	.word	0x3ff00000
 8007814:	08011100 	.word	0x08011100
    rtb_SNew[3 * j] = Ss[j];
 8007818:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800781c:	4613      	mov	r3, r2
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	1899      	adds	r1, r3, r2
 8007822:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800782c:	f107 0208 	add.w	r2, r7, #8
 8007830:	4413      	add	r3, r2
 8007832:	3bc0      	subs	r3, #192	; 0xc0
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 800783c:	f5a0 70cc 	sub.w	r0, r0, #408	; 0x198
 8007840:	00c9      	lsls	r1, r1, #3
 8007842:	4401      	add	r1, r0
 8007844:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_SNew[3 * j + 1] = Ss[j + 3];
 8007848:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800784c:	1cd8      	adds	r0, r3, #3
 800784e:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007852:	4613      	mov	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	1c59      	adds	r1, r3, #1
 800785a:	00c3      	lsls	r3, r0, #3
 800785c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007860:	f107 0208 	add.w	r2, r7, #8
 8007864:	4413      	add	r3, r2
 8007866:	3bc0      	subs	r3, #192	; 0xc0
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 8007870:	f5a0 70cc 	sub.w	r0, r0, #408	; 0x198
 8007874:	00c9      	lsls	r1, r1, #3
 8007876:	4401      	add	r1, r0
 8007878:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_SNew[3 * j + 2] = Ss[j + 6];
 800787c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007880:	1d98      	adds	r0, r3, #6
 8007882:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007886:	4613      	mov	r3, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	4413      	add	r3, r2
 800788c:	1c99      	adds	r1, r3, #2
 800788e:	00c3      	lsls	r3, r0, #3
 8007890:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007894:	f107 0208 	add.w	r2, r7, #8
 8007898:	4413      	add	r3, r2
 800789a:	3bc0      	subs	r3, #192	; 0xc0
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 80078a4:	f5a0 70cc 	sub.w	r0, r0, #408	; 0x198
 80078a8:	00c9      	lsls	r1, r1, #3
 80078aa:	4401      	add	r1, r0
 80078ac:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 3; j++) {
 80078b0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80078b4:	3301      	adds	r3, #1
 80078b6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80078ba:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80078be:	2b02      	cmp	r3, #2
 80078c0:	ddaa      	ble.n	8007818 <RC_Model_KF_vout_for_MCU_step+0xa50>
  }

  for (j = 0; j < 3; j++) {
 80078c2:	2300      	movs	r3, #0
 80078c4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80078c8:	e01b      	b.n	8007902 <RC_Model_KF_vout_for_MCU_step+0xb3a>
    if (1 - j >= 0) {
 80078ca:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80078ce:	f1c3 0301 	rsb	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	db10      	blt.n	80078f8 <RC_Model_KF_vout_for_MCU_step+0xb30>
      memset(&rtb_SNew[(j << 2) + 1], 0, (uint32_T)((1 - j) + 1) * sizeof(real_T));
 80078d6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	3301      	adds	r3, #1
 80078de:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80078e2:	00db      	lsls	r3, r3, #3
 80078e4:	18d0      	adds	r0, r2, r3
 80078e6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80078ea:	f1c3 0302 	rsb	r3, r3, #2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	461a      	mov	r2, r3
 80078f2:	2100      	movs	r1, #0
 80078f4:	f004 fe6a 	bl	800c5cc <memset>
  for (j = 0; j < 3; j++) {
 80078f8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80078fc:	3301      	adds	r3, #1
 80078fe:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007902:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007906:	2b02      	cmp	r3, #2
 8007908:	dddf      	ble.n	80078ca <RC_Model_KF_vout_for_MCU_step+0xb02>
    }
  }

  errorCondition = (rtb_SNew[0] == 0.0);
 800790a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800790e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007916:	2301      	movs	r3, #1
 8007918:	461e      	mov	r6, r3
 800791a:	f04f 0200 	mov.w	r2, #0
 800791e:	f04f 0300 	mov.w	r3, #0
 8007922:	f7f9 f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <RC_Model_KF_vout_for_MCU_step+0xb68>
 800792c:	2300      	movs	r3, #0
 800792e:	461e      	mov	r6, r3
 8007930:	b2f3      	uxtb	r3, r6
 8007932:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
  if (!errorCondition) {
 8007936:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 800793a:	2b00      	cmp	r3, #0
 800793c:	d115      	bne.n	800796a <RC_Model_KF_vout_for_MCU_step+0xba2>
    errorCondition = (rtb_SNew[4] == 0.0);
 800793e:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007942:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007946:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800794a:	2301      	movs	r3, #1
 800794c:	461e      	mov	r6, r3
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	f7f9 f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <RC_Model_KF_vout_for_MCU_step+0xb9c>
 8007960:	2300      	movs	r3, #0
 8007962:	461e      	mov	r6, r3
 8007964:	b2f3      	uxtb	r3, r6
 8007966:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
  }

  if (!errorCondition) {
 800796a:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 800796e:	2b00      	cmp	r3, #0
 8007970:	d115      	bne.n	800799e <RC_Model_KF_vout_for_MCU_step+0xbd6>
    errorCondition = (rtb_SNew[8] == 0.0);
 8007972:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007976:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800797a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800797e:	2301      	movs	r3, #1
 8007980:	461e      	mov	r6, r3
 8007982:	f04f 0200 	mov.w	r2, #0
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	f7f9 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <RC_Model_KF_vout_for_MCU_step+0xbd0>
 8007994:	2300      	movs	r3, #0
 8007996:	461e      	mov	r6, r3
 8007998:	b2f3      	uxtb	r3, r6
 800799a:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
  }

  if (errorCondition) {
 800799e:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 82f6 	beq.w	8007f94 <RC_Model_KF_vout_for_MCU_step+0x11cc>
    boolean_T exitg2;
    for (j = 0; j < 3; j++) {
 80079a8:	2300      	movs	r3, #0
 80079aa:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80079ae:	e0d6      	b.n	8007b5e <RC_Model_KF_vout_for_MCU_step+0xd96>
      for (iAcol = 0; iAcol < 3; iAcol++) {
 80079b0:	2300      	movs	r3, #0
 80079b2:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 80079b6:	e0c8      	b.n	8007b4a <RC_Model_KF_vout_for_MCU_step+0xd82>
        i = 3 * iAcol + j;
 80079b8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 80079bc:	4613      	mov	r3, r2
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	4413      	add	r3, r2
 80079c2:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80079c6:	4413      	add	r3, r2
 80079c8:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
        rtb_SNew_0[i] = 0.0;
 80079cc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80079d0:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80079d4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	18d1      	adds	r1, r2, r3
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	f04f 0300 	mov.w	r3, #0
 80079e4:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_SNew_0[i] += rtb_SNew[3 * j] * rtb_SNew[3 * iAcol];
 80079e8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80079ec:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 80079f0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80079f4:	00db      	lsls	r3, r3, #3
 80079f6:	4413      	add	r3, r2
 80079f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079fc:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007a00:	4613      	mov	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	4413      	add	r3, r2
 8007a06:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007a0a:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4413      	add	r3, r2
 8007a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a16:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8007a1a:	4613      	mov	r3, r2
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	4413      	add	r3, r2
 8007a20:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007a24:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7f8 fde2 	bl	80005f8 <__aeabi_dmul>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4640      	mov	r0, r8
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	f7f8 fc26 	bl	800028c <__adddf3>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007a48:	f5a1 70f0 	sub.w	r0, r1, #480	; 0x1e0
 8007a4c:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007a50:	00c9      	lsls	r1, r1, #3
 8007a52:	4401      	add	r1, r0
 8007a54:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_SNew_0[i] += rtb_SNew[3 * j + 1] * rtb_SNew[3 * iAcol + 1];
 8007a58:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007a5c:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007a60:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4413      	add	r3, r2
 8007a68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a6c:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	3301      	adds	r3, #1
 8007a78:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007a7c:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	4413      	add	r3, r2
 8007a84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a88:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	005b      	lsls	r3, r3, #1
 8007a90:	4413      	add	r3, r2
 8007a92:	3301      	adds	r3, #1
 8007a94:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007a98:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007a9c:	00db      	lsls	r3, r3, #3
 8007a9e:	4413      	add	r3, r2
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4640      	mov	r0, r8
 8007aae:	4649      	mov	r1, r9
 8007ab0:	f7f8 fbec 	bl	800028c <__adddf3>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007abc:	f5a1 70f0 	sub.w	r0, r1, #480	; 0x1e0
 8007ac0:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007ac4:	00c9      	lsls	r1, r1, #3
 8007ac6:	4401      	add	r1, r0
 8007ac8:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_SNew_0[i] += rtb_SNew[3 * j + 2] * rtb_SNew[3 * iAcol + 2];
 8007acc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007ad0:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007ad4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4413      	add	r3, r2
 8007adc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ae0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	3302      	adds	r3, #2
 8007aec:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007af0:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007af4:	00db      	lsls	r3, r3, #3
 8007af6:	4413      	add	r3, r2
 8007af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007afc:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8007b00:	4613      	mov	r3, r2
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	4413      	add	r3, r2
 8007b06:	3302      	adds	r3, #2
 8007b08:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007b0c:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4413      	add	r3, r2
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fd6e 	bl	80005f8 <__aeabi_dmul>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4640      	mov	r0, r8
 8007b22:	4649      	mov	r1, r9
 8007b24:	f7f8 fbb2 	bl	800028c <__adddf3>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007b30:	f5a1 70f0 	sub.w	r0, r1, #480	; 0x1e0
 8007b34:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007b38:	00c9      	lsls	r1, r1, #3
 8007b3a:	4401      	add	r1, r0
 8007b3c:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007b40:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007b44:	3301      	adds	r3, #1
 8007b46:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8007b4a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	f77f af32 	ble.w	80079b8 <RC_Model_KF_vout_for_MCU_step+0xbf0>
    for (j = 0; j < 3; j++) {
 8007b54:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007b58:	3301      	adds	r3, #1
 8007b5a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007b5e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	f77f af24 	ble.w	80079b0 <RC_Model_KF_vout_for_MCU_step+0xbe8>
      }
    }

    for (j = 0; j < 9; j++) {
 8007b68:	2300      	movs	r3, #0
 8007b6a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007b6e:	e033      	b.n	8007bd8 <RC_Model_KF_vout_for_MCU_step+0xe10>
      yCovSqrt = rtb_SNew_0[j];
 8007b70:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007b74:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007b78:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4413      	add	r3, r2
 8007b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b84:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
      if (errorCondition && (rtIsInf(yCovSqrt) || rtIsNaN(yCovSqrt))) {
 8007b88:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d010      	beq.n	8007bb2 <RC_Model_KF_vout_for_MCU_step+0xdea>
 8007b90:	ed97 0bae 	vldr	d0, [r7, #696]	; 0x2b8
 8007b94:	f7f9 fab8 	bl	8001108 <rtIsInf>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <RC_Model_KF_vout_for_MCU_step+0xde4>
 8007b9e:	ed97 0bae 	vldr	d0, [r7, #696]	; 0x2b8
 8007ba2:	f7f9 fad5 	bl	8001150 <rtIsNaN>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <RC_Model_KF_vout_for_MCU_step+0xdea>
        errorCondition = false;
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
      }

      Ss[j] = yCovSqrt;
 8007bb2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007bbc:	f107 0208 	add.w	r2, r7, #8
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f1a3 01c0 	sub.w	r1, r3, #192	; 0xc0
 8007bc6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8007bca:	e9c1 2300 	strd	r2, r3, [r1]
    for (j = 0; j < 9; j++) {
 8007bce:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007bd8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	ddc7      	ble.n	8007b70 <RC_Model_KF_vout_for_MCU_step+0xda8>
    }

    if (errorCondition) {
 8007be0:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <RC_Model_KF_vout_for_MCU_step+0xe36>
      svd(Ss, a__1, s, rtb_SNew_0);
 8007be8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007bec:	f107 0208 	add.w	r2, r7, #8
 8007bf0:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8007bf4:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8007bf8:	f7fc fa9e 	bl	8004138 <svd>
 8007bfc:	e034      	b.n	8007c68 <RC_Model_KF_vout_for_MCU_step+0xea0>
    } else {
      s[0] = (rtNaN);
 8007bfe:	4bcb      	ldr	r3, [pc, #812]	; (8007f2c <RC_Model_KF_vout_for_MCU_step+0x1164>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007c08:	f5a1 712e 	sub.w	r1, r1, #696	; 0x2b8
 8007c0c:	e9c1 2300 	strd	r2, r3, [r1]
      s[1] = (rtNaN);
 8007c10:	4bc6      	ldr	r3, [pc, #792]	; (8007f2c <RC_Model_KF_vout_for_MCU_step+0x1164>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007c1a:	f5a1 712e 	sub.w	r1, r1, #696	; 0x2b8
 8007c1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      s[2] = (rtNaN);
 8007c22:	4bc2      	ldr	r3, [pc, #776]	; (8007f2c <RC_Model_KF_vout_for_MCU_step+0x1164>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007c2c:	f5a1 712e 	sub.w	r1, r1, #696	; 0x2b8
 8007c30:	e9c1 2304 	strd	r2, r3, [r1, #16]
      for (j = 0; j < 9; j++) {
 8007c34:	2300      	movs	r3, #0
 8007c36:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007c3a:	e011      	b.n	8007c60 <RC_Model_KF_vout_for_MCU_step+0xe98>
        rtb_SNew_0[j] = (rtNaN);
 8007c3c:	4bbb      	ldr	r3, [pc, #748]	; (8007f2c <RC_Model_KF_vout_for_MCU_step+0x1164>)
 8007c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c42:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007c46:	f5a1 70f0 	sub.w	r0, r1, #480	; 0x1e0
 8007c4a:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 8007c4e:	00c9      	lsls	r1, r1, #3
 8007c50:	4401      	add	r1, r0
 8007c52:	e9c1 2300 	strd	r2, r3, [r1]
      for (j = 0; j < 9; j++) {
 8007c56:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007c60:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	dde9      	ble.n	8007c3c <RC_Model_KF_vout_for_MCU_step+0xe74>
      }
    }

    memset(&Ss[0], 0, 9U * sizeof(real_T));
 8007c68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c6c:	2248      	movs	r2, #72	; 0x48
 8007c6e:	2100      	movs	r1, #0
 8007c70:	4618      	mov	r0, r3
 8007c72:	f004 fcab 	bl	800c5cc <memset>
    Ss[0] = s[0];
 8007c76:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007c7a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	e9c7 2380 	strd	r2, r3, [r7, #512]	; 0x200
    Ss[4] = s[1];
 8007c86:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007c8a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007c8e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007c92:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
    Ss[8] = s[2];
 8007c96:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007c9a:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 8007c9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007ca2:	e9c7 2390 	strd	r2, r3, [r7, #576]	; 0x240
    for (j = 0; j < 9; j++) {
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007cac:	e024      	b.n	8007cf8 <RC_Model_KF_vout_for_MCU_step+0xf30>
      Ss[j] = sqrt(Ss[j]);
 8007cae:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007cb8:	f107 0208 	add.w	r2, r7, #8
 8007cbc:	4413      	add	r3, r2
 8007cbe:	3bc0      	subs	r3, #192	; 0xc0
 8007cc0:	ed93 7b00 	vldr	d7, [r3]
 8007cc4:	eeb0 0a47 	vmov.f32	s0, s14
 8007cc8:	eef0 0a67 	vmov.f32	s1, s15
 8007ccc:	f008 ff5c 	bl	8010b88 <sqrt>
 8007cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8007cd4:	eef0 7a60 	vmov.f32	s15, s1
 8007cd8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007ce2:	f107 0208 	add.w	r2, r7, #8
 8007ce6:	4413      	add	r3, r2
 8007ce8:	3bc0      	subs	r3, #192	; 0xc0
 8007cea:	ed83 7b00 	vstr	d7, [r3]
    for (j = 0; j < 9; j++) {
 8007cee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007cf8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	ddd6      	ble.n	8007cae <RC_Model_KF_vout_for_MCU_step+0xee6>
    }

    for (j = 0; j < 3; j++) {
 8007d00:	2300      	movs	r3, #0
 8007d02:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007d06:	e0d0      	b.n	8007eaa <RC_Model_KF_vout_for_MCU_step+0x10e2>
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8007d0e:	e0c2      	b.n	8007e96 <RC_Model_KF_vout_for_MCU_step+0x10ce>
        i = 3 * iAcol + j;
 8007d10:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8007d14:	4613      	mov	r3, r2
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4413      	add	r3, r2
 8007d1a:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007d1e:	4413      	add	r3, r2
 8007d20:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
        rtb_SNew[i] = 0.0;
 8007d24:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007d28:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8007d2c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	18d1      	adds	r1, r2, r3
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_SNew[i] += Ss[3 * j] * rtb_SNew_0[iAcol];
 8007d40:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007d44:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8007d48:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007d4c:	00db      	lsls	r3, r3, #3
 8007d4e:	4413      	add	r3, r2
 8007d50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d54:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007d58:	4613      	mov	r3, r2
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	4413      	add	r3, r2
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007d64:	f107 0208 	add.w	r2, r7, #8
 8007d68:	4413      	add	r3, r2
 8007d6a:	3bc0      	subs	r3, #192	; 0xc0
 8007d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d70:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007d74:	f5a3 72f0 	sub.w	r2, r3, #480	; 0x1e0
 8007d78:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	4413      	add	r3, r2
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fc38 	bl	80005f8 <__aeabi_dmul>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4649      	mov	r1, r9
 8007d90:	f7f8 fa7c 	bl	800028c <__adddf3>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007d9c:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 8007da0:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007da4:	00c9      	lsls	r1, r1, #3
 8007da6:	4401      	add	r1, r0
 8007da8:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_SNew[i] += Ss[3 * j + 1] * rtb_SNew_0[iAcol + 3];
 8007dac:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007db0:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8007db4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	4413      	add	r3, r2
 8007dbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007dc0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	3301      	adds	r3, #1
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007dd2:	f107 0208 	add.w	r2, r7, #8
 8007dd6:	4413      	add	r3, r2
 8007dd8:	3bc0      	subs	r3, #192	; 0xc0
 8007dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dde:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007de2:	3303      	adds	r3, #3
 8007de4:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007de8:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fc00 	bl	80005f8 <__aeabi_dmul>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7f8 fa44 	bl	800028c <__adddf3>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007e0c:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 8007e10:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007e14:	00c9      	lsls	r1, r1, #3
 8007e16:	4401      	add	r1, r0
 8007e18:	e9c1 2300 	strd	r2, r3, [r1]
        rtb_SNew[i] += Ss[3 * j + 2] * rtb_SNew_0[iAcol + 6];
 8007e1c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007e20:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8007e24:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e30:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007e34:	4613      	mov	r3, r2
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	4413      	add	r3, r2
 8007e3a:	3302      	adds	r3, #2
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8007e42:	f107 0208 	add.w	r2, r7, #8
 8007e46:	4413      	add	r3, r2
 8007e48:	3bc0      	subs	r3, #192	; 0xc0
 8007e4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e4e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007e52:	3306      	adds	r3, #6
 8007e54:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007e58:	f5a2 72f0 	sub.w	r2, r2, #480	; 0x1e0
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	4413      	add	r3, r2
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f7f8 fbc8 	bl	80005f8 <__aeabi_dmul>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	4649      	mov	r1, r9
 8007e70:	f7f8 fa0c 	bl	800028c <__adddf3>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8007e7c:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 8007e80:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 8007e84:	00c9      	lsls	r1, r1, #3
 8007e86:	4401      	add	r1, r0
 8007e88:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = 0; iAcol < 3; iAcol++) {
 8007e8c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007e90:	3301      	adds	r3, #1
 8007e92:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8007e96:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	f77f af38 	ble.w	8007d10 <RC_Model_KF_vout_for_MCU_step+0xf48>
    for (j = 0; j < 3; j++) {
 8007ea0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007eaa:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	f77f af2a 	ble.w	8007d08 <RC_Model_KF_vout_for_MCU_step+0xf40>
      }
    }

    errorCondition = true;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
    j = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    exitg2 = false;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f887 32aa 	strb.w	r3, [r7, #682]	; 0x2aa
    while ((!exitg2) && (j < 3)) {
 8007ec6:	e046      	b.n	8007f56 <RC_Model_KF_vout_for_MCU_step+0x118e>
      int32_T exitg1;
      iAcol = j + 1;
 8007ec8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007ecc:	3301      	adds	r3, #1
 8007ece:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
      do {
        exitg1 = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
        if (iAcol + 1 < 4) {
 8007ed8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	dc27      	bgt.n	8007f30 <RC_Model_KF_vout_for_MCU_step+0x1168>
          if (!(rtb_SNew[3 * j + iAcol] == 0.0)) {
 8007ee0:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	441a      	add	r2, r3
 8007eea:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007eee:	4413      	add	r3, r2
 8007ef0:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8007ef4:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	4413      	add	r3, r2
 8007efc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	f04f 0300 	mov.w	r3, #0
 8007f08:	f7f8 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <RC_Model_KF_vout_for_MCU_step+0x1158>
            errorCondition = false;
 8007f12:	2300      	movs	r3, #0
 8007f14:	f887 32ab 	strb.w	r3, [r7, #683]	; 0x2ab
            exitg1 = 1;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 8007f1e:	e00f      	b.n	8007f40 <RC_Model_KF_vout_for_MCU_step+0x1178>
          } else {
            iAcol++;
 8007f20:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8007f24:	3301      	adds	r3, #1
 8007f26:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8007f2a:	e009      	b.n	8007f40 <RC_Model_KF_vout_for_MCU_step+0x1178>
 8007f2c:	200002b8 	.word	0x200002b8
          }
        } else {
          j++;
 8007f30:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007f34:	3301      	adds	r3, #1
 8007f36:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
          exitg1 = 2;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
        }
      } while (exitg1 == 0);
 8007f40:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d0c4      	beq.n	8007ed2 <RC_Model_KF_vout_for_MCU_step+0x110a>

      if (exitg1 == 1) {
 8007f48:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d102      	bne.n	8007f56 <RC_Model_KF_vout_for_MCU_step+0x118e>
        exitg2 = true;
 8007f50:	2301      	movs	r3, #1
 8007f52:	f887 32aa 	strb.w	r3, [r7, #682]	; 0x2aa
    while ((!exitg2) && (j < 3)) {
 8007f56:	f897 32aa 	ldrb.w	r3, [r7, #682]	; 0x2aa
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d103      	bne.n	8007f66 <RC_Model_KF_vout_for_MCU_step+0x119e>
 8007f5e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	ddb0      	ble.n	8007ec8 <RC_Model_KF_vout_for_MCU_step+0x1100>
      }
    }

    if (!errorCondition) {
 8007f66:	f897 32ab 	ldrb.w	r3, [r7, #683]	; 0x2ab
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f040 81fb 	bne.w	8008366 <RC_Model_KF_vout_for_MCU_step+0x159e>
      memcpy(&rtb_SNew_0[0], &rtb_SNew[0], 9U * sizeof(real_T));
 8007f70:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8007f74:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007f78:	2248      	movs	r2, #72	; 0x48
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f004 fb18 	bl	800c5b0 <memcpy>
      qr(rtb_SNew_0, a__1, rtb_SNew);
 8007f80:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8007f84:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8007f88:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7fe f943 	bl	8006218 <qr>
 8007f92:	e1e8      	b.n	8008366 <RC_Model_KF_vout_for_MCU_step+0x159e>
    }
  } else {
    Hnew[0] = 0.0;
 8007f94:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007f98:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	e9c1 2300 	strd	r2, r3, [r1]
    Hnew[1] = 0.0;
 8007fa8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007fac:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 8007fb0:	f04f 0200 	mov.w	r2, #0
 8007fb4:	f04f 0300 	mov.w	r3, #0
 8007fb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Hnew[2] = 0.0;
 8007fbc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007fc0:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    for (j = 0; j < 3; j++) {
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8007fd6:	e066      	b.n	80080a6 <RC_Model_KF_vout_for_MCU_step+0x12de>
      iAcol = 3 * j;
 8007fd8:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8007fdc:	4613      	mov	r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
      yCovSqrt = Hnew[j];
 8007fe6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8007fea:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8007fee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
      for (i = 0; i < j; i++) {
 8007ffe:	2300      	movs	r3, #0
 8008000:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8008004:	e027      	b.n	8008056 <RC_Model_KF_vout_for_MCU_step+0x128e>
        yCovSqrt -= rtb_SNew[i + iAcol] * Hnew[i];
 8008006:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800800a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800800e:	4413      	add	r3, r2
 8008010:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8008014:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8008018:	00db      	lsls	r3, r3, #3
 800801a:	4413      	add	r3, r2
 800801c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008020:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008024:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8008028:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800802c:	00db      	lsls	r3, r3, #3
 800802e:	4413      	add	r3, r2
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 fae0 	bl	80005f8 <__aeabi_dmul>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8008040:	f7f8 f922 	bl	8000288 <__aeabi_dsub>
 8008044:	4602      	mov	r2, r0
 8008046:	460b      	mov	r3, r1
 8008048:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
      for (i = 0; i < j; i++) {
 800804c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8008050:	3301      	adds	r3, #1
 8008052:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8008056:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800805a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800805e:	429a      	cmp	r2, r3
 8008060:	dbd1      	blt.n	8008006 <RC_Model_KF_vout_for_MCU_step+0x123e>
      }

      Hnew[j] = yCovSqrt / rtb_SNew[j + iAcol];
 8008062:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8008066:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800806a:	4413      	add	r3, r2
 800806c:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8008070:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8008080:	f7f8 fbe4 	bl	800084c <__aeabi_ddiv>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800808c:	f5a1 7010 	sub.w	r0, r1, #576	; 0x240
 8008090:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 8008094:	00c9      	lsls	r1, r1, #3
 8008096:	4401      	add	r1, r0
 8008098:	e9c1 2300 	strd	r2, r3, [r1]
    for (j = 0; j < 3; j++) {
 800809c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80080a0:	3301      	adds	r3, #1
 80080a2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80080a6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	dd94      	ble.n	8007fd8 <RC_Model_KF_vout_for_MCU_step+0x1210>
    }

    if (Hnew[2] == 0.0) {
 80080ae:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80080b2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80080b6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	f7f8 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d013      	beq.n	80080f4 <RC_Model_KF_vout_for_MCU_step+0x132c>
      b_c[2] = 1.0;
 80080cc:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80080d0:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	4ba5      	ldr	r3, [pc, #660]	; (8008370 <RC_Model_KF_vout_for_MCU_step+0x15a8>)
 80080da:	e9c1 2304 	strd	r2, r3, [r1, #16]
      s[2] = 0.0;
 80080de:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80080e2:	f5a3 712e 	sub.w	r1, r3, #696	; 0x2b8
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80080f2:	e011      	b.n	8008118 <RC_Model_KF_vout_for_MCU_step+0x1350>
    } else {
      b_c[2] = (rtNaN);
 80080f4:	4b9f      	ldr	r3, [pc, #636]	; (8008374 <RC_Model_KF_vout_for_MCU_step+0x15ac>)
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80080fe:	f5a1 7116 	sub.w	r1, r1, #600	; 0x258
 8008102:	e9c1 2304 	strd	r2, r3, [r1, #16]
      s[2] = (rtNaN);
 8008106:	4b9b      	ldr	r3, [pc, #620]	; (8008374 <RC_Model_KF_vout_for_MCU_step+0x15ac>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8008110:	f5a1 712e 	sub.w	r1, r1, #696	; 0x2b8
 8008114:	e9c1 2304 	strd	r2, r3, [r1, #16]
    }

    Hnew[2] = 0.0;
 8008118:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800811c:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	e9c1 2304 	strd	r2, r3, [r1, #16]
    if (Hnew[1] == 0.0) {
 800812c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008130:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8008134:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	f7f8 fcc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d013      	beq.n	8008172 <RC_Model_KF_vout_for_MCU_step+0x13aa>
      b_c[1] = 1.0;
 800814a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800814e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	4b86      	ldr	r3, [pc, #536]	; (8008370 <RC_Model_KF_vout_for_MCU_step+0x15a8>)
 8008158:	e9c1 2302 	strd	r2, r3, [r1, #8]
      s[1] = 0.0;
 800815c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008160:	f5a3 712e 	sub.w	r1, r3, #696	; 0x2b8
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8008170:	e011      	b.n	8008196 <RC_Model_KF_vout_for_MCU_step+0x13ce>
    } else {
      b_c[1] = (rtNaN);
 8008172:	4b80      	ldr	r3, [pc, #512]	; (8008374 <RC_Model_KF_vout_for_MCU_step+0x15ac>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800817c:	f5a1 7116 	sub.w	r1, r1, #600	; 0x258
 8008180:	e9c1 2302 	strd	r2, r3, [r1, #8]
      s[1] = (rtNaN);
 8008184:	4b7b      	ldr	r3, [pc, #492]	; (8008374 <RC_Model_KF_vout_for_MCU_step+0x15ac>)
 8008186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818a:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800818e:	f5a1 712e 	sub.w	r1, r1, #696	; 0x2b8
 8008192:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }

    Hnew[1] = 0.0;
 8008196:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800819a:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (Hnew[0] == 0.0) {
 80081aa:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80081ae:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80081b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	f7f8 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d013      	beq.n	80081f0 <RC_Model_KF_vout_for_MCU_step+0x1428>
      b_c[0] = 1.0;
 80081c8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80081cc:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	4b66      	ldr	r3, [pc, #408]	; (8008370 <RC_Model_KF_vout_for_MCU_step+0x15a8>)
 80081d6:	e9c1 2300 	strd	r2, r3, [r1]
      s[0] = 0.0;
 80081da:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80081de:	f5a3 712e 	sub.w	r1, r3, #696	; 0x2b8
 80081e2:	f04f 0200 	mov.w	r2, #0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	e9c1 2300 	strd	r2, r3, [r1]
 80081ee:	e011      	b.n	8008214 <RC_Model_KF_vout_for_MCU_step+0x144c>
    } else {
      b_c[0] = (rtNaN);
 80081f0:	4b60      	ldr	r3, [pc, #384]	; (8008374 <RC_Model_KF_vout_for_MCU_step+0x15ac>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80081fa:	f5a1 7116 	sub.w	r1, r1, #600	; 0x258
 80081fe:	e9c1 2300 	strd	r2, r3, [r1]
      s[0] = (rtNaN);
 8008202:	4b5c      	ldr	r3, [pc, #368]	; (8008374 <RC_Model_KF_vout_for_MCU_step+0x15ac>)
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800820c:	f5a1 712e 	sub.w	r1, r1, #696	; 0x2b8
 8008210:	e9c1 2300 	strd	r2, r3, [r1]
    }

    Hnew[0] = 0.0;
 8008214:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008218:	f5a3 7110 	sub.w	r1, r3, #576	; 0x240
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	e9c1 2300 	strd	r2, r3, [r1]
    for (j = 0; j < 3; j++) {
 8008228:	2300      	movs	r3, #0
 800822a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800822e:	e095      	b.n	800835c <RC_Model_KF_vout_for_MCU_step+0x1594>
      for (iAcol = j + 1; iAcol >= 1; iAcol--) {
 8008230:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008234:	3301      	adds	r3, #1
 8008236:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 800823a:	e085      	b.n	8008348 <RC_Model_KF_vout_for_MCU_step+0x1580>
        yCovSqrt = Hnew[j];
 800823c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008240:	f5a3 7210 	sub.w	r2, r3, #576	; 0x240
 8008244:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008248:	00db      	lsls	r3, r3, #3
 800824a:	4413      	add	r3, r2
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
        i = (3 * j + iAcol) - 1;
 8008254:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 8008258:	4613      	mov	r3, r2
 800825a:	005b      	lsls	r3, r3, #1
 800825c:	441a      	add	r2, r3
 800825e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008262:	4413      	add	r3, r2
 8008264:	3b01      	subs	r3, #1
 8008266:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
        Product3_idx_2 = rtb_SNew[i];
 800826a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800826e:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8008272:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	4413      	add	r3, r2
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278
        a_vo_tmp = s[iAcol - 1];
 8008282:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008286:	3b01      	subs	r3, #1
 8008288:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800828c:	f5a2 722e 	sub.w	r2, r2, #696	; 0x2b8
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	4413      	add	r3, r2
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
        scale = b_c[iAcol - 1];
 800829c:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80082a0:	3b01      	subs	r3, #1
 80082a2:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80082a6:	f5a2 7216 	sub.w	r2, r2, #600	; 0x258
 80082aa:	00db      	lsls	r3, r3, #3
 80082ac:	4413      	add	r3, r2
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
        rtb_SNew[i] = Product3_idx_2 * scale - a_vo_tmp * yCovSqrt;
 80082b6:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80082ba:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	4602      	mov	r2, r0
 80082c4:	460b      	mov	r3, r1
 80082c6:	4690      	mov	r8, r2
 80082c8:	4699      	mov	r9, r3
 80082ca:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80082ce:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
 80082d2:	f7f8 f991 	bl	80005f8 <__aeabi_dmul>
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	f7f7 ffd3 	bl	8000288 <__aeabi_dsub>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 80082ea:	f5a1 70cc 	sub.w	r0, r1, #408	; 0x198
 80082ee:	f8d7 12b4 	ldr.w	r1, [r7, #692]	; 0x2b4
 80082f2:	00c9      	lsls	r1, r1, #3
 80082f4:	4401      	add	r1, r0
 80082f6:	e9c1 2300 	strd	r2, r3, [r1]
        Hnew[j] = scale * yCovSqrt + Product3_idx_2 * a_vo_tmp;
 80082fa:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80082fe:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	; 0x258
 8008302:	f7f8 f979 	bl	80005f8 <__aeabi_dmul>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4690      	mov	r8, r2
 800830c:	4699      	mov	r9, r3
 800830e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8008312:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8008316:	f7f8 f96f 	bl	80005f8 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4640      	mov	r0, r8
 8008320:	4649      	mov	r1, r9
 8008322:	f7f7 ffb3 	bl	800028c <__adddf3>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800832e:	f5a1 7010 	sub.w	r0, r1, #576	; 0x240
 8008332:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 8008336:	00c9      	lsls	r1, r1, #3
 8008338:	4401      	add	r1, r0
 800833a:	e9c1 2300 	strd	r2, r3, [r1]
      for (iAcol = j + 1; iAcol >= 1; iAcol--) {
 800833e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008342:	3b01      	subs	r3, #1
 8008344:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8008348:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800834c:	2b00      	cmp	r3, #0
 800834e:	f73f af75 	bgt.w	800823c <RC_Model_KF_vout_for_MCU_step+0x1474>
    for (j = 0; j < 3; j++) {
 8008352:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008356:	3301      	adds	r3, #1
 8008358:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800835c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008360:	2b02      	cmp	r3, #2
 8008362:	f77f af65 	ble.w	8008230 <RC_Model_KF_vout_for_MCU_step+0x1468>
      }
    }
  }

  for (j = 0; j < 3; j++) {
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800836c:	e052      	b.n	8008414 <RC_Model_KF_vout_for_MCU_step+0x164c>
 800836e:	bf00      	nop
 8008370:	3ff00000 	.word	0x3ff00000
 8008374:	200002b8 	.word	0x200002b8
    rtb_SNew_0[3 * j] = rtb_SNew[j];
 8008378:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800837c:	4613      	mov	r3, r2
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	1899      	adds	r1, r3, r2
 8008382:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008386:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 800838a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800838e:	00db      	lsls	r3, r3, #3
 8008390:	4413      	add	r3, r2
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 800839a:	f5a0 70f0 	sub.w	r0, r0, #480	; 0x1e0
 800839e:	00c9      	lsls	r1, r1, #3
 80083a0:	4401      	add	r1, r0
 80083a2:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_SNew_0[3 * j + 1] = rtb_SNew[j + 3];
 80083a6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80083aa:	1cd8      	adds	r0, r3, #3
 80083ac:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80083b0:	4613      	mov	r3, r2
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	4413      	add	r3, r2
 80083b6:	1c59      	adds	r1, r3, #1
 80083b8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80083bc:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80083c0:	00c3      	lsls	r3, r0, #3
 80083c2:	4413      	add	r3, r2
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 80083cc:	f5a0 70f0 	sub.w	r0, r0, #480	; 0x1e0
 80083d0:	00c9      	lsls	r1, r1, #3
 80083d2:	4401      	add	r1, r0
 80083d4:	e9c1 2300 	strd	r2, r3, [r1]
    rtb_SNew_0[3 * j + 2] = rtb_SNew[j + 6];
 80083d8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80083dc:	1d98      	adds	r0, r3, #6
 80083de:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 80083e2:	4613      	mov	r3, r2
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	4413      	add	r3, r2
 80083e8:	1c99      	adds	r1, r3, #2
 80083ea:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80083ee:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80083f2:	00c3      	lsls	r3, r0, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f507 7030 	add.w	r0, r7, #704	; 0x2c0
 80083fe:	f5a0 70f0 	sub.w	r0, r0, #480	; 0x1e0
 8008402:	00c9      	lsls	r1, r1, #3
 8008404:	4401      	add	r1, r0
 8008406:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 3; j++) {
 800840a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800840e:	3301      	adds	r3, #1
 8008410:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8008414:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008418:	2b02      	cmp	r3, #2
 800841a:	ddad      	ble.n	8008378 <RC_Model_KF_vout_for_MCU_step+0x15b0>
  }

  memcpy(&rtb_SNew[0], &rtb_SNew_0[0], 9U * sizeof(real_T));
 800841c:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8008420:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8008424:	2248      	movs	r2, #72	; 0x48
 8008426:	4618      	mov	r0, r3
 8008428:	f004 f8c2 	bl	800c5b0 <memcpy>
  /* End of Outputs for SubSystem: '<S1>/CalculatePL' */

  /* Delay: '<S1>/MemoryX' incorporates:
   *  Constant: '<S1>/X0'
   */
  if (rtDW.icLoad_o) {
 800842c:	4b98      	ldr	r3, [pc, #608]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 800842e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8008432:	2b00      	cmp	r3, #0
 8008434:	d011      	beq.n	800845a <RC_Model_KF_vout_for_MCU_step+0x1692>
    rtDW.MemoryX_DSTATE[0] = 12.6;
 8008436:	4996      	ldr	r1, [pc, #600]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008438:	a393      	add	r3, pc, #588	; (adr r3, 8008688 <RC_Model_KF_vout_for_MCU_step+0x18c0>)
 800843a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    rtDW.MemoryX_DSTATE[1] = 12.6;
 8008442:	4993      	ldr	r1, [pc, #588]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008444:	a390      	add	r3, pc, #576	; (adr r3, 8008688 <RC_Model_KF_vout_for_MCU_step+0x18c0>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    rtDW.MemoryX_DSTATE[2] = 12.6;
 800844e:	4990      	ldr	r1, [pc, #576]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008450:	a38d      	add	r3, pc, #564	; (adr r3, 8008688 <RC_Model_KF_vout_for_MCU_step+0x18c0>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
   *  Inport: '<Root>/voltage'
   *  MATLAB Function: '<Root>/Matrix Generator'
   *  Product: '<S51>/Product'
   *  Product: '<S51>/Product1'
   */
  yCovSqrt = (rtU.voltage - ((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 800845a:	4b8e      	ldr	r3, [pc, #568]	; (8008694 <RC_Model_KF_vout_for_MCU_step+0x18cc>)
 800845c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008460:	4b8b      	ldr	r3, [pc, #556]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008462:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008466:	f04f 0200 	mov.w	r2, #0
 800846a:	f04f 0300 	mov.w	r3, #0
 800846e:	f7f8 f8c3 	bl	80005f8 <__aeabi_dmul>
 8008472:	4602      	mov	r2, r0
 8008474:	460b      	mov	r3, r1
 8008476:	4692      	mov	sl, r2
 8008478:	469b      	mov	fp, r3
    rtDW.MemoryX_DSTATE[1]) + rtDW.MemoryX_DSTATE[2])) - 0.0 * rtU.current;
 800847a:	4b85      	ldr	r3, [pc, #532]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 800847c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
  yCovSqrt = (rtU.voltage - ((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	f7f8 f8b6 	bl	80005f8 <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4650      	mov	r0, sl
 8008492:	4659      	mov	r1, fp
 8008494:	f7f7 fefa 	bl	800028c <__adddf3>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4610      	mov	r0, r2
 800849e:	4619      	mov	r1, r3
    rtDW.MemoryX_DSTATE[1]) + rtDW.MemoryX_DSTATE[2])) - 0.0 * rtU.current;
 80084a0:	4b7b      	ldr	r3, [pc, #492]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 80084a2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80084a6:	f7f7 fef1 	bl	800028c <__adddf3>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
  yCovSqrt = (rtU.voltage - ((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 80084ae:	4640      	mov	r0, r8
 80084b0:	4649      	mov	r1, r9
 80084b2:	f7f7 fee9 	bl	8000288 <__aeabi_dsub>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4690      	mov	r8, r2
 80084bc:	4699      	mov	r9, r3
    rtDW.MemoryX_DSTATE[1]) + rtDW.MemoryX_DSTATE[2])) - 0.0 * rtU.current;
 80084be:	4b75      	ldr	r3, [pc, #468]	; (8008694 <RC_Model_KF_vout_for_MCU_step+0x18cc>)
 80084c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	f7f8 f894 	bl	80005f8 <__aeabi_dmul>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
  yCovSqrt = (rtU.voltage - ((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 80084d4:	4640      	mov	r0, r8
 80084d6:	4649      	mov	r1, r9
 80084d8:	f7f7 fed6 	bl	8000288 <__aeabi_dsub>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8

  /* Sum: '<S28>/Add' incorporates:
   *  Delay: '<S1>/MemoryX'
   *  Product: '<S51>/Product2'
   */
  rtb_M[0] = rtb_M[0] * yCovSqrt + rtDW.MemoryX_DSTATE[0];
 80084e4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80084e8:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80084ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80084f0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80084f4:	f7f8 f880 	bl	80005f8 <__aeabi_dmul>
 80084f8:	4602      	mov	r2, r0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4610      	mov	r0, r2
 80084fe:	4619      	mov	r1, r3
 8008500:	4b63      	ldr	r3, [pc, #396]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008502:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008506:	f7f7 fec1 	bl	800028c <__adddf3>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 8008512:	f5a1 7128 	sub.w	r1, r1, #672	; 0x2a0
 8008516:	e9c1 2300 	strd	r2, r3, [r1]

  /* Product: '<S51>/Product2' */
  a_vo_tmp = rtb_M[1] * yCovSqrt;
 800851a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800851e:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8008522:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008526:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800852a:	f7f8 f865 	bl	80005f8 <__aeabi_dmul>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268

  /* Sum: '<S28>/Add' incorporates:
   *  Delay: '<S1>/MemoryX'
   *  Product: '<S51>/Product2'
   */
  scale = rtb_M[2] * yCovSqrt + rtDW.MemoryX_DSTATE[2];
 8008536:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800853a:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800853e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008542:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 8008546:	f7f8 f857 	bl	80005f8 <__aeabi_dmul>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	4610      	mov	r0, r2
 8008550:	4619      	mov	r1, r3
 8008552:	4b4f      	ldr	r3, [pc, #316]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008554:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008558:	f7f7 fe98 	bl	800028c <__adddf3>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	e9c7 2396 	strd	r2, r3, [r7, #600]	; 0x258
   *  MATLAB Function: '<Root>/Matrix Generator'
   *  Product: '<S47>/C[k]*xhat[k|k-1]'
   *  Product: '<S47>/D[k]*u[k]'
   *  Sum: '<S47>/Add1'
   */
  yCovSqrt = rtU.voltage - (((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 8008564:	4b4b      	ldr	r3, [pc, #300]	; (8008694 <RC_Model_KF_vout_for_MCU_step+0x18cc>)
 8008566:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 800856a:	4b49      	ldr	r3, [pc, #292]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 800856c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	f7f8 f83e 	bl	80005f8 <__aeabi_dmul>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4692      	mov	sl, r2
 8008582:	469b      	mov	fp, r3
    rtDW.MemoryX_DSTATE[1]) + rtDW.MemoryX_DSTATE[2]) + 0.0 * rtU.current);
 8008584:	4b42      	ldr	r3, [pc, #264]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 8008586:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
  yCovSqrt = rtU.voltage - (((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 800858a:	f04f 0200 	mov.w	r2, #0
 800858e:	f04f 0300 	mov.w	r3, #0
 8008592:	f7f8 f831 	bl	80005f8 <__aeabi_dmul>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4650      	mov	r0, sl
 800859c:	4659      	mov	r1, fp
 800859e:	f7f7 fe75 	bl	800028c <__adddf3>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4610      	mov	r0, r2
 80085a8:	4619      	mov	r1, r3
    rtDW.MemoryX_DSTATE[1]) + rtDW.MemoryX_DSTATE[2]) + 0.0 * rtU.current);
 80085aa:	4b39      	ldr	r3, [pc, #228]	; (8008690 <RC_Model_KF_vout_for_MCU_step+0x18c8>)
 80085ac:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80085b0:	f7f7 fe6c 	bl	800028c <__adddf3>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	4692      	mov	sl, r2
 80085ba:	469b      	mov	fp, r3
 80085bc:	4b35      	ldr	r3, [pc, #212]	; (8008694 <RC_Model_KF_vout_for_MCU_step+0x18cc>)
 80085be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	f7f8 f815 	bl	80005f8 <__aeabi_dmul>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4650      	mov	r0, sl
 80085d4:	4659      	mov	r1, fp
 80085d6:	f7f7 fe59 	bl	800028c <__adddf3>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
  yCovSqrt = rtU.voltage - (((0.0 * rtDW.MemoryX_DSTATE[0] + 0.0 *
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f7f7 fe51 	bl	8000288 <__aeabi_dsub>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8

  /* Product: '<S47>/Product3' */
  absxk = rtb_L[0] * yCovSqrt;
 80085ee:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80085f2:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80085fe:	f7f7 fffb 	bl	80005f8 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	e9c7 2394 	strd	r2, r3, [r7, #592]	; 0x250
  Product3_idx_1 = rtb_L[1] * yCovSqrt;
 800860a:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800860e:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8008612:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008616:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800861a:	f7f7 ffed 	bl	80005f8 <__aeabi_dmul>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	e9c7 2392 	strd	r2, r3, [r7, #584]	; 0x248
  Product3_idx_2 = rtb_L[2] * yCovSqrt;
 8008626:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 800862a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 800862e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008632:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 8008636:	f7f7 ffdf 	bl	80005f8 <__aeabi_dmul>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	e9c7 239e 	strd	r2, r3, [r7, #632]	; 0x278

  /* End of Outputs for SubSystem: '<S22>/MeasurementUpdate' */

  /* Lookup_n-D: '<Root>/1-D Lookup Table' */
  yCovSqrt = look1_binlg(rtb_M[0], rtConstP.uDLookupTable_bp01Data,
 8008642:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008646:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800864a:	ed93 7b00 	vldr	d7, [r3]
 800864e:	2207      	movs	r2, #7
 8008650:	4911      	ldr	r1, [pc, #68]	; (8008698 <RC_Model_KF_vout_for_MCU_step+0x18d0>)
 8008652:	4812      	ldr	r0, [pc, #72]	; (800869c <RC_Model_KF_vout_for_MCU_step+0x18d4>)
 8008654:	eeb0 0a47 	vmov.f32	s0, s14
 8008658:	eef0 0a67 	vmov.f32	s1, s15
 800865c:	f7f8 ff05 	bl	800146a <look1_binlg>
 8008660:	ed87 0bae 	vstr	d0, [r7, #696]	; 0x2b8
    rtConstP.uDLookupTable_tableData, 7U);

  /* Saturate: '<Root>/Saturation' */
  if (yCovSqrt > 1.0) {
 8008664:	f04f 0200 	mov.w	r2, #0
 8008668:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <RC_Model_KF_vout_for_MCU_step+0x18d8>)
 800866a:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 800866e:	f7f8 fa53 	bl	8000b18 <__aeabi_dcmpgt>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d015      	beq.n	80086a4 <RC_Model_KF_vout_for_MCU_step+0x18dc>
    yCovSqrt = 1.0;
 8008678:	f04f 0200 	mov.w	r2, #0
 800867c:	4b08      	ldr	r3, [pc, #32]	; (80086a0 <RC_Model_KF_vout_for_MCU_step+0x18d8>)
 800867e:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
 8008682:	e020      	b.n	80086c6 <RC_Model_KF_vout_for_MCU_step+0x18fe>
 8008684:	f3af 8000 	nop.w
 8008688:	33333333 	.word	0x33333333
 800868c:	40293333 	.word	0x40293333
 8008690:	20000200 	.word	0x20000200
 8008694:	20000278 	.word	0x20000278
 8008698:	080112a8 	.word	0x080112a8
 800869c:	080112e8 	.word	0x080112e8
 80086a0:	3ff00000 	.word	0x3ff00000
  } else if (yCovSqrt < 0.0) {
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	; 0x2b8
 80086b0:	f7f8 fa14 	bl	8000adc <__aeabi_dcmplt>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <RC_Model_KF_vout_for_MCU_step+0x18fe>
    yCovSqrt = 0.0;
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	e9c7 23ae 	strd	r2, r3, [r7, #696]	; 0x2b8
  }

  /* End of Saturate: '<Root>/Saturation' */

  /* Outport: '<Root>/soc_estimated' */
  rtY.soc_estimated = yCovSqrt;
 80086c6:	4988      	ldr	r1, [pc, #544]	; (80088e8 <RC_Model_KF_vout_for_MCU_step+0x1b20>)
 80086c8:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80086cc:	e9c1 2300 	strd	r2, r3, [r1]
   *  Product: '<S4>/Product'
   *  Product: '<S4>/Product1'
   *  Sum: '<S28>/Add'
   *  Sum: '<S4>/Add1'
   */
  rtY.voltage_estimated = (((a_vo_tmp + rtDW.MemoryX_DSTATE[1]) * 0.0 + 0.0 *
 80086d0:	4b86      	ldr	r3, [pc, #536]	; (80088ec <RC_Model_KF_vout_for_MCU_step+0x1b24>)
 80086d2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80086d6:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 80086da:	f7f7 fdd7 	bl	800028c <__adddf3>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4610      	mov	r0, r2
 80086e4:	4619      	mov	r1, r3
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	f04f 0300 	mov.w	r3, #0
 80086ee:	f7f7 ff83 	bl	80005f8 <__aeabi_dmul>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	4690      	mov	r8, r2
 80086f8:	4699      	mov	r9, r3
    rtb_M[0]) + scale) + 0.0 * rtU.current;
 80086fa:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80086fe:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 8008702:	e9d3 0100 	ldrd	r0, r1, [r3]
  rtY.voltage_estimated = (((a_vo_tmp + rtDW.MemoryX_DSTATE[1]) * 0.0 + 0.0 *
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	f04f 0300 	mov.w	r3, #0
 800870e:	f7f7 ff73 	bl	80005f8 <__aeabi_dmul>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4640      	mov	r0, r8
 8008718:	4649      	mov	r1, r9
 800871a:	f7f7 fdb7 	bl	800028c <__adddf3>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4610      	mov	r0, r2
 8008724:	4619      	mov	r1, r3
    rtb_M[0]) + scale) + 0.0 * rtU.current;
 8008726:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	4602      	mov	r2, r0
 8008730:	460b      	mov	r3, r1
 8008732:	4690      	mov	r8, r2
 8008734:	4699      	mov	r9, r3
 8008736:	4b6e      	ldr	r3, [pc, #440]	; (80088f0 <RC_Model_KF_vout_for_MCU_step+0x1b28>)
 8008738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	f7f7 ff58 	bl	80005f8 <__aeabi_dmul>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4640      	mov	r0, r8
 800874e:	4649      	mov	r1, r9
 8008750:	f7f7 fd9c 	bl	800028c <__adddf3>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
  rtY.voltage_estimated = (((a_vo_tmp + rtDW.MemoryX_DSTATE[1]) * 0.0 + 0.0 *
 8008758:	4963      	ldr	r1, [pc, #396]	; (80088e8 <RC_Model_KF_vout_for_MCU_step+0x1b20>)
 800875a:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* MATLAB Function: '<S45>/SqrtUsedFcn' */
  for (j = 0; j < 3; j++) {
 800875e:	2300      	movs	r3, #0
 8008760:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8008764:	e082      	b.n	800886c <RC_Model_KF_vout_for_MCU_step+0x1aa4>
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008766:	2300      	movs	r3, #0
 8008768:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 800876c:	e075      	b.n	800885a <RC_Model_KF_vout_for_MCU_step+0x1a92>
      Ss[j + 3 * iAcol] = (rtb_Zs[j + 3] * rtb_Zs[iAcol + 3] + rtb_Zs[j] *
 800876e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008772:	3303      	adds	r3, #3
 8008774:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8008778:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008784:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008788:	3303      	adds	r3, #3
 800878a:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 800878e:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	4413      	add	r3, r2
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 ff2d 	bl	80005f8 <__aeabi_dmul>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4690      	mov	r8, r2
 80087a4:	4699      	mov	r9, r3
 80087a6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80087aa:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 80087ae:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	e9d3 0100 	ldrd	r0, r1, [r3]
                           rtb_Zs[iAcol]) + rtb_Zs[j + 6] * rtb_Zs[iAcol + 6];
 80087ba:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80087be:	f5a3 720a 	sub.w	r2, r3, #552	; 0x228
 80087c2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
      Ss[j + 3 * iAcol] = (rtb_Zs[j + 3] * rtb_Zs[iAcol + 3] + rtb_Zs[j] *
 80087ce:	f7f7 ff13 	bl	80005f8 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4640      	mov	r0, r8
 80087d8:	4649      	mov	r1, r9
 80087da:	f7f7 fd57 	bl	800028c <__adddf3>
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4690      	mov	r8, r2
 80087e4:	4699      	mov	r9, r3
                           rtb_Zs[iAcol]) + rtb_Zs[j + 6] * rtb_Zs[iAcol + 6];
 80087e6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80087ea:	3306      	adds	r3, #6
 80087ec:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 80087f0:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	4413      	add	r3, r2
 80087f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087fc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008800:	3306      	adds	r3, #6
 8008802:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8008806:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4413      	add	r3, r2
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f7f7 fef1 	bl	80005f8 <__aeabi_dmul>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
      Ss[j + 3 * iAcol] = (rtb_Zs[j + 3] * rtb_Zs[iAcol + 3] + rtb_Zs[j] *
 800881e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8008822:	4613      	mov	r3, r2
 8008824:	005b      	lsls	r3, r3, #1
 8008826:	441a      	add	r2, r3
 8008828:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800882c:	18d6      	adds	r6, r2, r3
                           rtb_Zs[iAcol]) + rtb_Zs[j + 6] * rtb_Zs[iAcol + 6];
 800882e:	4602      	mov	r2, r0
 8008830:	460b      	mov	r3, r1
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fd29 	bl	800028c <__adddf3>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
      Ss[j + 3 * iAcol] = (rtb_Zs[j + 3] * rtb_Zs[iAcol + 3] + rtb_Zs[j] *
 800883e:	00f1      	lsls	r1, r6, #3
 8008840:	f501 712e 	add.w	r1, r1, #696	; 0x2b8
 8008844:	f107 0008 	add.w	r0, r7, #8
 8008848:	4401      	add	r1, r0
 800884a:	39c0      	subs	r1, #192	; 0xc0
 800884c:	e9c1 2300 	strd	r2, r3, [r1]
    for (iAcol = 0; iAcol < 3; iAcol++) {
 8008850:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8008854:	3301      	adds	r3, #1
 8008856:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 800885a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800885e:	2b02      	cmp	r3, #2
 8008860:	dd85      	ble.n	800876e <RC_Model_KF_vout_for_MCU_step+0x19a6>
  for (j = 0; j < 3; j++) {
 8008862:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008866:	3301      	adds	r3, #1
 8008868:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800886c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008870:	2b02      	cmp	r3, #2
 8008872:	f77f af78 	ble.w	8008766 <RC_Model_KF_vout_for_MCU_step+0x199e>
  /* Outport: '<Root>/standard_deviation' incorporates:
   *  Gain: '<Root>/Gain'
   *  Selector: '<Root>/Selector2'
   *  Sqrt: '<Root>/Sqrt'
   */
  rtY.standard_deviation = 3.0 * sqrt(Ss[0]);
 8008876:	ed97 7b80 	vldr	d7, [r7, #512]	; 0x200
 800887a:	eeb0 0a47 	vmov.f32	s0, s14
 800887e:	eef0 0a67 	vmov.f32	s1, s15
 8008882:	f008 f981 	bl	8010b88 <sqrt>
 8008886:	ec51 0b10 	vmov	r0, r1, d0
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	4b19      	ldr	r3, [pc, #100]	; (80088f4 <RC_Model_KF_vout_for_MCU_step+0x1b2c>)
 8008890:	f7f7 feb2 	bl	80005f8 <__aeabi_dmul>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4913      	ldr	r1, [pc, #76]	; (80088e8 <RC_Model_KF_vout_for_MCU_step+0x1b20>)
 800889a:	e9c1 2306 	strd	r2, r3, [r1, #24]
  /* Outport: '<Root>/soc_measured' incorporates:
   *  Constant: '<Root>/Battery Capacity Ah'
   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'
   *  Product: '<Root>/Divide9'
   */
  rtY.soc_measured = rtDW.DiscreteTimeIntegrator_DSTATE / 5.0;
 800889e:	4b13      	ldr	r3, [pc, #76]	; (80088ec <RC_Model_KF_vout_for_MCU_step+0x1b24>)
 80088a0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80088a4:	f04f 0200 	mov.w	r2, #0
 80088a8:	4b13      	ldr	r3, [pc, #76]	; (80088f8 <RC_Model_KF_vout_for_MCU_step+0x1b30>)
 80088aa:	f7f7 ffcf 	bl	800084c <__aeabi_ddiv>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	490d      	ldr	r1, [pc, #52]	; (80088e8 <RC_Model_KF_vout_for_MCU_step+0x1b20>)
 80088b4:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Update for Delay: '<S1>/MemoryP' */
  rtDW.icLoad = false;
 80088b8:	4b0c      	ldr	r3, [pc, #48]	; (80088ec <RC_Model_KF_vout_for_MCU_step+0x1b24>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  memcpy(&rtDW.MemoryP_DSTATE[0], &rtb_SNew[0], 9U * sizeof(real_T));
 80088c0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80088c4:	2248      	movs	r2, #72	; 0x48
 80088c6:	4619      	mov	r1, r3
 80088c8:	4808      	ldr	r0, [pc, #32]	; (80088ec <RC_Model_KF_vout_for_MCU_step+0x1b24>)
 80088ca:	f003 fe71 	bl	800c5b0 <memcpy>

  /* Update for Delay: '<Root>/Delay' */
  rtDW.Delay_DSTATE = yCovSqrt;
 80088ce:	4907      	ldr	r1, [pc, #28]	; (80088ec <RC_Model_KF_vout_for_MCU_step+0x1b24>)
 80088d0:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 80088d4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

  /* Update for Delay: '<S1>/MemoryX' */
  rtDW.icLoad_o = false;
 80088d8:	4b04      	ldr	r3, [pc, #16]	; (80088ec <RC_Model_KF_vout_for_MCU_step+0x1b24>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* Product: '<S22>/A[k]*xhat[k|k-1]' incorporates:
   *  Delay: '<S1>/MemoryX'
   */
  for (j = 0; j < 3; j++) {
 80088e0:	2300      	movs	r3, #0
 80088e2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80088e6:	e05d      	b.n	80089a4 <RC_Model_KF_vout_for_MCU_step+0x1bdc>
 80088e8:	20000288 	.word	0x20000288
 80088ec:	20000200 	.word	0x20000200
 80088f0:	20000278 	.word	0x20000278
 80088f4:	40080000 	.word	0x40080000
 80088f8:	40140000 	.word	0x40140000
    rtb_C[j] = (rtb_A[j + 3] * rtDW.MemoryX_DSTATE[1] + rtb_A[j] *
 80088fc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008900:	3303      	adds	r3, #3
 8008902:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8008906:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800890a:	00db      	lsls	r3, r3, #3
 800890c:	4413      	add	r3, r2
 800890e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008912:	4bcf      	ldr	r3, [pc, #828]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008914:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8008918:	f7f7 fe6e 	bl	80005f8 <__aeabi_dmul>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4690      	mov	r8, r2
 8008922:	4699      	mov	r9, r3
 8008924:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008928:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800892c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8008930:	00db      	lsls	r3, r3, #3
 8008932:	4413      	add	r3, r2
 8008934:	e9d3 0100 	ldrd	r0, r1, [r3]
                rtDW.MemoryX_DSTATE[0]) + rtb_A[j + 6] * rtDW.MemoryX_DSTATE[2];
 8008938:	4bc5      	ldr	r3, [pc, #788]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 800893a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    rtb_C[j] = (rtb_A[j + 3] * rtDW.MemoryX_DSTATE[1] + rtb_A[j] *
 800893e:	f7f7 fe5b 	bl	80005f8 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4640      	mov	r0, r8
 8008948:	4649      	mov	r1, r9
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4690      	mov	r8, r2
 8008954:	4699      	mov	r9, r3
                rtDW.MemoryX_DSTATE[0]) + rtb_A[j + 6] * rtDW.MemoryX_DSTATE[2];
 8008956:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800895a:	3306      	adds	r3, #6
 800895c:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8008960:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8008964:	00db      	lsls	r3, r3, #3
 8008966:	4413      	add	r3, r2
 8008968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800896c:	4bb8      	ldr	r3, [pc, #736]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 800896e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8008972:	f7f7 fe41 	bl	80005f8 <__aeabi_dmul>
 8008976:	4602      	mov	r2, r0
 8008978:	460b      	mov	r3, r1
 800897a:	4640      	mov	r0, r8
 800897c:	4649      	mov	r1, r9
 800897e:	f7f7 fc85 	bl	800028c <__adddf3>
 8008982:	4602      	mov	r2, r0
 8008984:	460b      	mov	r3, r1
    rtb_C[j] = (rtb_A[j + 3] * rtDW.MemoryX_DSTATE[1] + rtb_A[j] *
 8008986:	f507 7130 	add.w	r1, r7, #704	; 0x2c0
 800898a:	f5a1 701c 	sub.w	r0, r1, #624	; 0x270
 800898e:	f8d7 12ac 	ldr.w	r1, [r7, #684]	; 0x2ac
 8008992:	00c9      	lsls	r1, r1, #3
 8008994:	4401      	add	r1, r0
 8008996:	e9c1 2300 	strd	r2, r3, [r1]
  for (j = 0; j < 3; j++) {
 800899a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800899e:	3301      	adds	r3, #1
 80089a0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 80089a4:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	dda7      	ble.n	80088fc <RC_Model_KF_vout_for_MCU_step+0x1b34>
   *  Inport: '<Root>/current'
   *  MATLAB Function: '<Root>/Matrix Generator'
   *  Product: '<S22>/B[k]*u[k]'
   *  Sum: '<S22>/Add'
   */
  rtDW.MemoryX_DSTATE[0] = ((1.0 - exp(-0.1 / (2.0 * rtb_Rb * rtb_Cbulk))) *
 80089ac:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	f7f7 fc6a 	bl	800028c <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4610      	mov	r0, r2
 80089be:	4619      	mov	r1, r3
 80089c0:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 80089c4:	f7f7 fe18 	bl	80005f8 <__aeabi_dmul>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	a19a      	add	r1, pc, #616	; (adr r1, 8008c38 <RC_Model_KF_vout_for_MCU_step+0x1e70>)
 80089ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089d2:	f7f7 ff3b 	bl	800084c <__aeabi_ddiv>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	ec43 2b17 	vmov	d7, r2, r3
 80089de:	eeb0 0a47 	vmov.f32	s0, s14
 80089e2:	eef0 0a67 	vmov.f32	s1, s15
 80089e6:	f008 f887 	bl	8010af8 <exp>
 80089ea:	ec53 2b10 	vmov	r2, r3, d0
 80089ee:	f04f 0000 	mov.w	r0, #0
 80089f2:	4998      	ldr	r1, [pc, #608]	; (8008c54 <RC_Model_KF_vout_for_MCU_step+0x1e8c>)
 80089f4:	f7f7 fc48 	bl	8000288 <__aeabi_dsub>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4610      	mov	r0, r2
 80089fe:	4619      	mov	r1, r3
 8008a00:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8008a04:	f7f7 fdf8 	bl	80005f8 <__aeabi_dmul>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
    rtb_Rb * rtU.current + rtb_C[0]) + absxk;
 8008a10:	4b91      	ldr	r3, [pc, #580]	; (8008c58 <RC_Model_KF_vout_for_MCU_step+0x1e90>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4619      	mov	r1, r3
 8008a22:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008a26:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f7f7 fc2d 	bl	800028c <__adddf3>
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	4610      	mov	r0, r2
 8008a38:	4619      	mov	r1, r3
 8008a3a:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 8008a3e:	f7f7 fc25 	bl	800028c <__adddf3>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
  rtDW.MemoryX_DSTATE[0] = ((1.0 - exp(-0.1 / (2.0 * rtb_Rb * rtb_Cbulk))) *
 8008a46:	4982      	ldr	r1, [pc, #520]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008a48:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
  rtDW.MemoryX_DSTATE[1] = ((1.0 - exp(-0.1 / (2.0 * rtb_Rb * rtb_Csurface))) *
 8008a4c:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	; 0x290
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	f7f7 fc1a 	bl	800028c <__adddf3>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4619      	mov	r1, r3
 8008a60:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8008a64:	f7f7 fdc8 	bl	80005f8 <__aeabi_dmul>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	a172      	add	r1, pc, #456	; (adr r1, 8008c38 <RC_Model_KF_vout_for_MCU_step+0x1e70>)
 8008a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008a72:	f7f7 feeb 	bl	800084c <__aeabi_ddiv>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	ec43 2b17 	vmov	d7, r2, r3
 8008a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8008a82:	eef0 0a67 	vmov.f32	s1, s15
 8008a86:	f008 f837 	bl	8010af8 <exp>
 8008a8a:	ec53 2b10 	vmov	r2, r3, d0
 8008a8e:	f04f 0000 	mov.w	r0, #0
 8008a92:	4970      	ldr	r1, [pc, #448]	; (8008c54 <RC_Model_KF_vout_for_MCU_step+0x1e8c>)
 8008a94:	f7f7 fbf8 	bl	8000288 <__aeabi_dsub>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 8008aa4:	f7f7 fda8 	bl	80005f8 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4610      	mov	r0, r2
 8008aae:	4619      	mov	r1, r3
    rtb_Rb * rtU.current + rtb_C[1]) + Product3_idx_1;
 8008ab0:	4b69      	ldr	r3, [pc, #420]	; (8008c58 <RC_Model_KF_vout_for_MCU_step+0x1e90>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	f7f7 fd9f 	bl	80005f8 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4610      	mov	r0, r2
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008ac6:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8008aca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008ace:	f7f7 fbdd 	bl	800028c <__adddf3>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4619      	mov	r1, r3
 8008ada:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8008ade:	f7f7 fbd5 	bl	800028c <__adddf3>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
  rtDW.MemoryX_DSTATE[1] = ((1.0 - exp(-0.1 / (2.0 * rtb_Rb * rtb_Csurface))) *
 8008ae6:	495a      	ldr	r1, [pc, #360]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008ae8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

  /* MATLAB Function: '<Root>/Matrix Generator' */
  rtb_Rt /= a_vo_tmp_tmp;
 8008aec:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 8008af0:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	; 0x298
 8008af4:	f7f7 feaa 	bl	800084c <__aeabi_ddiv>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	e9c7 23a6 	strd	r2, r3, [r7, #664]	; 0x298
   *  Inport: '<Root>/current'
   *  MATLAB Function: '<Root>/Matrix Generator'
   *  Product: '<S22>/B[k]*u[k]'
   *  Sum: '<S22>/Add'
   */
  rtDW.MemoryX_DSTATE[2] = (((1.0 / (2.0 * rtb_Csurface) - rtb_Rt) + rtb_Rt) *
 8008b00:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	; 0x280
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	f7f7 fbc0 	bl	800028c <__adddf3>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	460b      	mov	r3, r1
 8008b10:	f04f 0000 	mov.w	r0, #0
 8008b14:	494f      	ldr	r1, [pc, #316]	; (8008c54 <RC_Model_KF_vout_for_MCU_step+0x1e8c>)
 8008b16:	f7f7 fe99 	bl	800084c <__aeabi_ddiv>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4610      	mov	r0, r2
 8008b20:	4619      	mov	r1, r3
 8008b22:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8008b26:	f7f7 fbaf 	bl	8000288 <__aeabi_dsub>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8008b36:	f7f7 fba9 	bl	800028c <__adddf3>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4690      	mov	r8, r2
 8008b40:	4699      	mov	r9, r3
    ((exp(-a_vo * 0.1) - 1.0) * (1.0 / a_vo)) * rtU.current + rtb_C[2]) +
 8008b42:	f8d7 4260 	ldr.w	r4, [r7, #608]	; 0x260
 8008b46:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8008b4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008b4e:	a33c      	add	r3, pc, #240	; (adr r3, 8008c40 <RC_Model_KF_vout_for_MCU_step+0x1e78>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	4620      	mov	r0, r4
 8008b56:	4629      	mov	r1, r5
 8008b58:	f7f7 fd4e 	bl	80005f8 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	ec43 2b17 	vmov	d7, r2, r3
 8008b64:	eeb0 0a47 	vmov.f32	s0, s14
 8008b68:	eef0 0a67 	vmov.f32	s1, s15
 8008b6c:	f007 ffc4 	bl	8010af8 <exp>
 8008b70:	ec51 0b10 	vmov	r0, r1, d0
 8008b74:	f04f 0200 	mov.w	r2, #0
 8008b78:	4b36      	ldr	r3, [pc, #216]	; (8008c54 <RC_Model_KF_vout_for_MCU_step+0x1e8c>)
 8008b7a:	f7f7 fb85 	bl	8000288 <__aeabi_dsub>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4614      	mov	r4, r2
 8008b84:	461d      	mov	r5, r3
 8008b86:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8008b8a:	f04f 0000 	mov.w	r0, #0
 8008b8e:	4931      	ldr	r1, [pc, #196]	; (8008c54 <RC_Model_KF_vout_for_MCU_step+0x1e8c>)
 8008b90:	f7f7 fe5c 	bl	800084c <__aeabi_ddiv>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4620      	mov	r0, r4
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
  rtDW.MemoryX_DSTATE[2] = (((1.0 / (2.0 * rtb_Csurface) - rtb_Rt) + rtb_Rt) *
 8008ba4:	4640      	mov	r0, r8
 8008ba6:	4649      	mov	r1, r9
 8008ba8:	f7f7 fd26 	bl	80005f8 <__aeabi_dmul>
 8008bac:	4602      	mov	r2, r0
 8008bae:	460b      	mov	r3, r1
 8008bb0:	4610      	mov	r0, r2
 8008bb2:	4619      	mov	r1, r3
    ((exp(-a_vo * 0.1) - 1.0) * (1.0 / a_vo)) * rtU.current + rtb_C[2]) +
 8008bb4:	4b28      	ldr	r3, [pc, #160]	; (8008c58 <RC_Model_KF_vout_for_MCU_step+0x1e90>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4610      	mov	r0, r2
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8008bca:	f5a3 731c 	sub.w	r3, r3, #624	; 0x270
 8008bce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008bd2:	f7f7 fb5b 	bl	800028c <__adddf3>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4610      	mov	r0, r2
 8008bdc:	4619      	mov	r1, r3
 8008bde:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8008be2:	f7f7 fb53 	bl	800028c <__adddf3>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
  rtDW.MemoryX_DSTATE[2] = (((1.0 / (2.0 * rtb_Csurface) - rtb_Rt) + rtb_Rt) *
 8008bea:	4919      	ldr	r1, [pc, #100]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008bec:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:
   *  Gain: '<Root>/Convert to Ah'
   *  Inport: '<Root>/current'
   */
  rtDW.DiscreteTimeIntegrator_DSTATE += 0.00027777777777777778 * rtU.current *
 8008bf0:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008bf2:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8008bf6:	4b18      	ldr	r3, [pc, #96]	; (8008c58 <RC_Model_KF_vout_for_MCU_step+0x1e90>)
 8008bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bfc:	a312      	add	r3, pc, #72	; (adr r3, 8008c48 <RC_Model_KF_vout_for_MCU_step+0x1e80>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fcf9 	bl	80005f8 <__aeabi_dmul>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	a30c      	add	r3, pc, #48	; (adr r3, 8008c40 <RC_Model_KF_vout_for_MCU_step+0x1e78>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	f7f7 fcf0 	bl	80005f8 <__aeabi_dmul>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fb34 	bl	800028c <__adddf3>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4909      	ldr	r1, [pc, #36]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008c2a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
    0.1;
  if (rtDW.DiscreteTimeIntegrator_DSTATE >= 5.0) {
 8008c2e:	4b08      	ldr	r3, [pc, #32]	; (8008c50 <RC_Model_KF_vout_for_MCU_step+0x1e88>)
 8008c30:	e014      	b.n	8008c5c <RC_Model_KF_vout_for_MCU_step+0x1e94>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
 8008c38:	9999999a 	.word	0x9999999a
 8008c3c:	bfb99999 	.word	0xbfb99999
 8008c40:	9999999a 	.word	0x9999999a
 8008c44:	3fb99999 	.word	0x3fb99999
 8008c48:	789abcdf 	.word	0x789abcdf
 8008c4c:	3f323456 	.word	0x3f323456
 8008c50:	20000200 	.word	0x20000200
 8008c54:	3ff00000 	.word	0x3ff00000
 8008c58:	20000278 	.word	0x20000278
 8008c5c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <RC_Model_KF_vout_for_MCU_step+0x1eec>)
 8008c66:	f7f7 ff4d 	bl	8000b04 <__aeabi_dcmpge>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d006      	beq.n	8008c7e <RC_Model_KF_vout_for_MCU_step+0x1eb6>
    rtDW.DiscreteTimeIntegrator_DSTATE = 5.0;
 8008c70:	4911      	ldr	r1, [pc, #68]	; (8008cb8 <RC_Model_KF_vout_for_MCU_step+0x1ef0>)
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	4b0f      	ldr	r3, [pc, #60]	; (8008cb4 <RC_Model_KF_vout_for_MCU_step+0x1eec>)
 8008c78:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
  } else if (rtDW.DiscreteTimeIntegrator_DSTATE <= 0.0) {
    rtDW.DiscreteTimeIntegrator_DSTATE = 0.0;
  }

  /* End of Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
}
 8008c7c:	e013      	b.n	8008ca6 <RC_Model_KF_vout_for_MCU_step+0x1ede>
  } else if (rtDW.DiscreteTimeIntegrator_DSTATE <= 0.0) {
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <RC_Model_KF_vout_for_MCU_step+0x1ef0>)
 8008c80:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	f7f7 ff30 	bl	8000af0 <__aeabi_dcmple>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d100      	bne.n	8008c98 <RC_Model_KF_vout_for_MCU_step+0x1ed0>
}
 8008c96:	e006      	b.n	8008ca6 <RC_Model_KF_vout_for_MCU_step+0x1ede>
    rtDW.DiscreteTimeIntegrator_DSTATE = 0.0;
 8008c98:	4907      	ldr	r1, [pc, #28]	; (8008cb8 <RC_Model_KF_vout_for_MCU_step+0x1ef0>)
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	f04f 0300 	mov.w	r3, #0
 8008ca2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8008ca6:	bf00      	nop
 8008ca8:	f507 7731 	add.w	r7, r7, #708	; 0x2c4
 8008cac:	46bd      	mov	sp, r7
 8008cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40140000 	.word	0x40140000
 8008cb8:	20000200 	.word	0x20000200

08008cbc <RC_Model_KF_vout_for_MCU_initialize>:

/* Model initialize function */
void RC_Model_KF_vout_for_MCU_initialize(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 8008cc0:	2008      	movs	r0, #8
 8008cc2:	f7f8 f9dd 	bl	8001080 <rt_InitInfAndNaN>

  /* InitializeConditions for Delay: '<S1>/MemoryP' */
  rtDW.icLoad = true;
 8008cc6:	4b0b      	ldr	r3, [pc, #44]	; (8008cf4 <RC_Model_KF_vout_for_MCU_initialize+0x38>)
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  /* InitializeConditions for Delay: '<Root>/Delay' */
  rtDW.Delay_DSTATE = 1.0;
 8008cce:	4909      	ldr	r1, [pc, #36]	; (8008cf4 <RC_Model_KF_vout_for_MCU_initialize+0x38>)
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <RC_Model_KF_vout_for_MCU_initialize+0x3c>)
 8008cd6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

  /* InitializeConditions for Delay: '<S1>/MemoryX' */
  rtDW.icLoad_o = true;
 8008cda:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <RC_Model_KF_vout_for_MCU_initialize+0x38>)
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

  /* InitializeConditions for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */
  rtDW.DiscreteTimeIntegrator_DSTATE = 5.0;
 8008ce2:	4904      	ldr	r1, [pc, #16]	; (8008cf4 <RC_Model_KF_vout_for_MCU_initialize+0x38>)
 8008ce4:	f04f 0200 	mov.w	r2, #0
 8008ce8:	4b04      	ldr	r3, [pc, #16]	; (8008cfc <RC_Model_KF_vout_for_MCU_initialize+0x40>)
 8008cea:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8008cee:	bf00      	nop
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000200 	.word	0x20000200
 8008cf8:	3ff00000 	.word	0x3ff00000
 8008cfc:	40140000 	.word	0x40140000

08008d00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d04:	b089      	sub	sp, #36	; 0x24
 8008d06:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008d08:	f000 fb87 	bl	800941a <HAL_Init>

	/* USER CODE BEGIN Init */
	RC_Model_KF_vout_for_MCU_initialize(); //Simulink Model initialization
 8008d0c:	f7ff ffd6 	bl	8008cbc <RC_Model_KF_vout_for_MCU_initialize>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008d10:	f000 f894 	bl	8008e3c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008d14:	f000 f914 	bl	8008f40 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8008d18:	f000 f8e2 	bl	8008ee0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	493a      	ldr	r1, [pc, #232]	; (8008e08 <main+0x108>)
 8008d20:	483a      	ldr	r0, [pc, #232]	; (8008e0c <main+0x10c>)
 8008d22:	f002 f95b 	bl	800afdc <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		Heartbeat();
 8008d26:	f000 f98d 	bl	8009044 <Heartbeat>
		if (process_data == 1) {
 8008d2a:	4b39      	ldr	r3, [pc, #228]	; (8008e10 <main+0x110>)
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d1f9      	bne.n	8008d26 <main+0x26>
			// UART input data is ready to be processed
			if (TESTING) {
				HAL_UART_Transmit(&huart2, (uint8_t*) input_data, 10, 500);
			}
			start_time = HAL_GetTick();
 8008d32:	f000 fbdb 	bl	80094ec <HAL_GetTick>
 8008d36:	4603      	mov	r3, r0
 8008d38:	4a36      	ldr	r2, [pc, #216]	; (8008e14 <main+0x114>)
 8008d3a:	6013      	str	r3, [r2, #0]
			token = strtok(input_data, ";");
 8008d3c:	4936      	ldr	r1, [pc, #216]	; (8008e18 <main+0x118>)
 8008d3e:	4837      	ldr	r0, [pc, #220]	; (8008e1c <main+0x11c>)
 8008d40:	f004 ff14 	bl	800db6c <strtok>
 8008d44:	4603      	mov	r3, r0
 8008d46:	4a36      	ldr	r2, [pc, #216]	; (8008e20 <main+0x120>)
 8008d48:	6013      	str	r3, [r2, #0]
			rtU.current = atof(token);
 8008d4a:	4b35      	ldr	r3, [pc, #212]	; (8008e20 <main+0x120>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f003 fc01 	bl	800c556 <atof>
 8008d54:	eeb0 7a40 	vmov.f32	s14, s0
 8008d58:	eef0 7a60 	vmov.f32	s15, s1
 8008d5c:	4b31      	ldr	r3, [pc, #196]	; (8008e24 <main+0x124>)
 8008d5e:	ed83 7b00 	vstr	d7, [r3]
			while (token != NULL) {
 8008d62:	e016      	b.n	8008d92 <main+0x92>
				token = strtok(NULL, " ");
 8008d64:	4930      	ldr	r1, [pc, #192]	; (8008e28 <main+0x128>)
 8008d66:	2000      	movs	r0, #0
 8008d68:	f004 ff00 	bl	800db6c <strtok>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	4a2c      	ldr	r2, [pc, #176]	; (8008e20 <main+0x120>)
 8008d70:	6013      	str	r3, [r2, #0]
				if (token != NULL) {
 8008d72:	4b2b      	ldr	r3, [pc, #172]	; (8008e20 <main+0x120>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00b      	beq.n	8008d92 <main+0x92>
					rtU.voltage = atof(token);
 8008d7a:	4b29      	ldr	r3, [pc, #164]	; (8008e20 <main+0x120>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f003 fbe9 	bl	800c556 <atof>
 8008d84:	eeb0 7a40 	vmov.f32	s14, s0
 8008d88:	eef0 7a60 	vmov.f32	s15, s1
 8008d8c:	4b25      	ldr	r3, [pc, #148]	; (8008e24 <main+0x124>)
 8008d8e:	ed83 7b02 	vstr	d7, [r3, #8]
			while (token != NULL) {
 8008d92:	4b23      	ldr	r3, [pc, #140]	; (8008e20 <main+0x120>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e4      	bne.n	8008d64 <main+0x64>
				}
			}
			RC_Model_KF_vout_for_MCU_step();
 8008d9a:	f7fe f815 	bl	8006dc8 <RC_Model_KF_vout_for_MCU_step>
			elapsed_time = HAL_GetTick() - start_time;
 8008d9e:	f000 fba5 	bl	80094ec <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	4b1b      	ldr	r3, [pc, #108]	; (8008e14 <main+0x114>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	4a20      	ldr	r2, [pc, #128]	; (8008e2c <main+0x12c>)
 8008dac:	6013      	str	r3, [r2, #0]
			sprintf(output_data, "%ld;%.4f;%.4f;%.4f;%.4f\r", elapsed_time, rtY.soc_estimated, rtY.voltage_estimated, rtU.current, rtU.voltage);
 8008dae:	4b1f      	ldr	r3, [pc, #124]	; (8008e2c <main+0x12c>)
 8008db0:	681e      	ldr	r6, [r3, #0]
 8008db2:	4b1f      	ldr	r3, [pc, #124]	; (8008e30 <main+0x130>)
 8008db4:	ed93 7b00 	vldr	d7, [r3]
 8008db8:	491d      	ldr	r1, [pc, #116]	; (8008e30 <main+0x130>)
 8008dba:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8008dbe:	4c19      	ldr	r4, [pc, #100]	; (8008e24 <main+0x124>)
 8008dc0:	e9d4 4500 	ldrd	r4, r5, [r4]
 8008dc4:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <main+0x124>)
 8008dc6:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8008dca:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008dce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dd6:	ed8d 7b00 	vstr	d7, [sp]
 8008dda:	4632      	mov	r2, r6
 8008ddc:	4915      	ldr	r1, [pc, #84]	; (8008e34 <main+0x134>)
 8008dde:	4816      	ldr	r0, [pc, #88]	; (8008e38 <main+0x138>)
 8008de0:	f004 f866 	bl	800ceb0 <siprintf>
			process_data = 0; //The input data has been processed
 8008de4:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <main+0x110>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, (uint8_t*) output_data, sizeof(output_data));
 8008dea:	2232      	movs	r2, #50	; 0x32
 8008dec:	4912      	ldr	r1, [pc, #72]	; (8008e38 <main+0x138>)
 8008dee:	4807      	ldr	r0, [pc, #28]	; (8008e0c <main+0x10c>)
 8008df0:	f002 f886 	bl	800af00 <HAL_UART_Transmit_IT>
			memset(input_data, 0, strlen(input_data)); //clean input data
 8008df4:	4809      	ldr	r0, [pc, #36]	; (8008e1c <main+0x11c>)
 8008df6:	f7f7 f9eb 	bl	80001d0 <strlen>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	2100      	movs	r1, #0
 8008e00:	4806      	ldr	r0, [pc, #24]	; (8008e1c <main+0x11c>)
 8008e02:	f003 fbe3 	bl	800c5cc <memset>
		Heartbeat();
 8008e06:	e78e      	b.n	8008d26 <main+0x26>
 8008e08:	20000350 	.word	0x20000350
 8008e0c:	200002cc 	.word	0x200002cc
 8008e10:	200003c8 	.word	0x200003c8
 8008e14:	200003c0 	.word	0x200003c0
 8008e18:	080110d8 	.word	0x080110d8
 8008e1c:	20000354 	.word	0x20000354
 8008e20:	200003bc 	.word	0x200003bc
 8008e24:	20000278 	.word	0x20000278
 8008e28:	080110dc 	.word	0x080110dc
 8008e2c:	200003c4 	.word	0x200003c4
 8008e30:	20000288 	.word	0x20000288
 8008e34:	080110e0 	.word	0x080110e0
 8008e38:	20000388 	.word	0x20000388

08008e3c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b096      	sub	sp, #88	; 0x58
 8008e40:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008e42:	f107 0314 	add.w	r3, r7, #20
 8008e46:	2244      	movs	r2, #68	; 0x44
 8008e48:	2100      	movs	r1, #0
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f003 fbbe 	bl	800c5cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008e50:	463b      	mov	r3, r7
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	605a      	str	r2, [r3, #4]
 8008e58:	609a      	str	r2, [r3, #8]
 8008e5a:	60da      	str	r2, [r3, #12]
 8008e5c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e62:	f000 fe89 	bl	8009b78 <HAL_PWREx_ControlVoltageScaling>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8008e6c:	f000 f904 	bl	8009078 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008e70:	2310      	movs	r3, #16
 8008e72:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008e74:	2301      	movs	r3, #1
 8008e76:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008e7c:	2360      	movs	r3, #96	; 0x60
 8008e7e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e80:	2302      	movs	r3, #2
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008e84:	2301      	movs	r3, #1
 8008e86:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8008e8c:	2328      	movs	r3, #40	; 0x28
 8008e8e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008e90:	2307      	movs	r3, #7
 8008e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008e94:	2302      	movs	r3, #2
 8008e96:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008e98:	2302      	movs	r3, #2
 8008e9a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8008e9c:	f107 0314 	add.w	r3, r7, #20
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 febf 	bl	8009c24 <HAL_RCC_OscConfig>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <SystemClock_Config+0x74>
		Error_Handler();
 8008eac:	f000 f8e4 	bl	8009078 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8008eb0:	230f      	movs	r3, #15
 8008eb2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	2104      	movs	r1, #4
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f001 fabf 	bl	800a44c <HAL_RCC_ClockConfig>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <SystemClock_Config+0x9c>
		Error_Handler();
 8008ed4:	f000 f8d0 	bl	8009078 <Error_Handler>
	}
}
 8008ed8:	bf00      	nop
 8008eda:	3758      	adds	r7, #88	; 0x58
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8008ee4:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008ee6:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <MX_USART2_UART_Init+0x5c>)
 8008ee8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8008eea:	4b13      	ldr	r3, [pc, #76]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008ef0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8008ef8:	4b0f      	ldr	r3, [pc, #60]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8008efe:	4b0e      	ldr	r3, [pc, #56]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f06:	220c      	movs	r2, #12
 8008f08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f10:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008f16:	4b08      	ldr	r3, [pc, #32]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f1c:	4b06      	ldr	r3, [pc, #24]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8008f22:	4805      	ldr	r0, [pc, #20]	; (8008f38 <MX_USART2_UART_Init+0x58>)
 8008f24:	f001 ff9e 	bl	800ae64 <HAL_UART_Init>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8008f2e:	f000 f8a3 	bl	8009078 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200002cc 	.word	0x200002cc
 8008f3c:	40004400 	.word	0x40004400

08008f40 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b088      	sub	sp, #32
 8008f44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008f46:	f107 030c 	add.w	r3, r7, #12
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
 8008f4e:	605a      	str	r2, [r3, #4]
 8008f50:	609a      	str	r2, [r3, #8]
 8008f52:	60da      	str	r2, [r3, #12]
 8008f54:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008f56:	4b1d      	ldr	r3, [pc, #116]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f5a:	4a1c      	ldr	r2, [pc, #112]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f5c:	f043 0304 	orr.w	r3, r3, #4
 8008f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f62:	4b1a      	ldr	r3, [pc, #104]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f66:	f003 0304 	and.w	r3, r3, #4
 8008f6a:	60bb      	str	r3, [r7, #8]
 8008f6c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8008f6e:	4b17      	ldr	r3, [pc, #92]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	4a16      	ldr	r2, [pc, #88]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f74:	f043 0301 	orr.w	r3, r3, #1
 8008f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	607b      	str	r3, [r7, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8008f86:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f8a:	4a10      	ldr	r2, [pc, #64]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f8c:	f043 0302 	orr.w	r3, r3, #2
 8008f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f92:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <MX_GPIO_Init+0x8c>)
 8008f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f96:	f003 0302 	and.w	r3, r3, #2
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2108      	movs	r1, #8
 8008fa2:	480b      	ldr	r0, [pc, #44]	; (8008fd0 <MX_GPIO_Init+0x90>)
 8008fa4:	f000 fda8 	bl	8009af8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8008fa8:	2308      	movs	r3, #8
 8008faa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008fac:	2301      	movs	r3, #1
 8008fae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8008fb8:	f107 030c 	add.w	r3, r7, #12
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4804      	ldr	r0, [pc, #16]	; (8008fd0 <MX_GPIO_Init+0x90>)
 8008fc0:	f000 fc30 	bl	8009824 <HAL_GPIO_Init>

}
 8008fc4:	bf00      	nop
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	40021000 	.word	0x40021000
 8008fd0:	48000400 	.word	0x48000400

08008fd4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
	if (rx_buffer[0] != '\r') {
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <HAL_UART_RxCpltCallback+0x34>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	2b0d      	cmp	r3, #13
 8008fe2:	d009      	beq.n	8008ff8 <HAL_UART_RxCpltCallback+0x24>
		// Read the byte/char and add it to the data variable if there is no \r
		strcat(input_data, (char*) rx_buffer);
 8008fe4:	4908      	ldr	r1, [pc, #32]	; (8009008 <HAL_UART_RxCpltCallback+0x34>)
 8008fe6:	4809      	ldr	r0, [pc, #36]	; (800900c <HAL_UART_RxCpltCallback+0x38>)
 8008fe8:	f003 ff82 	bl	800cef0 <strcat>
		HAL_UART_Receive_IT(&huart2, rx_buffer, 1); //we are still waiting for more data, we will continuo reading
 8008fec:	2201      	movs	r2, #1
 8008fee:	4906      	ldr	r1, [pc, #24]	; (8009008 <HAL_UART_RxCpltCallback+0x34>)
 8008ff0:	4807      	ldr	r0, [pc, #28]	; (8009010 <HAL_UART_RxCpltCallback+0x3c>)
 8008ff2:	f001 fff3 	bl	800afdc <HAL_UART_Receive_IT>
	} else {
		//We get the line terminator, then process the data and send
		process_data = 1;
	}
}
 8008ff6:	e002      	b.n	8008ffe <HAL_UART_RxCpltCallback+0x2a>
		process_data = 1;
 8008ff8:	4b06      	ldr	r3, [pc, #24]	; (8009014 <HAL_UART_RxCpltCallback+0x40>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
}
 8008ffe:	bf00      	nop
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20000350 	.word	0x20000350
 800900c:	20000354 	.word	0x20000354
 8009010:	200002cc 	.word	0x200002cc
 8009014:	200003c8 	.word	0x200003c8

08009018 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	process_data = 0; // the input data has been processed and send
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <HAL_UART_TxCpltCallback+0x20>)
 8009022:	2200      	movs	r2, #0
 8009024:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_buffer, 1);
 8009026:	2201      	movs	r2, #1
 8009028:	4904      	ldr	r1, [pc, #16]	; (800903c <HAL_UART_TxCpltCallback+0x24>)
 800902a:	4805      	ldr	r0, [pc, #20]	; (8009040 <HAL_UART_TxCpltCallback+0x28>)
 800902c:	f001 ffd6 	bl	800afdc <HAL_UART_Receive_IT>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	200003c8 	.word	0x200003c8
 800903c:	20000350 	.word	0x20000350
 8009040:	200002cc 	.word	0x200002cc

08009044 <Heartbeat>:

void Heartbeat(){
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - beat > 500){
 8009048:	f000 fa50 	bl	80094ec <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	4b08      	ldr	r3, [pc, #32]	; (8009070 <Heartbeat+0x2c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009058:	d908      	bls.n	800906c <Heartbeat+0x28>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800905a:	2108      	movs	r1, #8
 800905c:	4805      	ldr	r0, [pc, #20]	; (8009074 <Heartbeat+0x30>)
 800905e:	f000 fd63 	bl	8009b28 <HAL_GPIO_TogglePin>
		beat = HAL_GetTick();
 8009062:	f000 fa43 	bl	80094ec <HAL_GetTick>
 8009066:	4603      	mov	r3, r0
 8009068:	4a01      	ldr	r2, [pc, #4]	; (8009070 <Heartbeat+0x2c>)
 800906a:	6013      	str	r3, [r2, #0]
	}
}
 800906c:	bf00      	nop
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200003cc 	.word	0x200003cc
 8009074:	48000400 	.word	0x48000400

08009078 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800907c:	b672      	cpsid	i
}
 800907e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009080:	e7fe      	b.n	8009080 <Error_Handler+0x8>
	...

08009084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800908a:	4b0f      	ldr	r3, [pc, #60]	; (80090c8 <HAL_MspInit+0x44>)
 800908c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908e:	4a0e      	ldr	r2, [pc, #56]	; (80090c8 <HAL_MspInit+0x44>)
 8009090:	f043 0301 	orr.w	r3, r3, #1
 8009094:	6613      	str	r3, [r2, #96]	; 0x60
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <HAL_MspInit+0x44>)
 8009098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80090a2:	4b09      	ldr	r3, [pc, #36]	; (80090c8 <HAL_MspInit+0x44>)
 80090a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090a6:	4a08      	ldr	r2, [pc, #32]	; (80090c8 <HAL_MspInit+0x44>)
 80090a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ac:	6593      	str	r3, [r2, #88]	; 0x58
 80090ae:	4b06      	ldr	r3, [pc, #24]	; (80090c8 <HAL_MspInit+0x44>)
 80090b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	603b      	str	r3, [r7, #0]
 80090b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80090ba:	bf00      	nop
 80090bc:	370c      	adds	r7, #12
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	40021000 	.word	0x40021000

080090cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b09e      	sub	sp, #120	; 0x78
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	609a      	str	r2, [r3, #8]
 80090e0:	60da      	str	r2, [r3, #12]
 80090e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	2254      	movs	r2, #84	; 0x54
 80090ea:	2100      	movs	r1, #0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f003 fa6d 	bl	800c5cc <memset>
  if(huart->Instance==USART2)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a2c      	ldr	r2, [pc, #176]	; (80091a8 <HAL_UART_MspInit+0xdc>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d150      	bne.n	800919e <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80090fc:	2302      	movs	r3, #2
 80090fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009100:	2300      	movs	r3, #0
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009104:	f107 0310 	add.w	r3, r7, #16
 8009108:	4618      	mov	r0, r3
 800910a:	f001 fbc3 	bl	800a894 <HAL_RCCEx_PeriphCLKConfig>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8009114:	f7ff ffb0 	bl	8009078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009118:	4b24      	ldr	r3, [pc, #144]	; (80091ac <HAL_UART_MspInit+0xe0>)
 800911a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911c:	4a23      	ldr	r2, [pc, #140]	; (80091ac <HAL_UART_MspInit+0xe0>)
 800911e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009122:	6593      	str	r3, [r2, #88]	; 0x58
 8009124:	4b21      	ldr	r3, [pc, #132]	; (80091ac <HAL_UART_MspInit+0xe0>)
 8009126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009130:	4b1e      	ldr	r3, [pc, #120]	; (80091ac <HAL_UART_MspInit+0xe0>)
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	4a1d      	ldr	r2, [pc, #116]	; (80091ac <HAL_UART_MspInit+0xe0>)
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <HAL_UART_MspInit+0xe0>)
 800913e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009148:	2304      	movs	r3, #4
 800914a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800914c:	2302      	movs	r3, #2
 800914e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009150:	2300      	movs	r3, #0
 8009152:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009154:	2303      	movs	r3, #3
 8009156:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009158:	2307      	movs	r3, #7
 800915a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800915c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009160:	4619      	mov	r1, r3
 8009162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009166:	f000 fb5d 	bl	8009824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800916a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800916e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009170:	2302      	movs	r3, #2
 8009172:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009174:	2300      	movs	r3, #0
 8009176:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009178:	2303      	movs	r3, #3
 800917a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800917c:	2303      	movs	r3, #3
 800917e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009180:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8009184:	4619      	mov	r1, r3
 8009186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800918a:	f000 fb4b 	bl	8009824 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800918e:	2200      	movs	r2, #0
 8009190:	2100      	movs	r1, #0
 8009192:	2026      	movs	r0, #38	; 0x26
 8009194:	f000 fa91 	bl	80096ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009198:	2026      	movs	r0, #38	; 0x26
 800919a:	f000 faaa 	bl	80096f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800919e:	bf00      	nop
 80091a0:	3778      	adds	r7, #120	; 0x78
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	40004400 	.word	0x40004400
 80091ac:	40021000 	.word	0x40021000

080091b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80091b4:	e7fe      	b.n	80091b4 <NMI_Handler+0x4>

080091b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091b6:	b480      	push	{r7}
 80091b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091ba:	e7fe      	b.n	80091ba <HardFault_Handler+0x4>

080091bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091bc:	b480      	push	{r7}
 80091be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091c0:	e7fe      	b.n	80091c0 <MemManage_Handler+0x4>

080091c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091c2:	b480      	push	{r7}
 80091c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091c6:	e7fe      	b.n	80091c6 <BusFault_Handler+0x4>

080091c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091cc:	e7fe      	b.n	80091cc <UsageFault_Handler+0x4>

080091ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091ce:	b480      	push	{r7}
 80091d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091d2:	bf00      	nop
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091e0:	bf00      	nop
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091ea:	b480      	push	{r7}
 80091ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091ee:	bf00      	nop
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091fc:	f000 f962 	bl	80094c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009200:	bf00      	nop
 8009202:	bd80      	pop	{r7, pc}

08009204 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009208:	4802      	ldr	r0, [pc, #8]	; (8009214 <USART2_IRQHandler+0x10>)
 800920a:	f001 ff3d 	bl	800b088 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800920e:	bf00      	nop
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	200002cc 	.word	0x200002cc

08009218 <_getpid>:
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
 800921c:	2301      	movs	r3, #1
 800921e:	4618      	mov	r0, r3
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <_kill>:
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	f003 f993 	bl	800c55c <__errno>
 8009236:	4603      	mov	r3, r0
 8009238:	2216      	movs	r2, #22
 800923a:	601a      	str	r2, [r3, #0]
 800923c:	f04f 33ff 	mov.w	r3, #4294967295
 8009240:	4618      	mov	r0, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <_exit>:
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	f04f 31ff 	mov.w	r1, #4294967295
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7ff ffe7 	bl	8009228 <_kill>
 800925a:	e7fe      	b.n	800925a <_exit+0x12>

0800925c <_read>:
 800925c:	b580      	push	{r7, lr}
 800925e:	b086      	sub	sp, #24
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	2300      	movs	r3, #0
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	e00a      	b.n	8009284 <_read+0x28>
 800926e:	f3af 8000 	nop.w
 8009272:	4601      	mov	r1, r0
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	60ba      	str	r2, [r7, #8]
 800927a:	b2ca      	uxtb	r2, r1
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	3301      	adds	r3, #1
 8009282:	617b      	str	r3, [r7, #20]
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	429a      	cmp	r2, r3
 800928a:	dbf0      	blt.n	800926e <_read+0x12>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <_write>:
 8009296:	b580      	push	{r7, lr}
 8009298:	b086      	sub	sp, #24
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	607a      	str	r2, [r7, #4]
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	e009      	b.n	80092bc <_write+0x26>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	1c5a      	adds	r2, r3, #1
 80092ac:	60ba      	str	r2, [r7, #8]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	4618      	mov	r0, r3
 80092b2:	f3af 8000 	nop.w
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	3301      	adds	r3, #1
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	dbf1      	blt.n	80092a8 <_write+0x12>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4618      	mov	r0, r3
 80092c8:	3718      	adds	r7, #24
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <_close>:
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	f04f 33ff 	mov.w	r3, #4294967295
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <_fstat>:
 80092e6:	b480      	push	{r7}
 80092e8:	b083      	sub	sp, #12
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80092f6:	605a      	str	r2, [r3, #4]
 80092f8:	2300      	movs	r3, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <_isatty>:
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	2301      	movs	r3, #1
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <_lseek>:
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	2300      	movs	r3, #0
 800932a:	4618      	mov	r0, r3
 800932c:	3714      	adds	r7, #20
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr
	...

08009338 <_sbrk>:
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	4a14      	ldr	r2, [pc, #80]	; (8009394 <_sbrk+0x5c>)
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <_sbrk+0x60>)
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	4b13      	ldr	r3, [pc, #76]	; (800939c <_sbrk+0x64>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <_sbrk+0x22>
 8009354:	4b11      	ldr	r3, [pc, #68]	; (800939c <_sbrk+0x64>)
 8009356:	4a12      	ldr	r2, [pc, #72]	; (80093a0 <_sbrk+0x68>)
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <_sbrk+0x64>)
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4413      	add	r3, r2
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d207      	bcs.n	8009378 <_sbrk+0x40>
 8009368:	f003 f8f8 	bl	800c55c <__errno>
 800936c:	4603      	mov	r3, r0
 800936e:	220c      	movs	r2, #12
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	f04f 33ff 	mov.w	r3, #4294967295
 8009376:	e009      	b.n	800938c <_sbrk+0x54>
 8009378:	4b08      	ldr	r3, [pc, #32]	; (800939c <_sbrk+0x64>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	4b07      	ldr	r3, [pc, #28]	; (800939c <_sbrk+0x64>)
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4413      	add	r3, r2
 8009386:	4a05      	ldr	r2, [pc, #20]	; (800939c <_sbrk+0x64>)
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20010000 	.word	0x20010000
 8009398:	00000400 	.word	0x00000400
 800939c:	200003d0 	.word	0x200003d0
 80093a0:	200003e8 	.word	0x200003e8

080093a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80093a8:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <SystemInit+0x20>)
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ae:	4a05      	ldr	r2, [pc, #20]	; (80093c4 <SystemInit+0x20>)
 80093b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80093b8:	bf00      	nop
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	e000ed00 	.word	0xe000ed00

080093c8 <Reset_Handler>:
 80093c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009400 <LoopForever+0x2>
 80093cc:	f7ff ffea 	bl	80093a4 <SystemInit>
 80093d0:	480c      	ldr	r0, [pc, #48]	; (8009404 <LoopForever+0x6>)
 80093d2:	490d      	ldr	r1, [pc, #52]	; (8009408 <LoopForever+0xa>)
 80093d4:	4a0d      	ldr	r2, [pc, #52]	; (800940c <LoopForever+0xe>)
 80093d6:	2300      	movs	r3, #0
 80093d8:	e002      	b.n	80093e0 <LoopCopyDataInit>

080093da <CopyDataInit>:
 80093da:	58d4      	ldr	r4, [r2, r3]
 80093dc:	50c4      	str	r4, [r0, r3]
 80093de:	3304      	adds	r3, #4

080093e0 <LoopCopyDataInit>:
 80093e0:	18c4      	adds	r4, r0, r3
 80093e2:	428c      	cmp	r4, r1
 80093e4:	d3f9      	bcc.n	80093da <CopyDataInit>
 80093e6:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <LoopForever+0x12>)
 80093e8:	4c0a      	ldr	r4, [pc, #40]	; (8009414 <LoopForever+0x16>)
 80093ea:	2300      	movs	r3, #0
 80093ec:	e001      	b.n	80093f2 <LoopFillZerobss>

080093ee <FillZerobss>:
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	3204      	adds	r2, #4

080093f2 <LoopFillZerobss>:
 80093f2:	42a2      	cmp	r2, r4
 80093f4:	d3fb      	bcc.n	80093ee <FillZerobss>
 80093f6:	f003 f8b7 	bl	800c568 <__libc_init_array>
 80093fa:	f7ff fc81 	bl	8008d00 <main>

080093fe <LoopForever>:
 80093fe:	e7fe      	b.n	80093fe <LoopForever>
 8009400:	20010000 	.word	0x20010000
 8009404:	20000000 	.word	0x20000000
 8009408:	200001e0 	.word	0x200001e0
 800940c:	080118a8 	.word	0x080118a8
 8009410:	200001e0 	.word	0x200001e0
 8009414:	200003e8 	.word	0x200003e8

08009418 <ADC1_IRQHandler>:
 8009418:	e7fe      	b.n	8009418 <ADC1_IRQHandler>

0800941a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b082      	sub	sp, #8
 800941e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009424:	2003      	movs	r0, #3
 8009426:	f000 f93d 	bl	80096a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800942a:	2000      	movs	r0, #0
 800942c:	f000 f80e 	bl	800944c <HAL_InitTick>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	71fb      	strb	r3, [r7, #7]
 800943a:	e001      	b.n	8009440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800943c:	f7ff fe22 	bl	8009084 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009440:	79fb      	ldrb	r3, [r7, #7]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8009458:	4b17      	ldr	r3, [pc, #92]	; (80094b8 <HAL_InitTick+0x6c>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d023      	beq.n	80094a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8009460:	4b16      	ldr	r3, [pc, #88]	; (80094bc <HAL_InitTick+0x70>)
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	4b14      	ldr	r3, [pc, #80]	; (80094b8 <HAL_InitTick+0x6c>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	4619      	mov	r1, r3
 800946a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800946e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009472:	fbb2 f3f3 	udiv	r3, r2, r3
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f949 	bl	800970e <HAL_SYSTICK_Config>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10f      	bne.n	80094a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b0f      	cmp	r3, #15
 8009486:	d809      	bhi.n	800949c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009488:	2200      	movs	r2, #0
 800948a:	6879      	ldr	r1, [r7, #4]
 800948c:	f04f 30ff 	mov.w	r0, #4294967295
 8009490:	f000 f913 	bl	80096ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <HAL_InitTick+0x74>)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	e007      	b.n	80094ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	73fb      	strb	r3, [r7, #15]
 80094a0:	e004      	b.n	80094ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	73fb      	strb	r3, [r7, #15]
 80094a6:	e001      	b.n	80094ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000008 	.word	0x20000008
 80094bc:	20000000 	.word	0x20000000
 80094c0:	20000004 	.word	0x20000004

080094c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80094c8:	4b06      	ldr	r3, [pc, #24]	; (80094e4 <HAL_IncTick+0x20>)
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <HAL_IncTick+0x24>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4413      	add	r3, r2
 80094d4:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <HAL_IncTick+0x24>)
 80094d6:	6013      	str	r3, [r2, #0]
}
 80094d8:	bf00      	nop
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20000008 	.word	0x20000008
 80094e8:	200003d4 	.word	0x200003d4

080094ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094ec:	b480      	push	{r7}
 80094ee:	af00      	add	r7, sp, #0
  return uwTick;
 80094f0:	4b03      	ldr	r3, [pc, #12]	; (8009500 <HAL_GetTick+0x14>)
 80094f2:	681b      	ldr	r3, [r3, #0]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
 80094fe:	bf00      	nop
 8009500:	200003d4 	.word	0x200003d4

08009504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f003 0307 	and.w	r3, r3, #7
 8009512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <__NVIC_SetPriorityGrouping+0x44>)
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009520:	4013      	ands	r3, r2
 8009522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800952c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009536:	4a04      	ldr	r2, [pc, #16]	; (8009548 <__NVIC_SetPriorityGrouping+0x44>)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	60d3      	str	r3, [r2, #12]
}
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	e000ed00 	.word	0xe000ed00

0800954c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800954c:	b480      	push	{r7}
 800954e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009550:	4b04      	ldr	r3, [pc, #16]	; (8009564 <__NVIC_GetPriorityGrouping+0x18>)
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	0a1b      	lsrs	r3, r3, #8
 8009556:	f003 0307 	and.w	r3, r3, #7
}
 800955a:	4618      	mov	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	e000ed00 	.word	0xe000ed00

08009568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009576:	2b00      	cmp	r3, #0
 8009578:	db0b      	blt.n	8009592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800957a:	79fb      	ldrb	r3, [r7, #7]
 800957c:	f003 021f 	and.w	r2, r3, #31
 8009580:	4907      	ldr	r1, [pc, #28]	; (80095a0 <__NVIC_EnableIRQ+0x38>)
 8009582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	2001      	movs	r0, #1
 800958a:	fa00 f202 	lsl.w	r2, r0, r2
 800958e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009592:	bf00      	nop
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	e000e100 	.word	0xe000e100

080095a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	4603      	mov	r3, r0
 80095ac:	6039      	str	r1, [r7, #0]
 80095ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	db0a      	blt.n	80095ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	490c      	ldr	r1, [pc, #48]	; (80095f0 <__NVIC_SetPriority+0x4c>)
 80095be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095c2:	0112      	lsls	r2, r2, #4
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	440b      	add	r3, r1
 80095c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80095cc:	e00a      	b.n	80095e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	4908      	ldr	r1, [pc, #32]	; (80095f4 <__NVIC_SetPriority+0x50>)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	3b04      	subs	r3, #4
 80095dc:	0112      	lsls	r2, r2, #4
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	440b      	add	r3, r1
 80095e2:	761a      	strb	r2, [r3, #24]
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	e000e100 	.word	0xe000e100
 80095f4:	e000ed00 	.word	0xe000ed00

080095f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b089      	sub	sp, #36	; 0x24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f003 0307 	and.w	r3, r3, #7
 800960a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	f1c3 0307 	rsb	r3, r3, #7
 8009612:	2b04      	cmp	r3, #4
 8009614:	bf28      	it	cs
 8009616:	2304      	movcs	r3, #4
 8009618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	3304      	adds	r3, #4
 800961e:	2b06      	cmp	r3, #6
 8009620:	d902      	bls.n	8009628 <NVIC_EncodePriority+0x30>
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	3b03      	subs	r3, #3
 8009626:	e000      	b.n	800962a <NVIC_EncodePriority+0x32>
 8009628:	2300      	movs	r3, #0
 800962a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800962c:	f04f 32ff 	mov.w	r2, #4294967295
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	fa02 f303 	lsl.w	r3, r2, r3
 8009636:	43da      	mvns	r2, r3
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	401a      	ands	r2, r3
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009640:	f04f 31ff 	mov.w	r1, #4294967295
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	fa01 f303 	lsl.w	r3, r1, r3
 800964a:	43d9      	mvns	r1, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009650:	4313      	orrs	r3, r2
         );
}
 8009652:	4618      	mov	r0, r3
 8009654:	3724      	adds	r7, #36	; 0x24
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
	...

08009660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3b01      	subs	r3, #1
 800966c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009670:	d301      	bcc.n	8009676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009672:	2301      	movs	r3, #1
 8009674:	e00f      	b.n	8009696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009676:	4a0a      	ldr	r2, [pc, #40]	; (80096a0 <SysTick_Config+0x40>)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3b01      	subs	r3, #1
 800967c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800967e:	210f      	movs	r1, #15
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	f7ff ff8e 	bl	80095a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009688:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <SysTick_Config+0x40>)
 800968a:	2200      	movs	r2, #0
 800968c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800968e:	4b04      	ldr	r3, [pc, #16]	; (80096a0 <SysTick_Config+0x40>)
 8009690:	2207      	movs	r2, #7
 8009692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	e000e010 	.word	0xe000e010

080096a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff ff29 	bl	8009504 <__NVIC_SetPriorityGrouping>
}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b086      	sub	sp, #24
 80096be:	af00      	add	r7, sp, #0
 80096c0:	4603      	mov	r3, r0
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	607a      	str	r2, [r7, #4]
 80096c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80096c8:	2300      	movs	r3, #0
 80096ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80096cc:	f7ff ff3e 	bl	800954c <__NVIC_GetPriorityGrouping>
 80096d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	6978      	ldr	r0, [r7, #20]
 80096d8:	f7ff ff8e 	bl	80095f8 <NVIC_EncodePriority>
 80096dc:	4602      	mov	r2, r0
 80096de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7ff ff5d 	bl	80095a4 <__NVIC_SetPriority>
}
 80096ea:	bf00      	nop
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	4603      	mov	r3, r0
 80096fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff ff31 	bl	8009568 <__NVIC_EnableIRQ>
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b082      	sub	sp, #8
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7ff ffa2 	bl	8009660 <SysTick_Config>
 800971c:	4603      	mov	r3, r0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b02      	cmp	r3, #2
 800973c:	d008      	beq.n	8009750 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2204      	movs	r2, #4
 8009742:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e022      	b.n	8009796 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 020e 	bic.w	r2, r2, #14
 800975e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f022 0201 	bic.w	r2, r2, #1
 800976e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009774:	f003 021c 	and.w	r2, r3, #28
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800977c:	2101      	movs	r1, #1
 800977e:	fa01 f202 	lsl.w	r2, r1, r2
 8009782:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009796:	4618      	mov	r0, r3
 8009798:	3714      	adds	r7, #20
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d005      	beq.n	80097c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2204      	movs	r2, #4
 80097be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e029      	b.n	800981a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 020e 	bic.w	r2, r2, #14
 80097d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097ea:	f003 021c 	and.w	r2, r3, #28
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	2101      	movs	r1, #1
 80097f4:	fa01 f202 	lsl.w	r2, r1, r2
 80097f8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
    }
  }
  return status;
 800981a:	7bfb      	ldrb	r3, [r7, #15]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009832:	e148      	b.n	8009ac6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	2101      	movs	r1, #1
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	fa01 f303 	lsl.w	r3, r1, r3
 8009840:	4013      	ands	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	f000 813a 	beq.w	8009ac0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	f003 0303 	and.w	r3, r3, #3
 8009854:	2b01      	cmp	r3, #1
 8009856:	d005      	beq.n	8009864 <HAL_GPIO_Init+0x40>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	2b02      	cmp	r3, #2
 8009862:	d130      	bne.n	80098c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	2203      	movs	r2, #3
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	43db      	mvns	r3, r3
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4013      	ands	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	005b      	lsls	r3, r3, #1
 8009884:	fa02 f303 	lsl.w	r3, r2, r3
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	4313      	orrs	r3, r2
 800988c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	685b      	ldr	r3, [r3, #4]
 8009898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800989a:	2201      	movs	r2, #1
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	fa02 f303 	lsl.w	r3, r2, r3
 80098a2:	43db      	mvns	r3, r3
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	4013      	ands	r3, r2
 80098a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	091b      	lsrs	r3, r3, #4
 80098b0:	f003 0201 	and.w	r2, r3, #1
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d017      	beq.n	8009902 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	2203      	movs	r2, #3
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	43db      	mvns	r3, r3
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	4013      	ands	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	fa02 f303 	lsl.w	r3, r2, r3
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	2b02      	cmp	r3, #2
 800990c:	d123      	bne.n	8009956 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	08da      	lsrs	r2, r3, #3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3208      	adds	r2, #8
 8009916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	220f      	movs	r2, #15
 8009926:	fa02 f303 	lsl.w	r3, r2, r3
 800992a:	43db      	mvns	r3, r3
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	4013      	ands	r3, r2
 8009930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	fa02 f303 	lsl.w	r3, r2, r3
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4313      	orrs	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	08da      	lsrs	r2, r3, #3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	3208      	adds	r2, #8
 8009950:	6939      	ldr	r1, [r7, #16]
 8009952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	005b      	lsls	r3, r3, #1
 8009960:	2203      	movs	r2, #3
 8009962:	fa02 f303 	lsl.w	r3, r2, r3
 8009966:	43db      	mvns	r3, r3
 8009968:	693a      	ldr	r2, [r7, #16]
 800996a:	4013      	ands	r3, r2
 800996c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f003 0203 	and.w	r2, r3, #3
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	fa02 f303 	lsl.w	r3, r2, r3
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4313      	orrs	r3, r2
 8009982:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009992:	2b00      	cmp	r3, #0
 8009994:	f000 8094 	beq.w	8009ac0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009998:	4b52      	ldr	r3, [pc, #328]	; (8009ae4 <HAL_GPIO_Init+0x2c0>)
 800999a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800999c:	4a51      	ldr	r2, [pc, #324]	; (8009ae4 <HAL_GPIO_Init+0x2c0>)
 800999e:	f043 0301 	orr.w	r3, r3, #1
 80099a2:	6613      	str	r3, [r2, #96]	; 0x60
 80099a4:	4b4f      	ldr	r3, [pc, #316]	; (8009ae4 <HAL_GPIO_Init+0x2c0>)
 80099a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	60bb      	str	r3, [r7, #8]
 80099ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80099b0:	4a4d      	ldr	r2, [pc, #308]	; (8009ae8 <HAL_GPIO_Init+0x2c4>)
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	089b      	lsrs	r3, r3, #2
 80099b6:	3302      	adds	r3, #2
 80099b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	220f      	movs	r2, #15
 80099c8:	fa02 f303 	lsl.w	r3, r2, r3
 80099cc:	43db      	mvns	r3, r3
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4013      	ands	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80099da:	d00d      	beq.n	80099f8 <HAL_GPIO_Init+0x1d4>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	4a43      	ldr	r2, [pc, #268]	; (8009aec <HAL_GPIO_Init+0x2c8>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d007      	beq.n	80099f4 <HAL_GPIO_Init+0x1d0>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a42      	ldr	r2, [pc, #264]	; (8009af0 <HAL_GPIO_Init+0x2cc>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d101      	bne.n	80099f0 <HAL_GPIO_Init+0x1cc>
 80099ec:	2302      	movs	r3, #2
 80099ee:	e004      	b.n	80099fa <HAL_GPIO_Init+0x1d6>
 80099f0:	2307      	movs	r3, #7
 80099f2:	e002      	b.n	80099fa <HAL_GPIO_Init+0x1d6>
 80099f4:	2301      	movs	r3, #1
 80099f6:	e000      	b.n	80099fa <HAL_GPIO_Init+0x1d6>
 80099f8:	2300      	movs	r3, #0
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	f002 0203 	and.w	r2, r2, #3
 8009a00:	0092      	lsls	r2, r2, #2
 8009a02:	4093      	lsls	r3, r2
 8009a04:	693a      	ldr	r2, [r7, #16]
 8009a06:	4313      	orrs	r3, r2
 8009a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009a0a:	4937      	ldr	r1, [pc, #220]	; (8009ae8 <HAL_GPIO_Init+0x2c4>)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	089b      	lsrs	r3, r3, #2
 8009a10:	3302      	adds	r3, #2
 8009a12:	693a      	ldr	r2, [r7, #16]
 8009a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009a18:	4b36      	ldr	r3, [pc, #216]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	43db      	mvns	r3, r3
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	4013      	ands	r3, r2
 8009a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d003      	beq.n	8009a3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009a3c:	4a2d      	ldr	r2, [pc, #180]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009a42:	4b2c      	ldr	r3, [pc, #176]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	43db      	mvns	r3, r3
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d003      	beq.n	8009a66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009a5e:	693a      	ldr	r2, [r7, #16]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009a66:	4a23      	ldr	r2, [pc, #140]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8009a6c:	4b21      	ldr	r3, [pc, #132]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	43db      	mvns	r3, r3
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d003      	beq.n	8009a90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009a90:	4a18      	ldr	r2, [pc, #96]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009a96:	4b17      	ldr	r3, [pc, #92]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	43db      	mvns	r3, r3
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009aba:	4a0e      	ldr	r2, [pc, #56]	; (8009af4 <HAL_GPIO_Init+0x2d0>)
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	f47f aeaf 	bne.w	8009834 <HAL_GPIO_Init+0x10>
  }
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	371c      	adds	r7, #28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr
 8009ae4:	40021000 	.word	0x40021000
 8009ae8:	40010000 	.word	0x40010000
 8009aec:	48000400 	.word	0x48000400
 8009af0:	48000800 	.word	0x48000800
 8009af4:	40010400 	.word	0x40010400

08009af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	460b      	mov	r3, r1
 8009b02:	807b      	strh	r3, [r7, #2]
 8009b04:	4613      	mov	r3, r2
 8009b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b08:	787b      	ldrb	r3, [r7, #1]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009b0e:	887a      	ldrh	r2, [r7, #2]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009b14:	e002      	b.n	8009b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009b16:	887a      	ldrh	r2, [r7, #2]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	460b      	mov	r3, r1
 8009b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009b3a:	887a      	ldrh	r2, [r7, #2]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	041a      	lsls	r2, r3, #16
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	43d9      	mvns	r1, r3
 8009b46:	887b      	ldrh	r3, [r7, #2]
 8009b48:	400b      	ands	r3, r1
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	619a      	str	r2, [r3, #24]
}
 8009b50:	bf00      	nop
 8009b52:	3714      	adds	r7, #20
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009b60:	4b04      	ldr	r3, [pc, #16]	; (8009b74 <HAL_PWREx_GetVoltageRange+0x18>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	40007000 	.word	0x40007000

08009b78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b86:	d130      	bne.n	8009bea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b88:	4b23      	ldr	r3, [pc, #140]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b94:	d038      	beq.n	8009c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009b96:	4b20      	ldr	r3, [pc, #128]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009b9e:	4a1e      	ldr	r2, [pc, #120]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009ba0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ba4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009ba6:	4b1d      	ldr	r3, [pc, #116]	; (8009c1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2232      	movs	r2, #50	; 0x32
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8009bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb6:	0c9b      	lsrs	r3, r3, #18
 8009bb8:	3301      	adds	r3, #1
 8009bba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bbc:	e002      	b.n	8009bc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009bc4:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bc6:	695b      	ldr	r3, [r3, #20]
 8009bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bd0:	d102      	bne.n	8009bd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f2      	bne.n	8009bbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009bd8:	4b0f      	ldr	r3, [pc, #60]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bda:	695b      	ldr	r3, [r3, #20]
 8009bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009be4:	d110      	bne.n	8009c08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e00f      	b.n	8009c0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8009bea:	4b0b      	ldr	r3, [pc, #44]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf6:	d007      	beq.n	8009c08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009bf8:	4b07      	ldr	r3, [pc, #28]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009c00:	4a05      	ldr	r2, [pc, #20]	; (8009c18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40007000 	.word	0x40007000
 8009c1c:	20000000 	.word	0x20000000
 8009c20:	431bde83 	.word	0x431bde83

08009c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d102      	bne.n	8009c38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f000 bc02 	b.w	800a43c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c38:	4b96      	ldr	r3, [pc, #600]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f003 030c 	and.w	r3, r3, #12
 8009c40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c42:	4b94      	ldr	r3, [pc, #592]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	f003 0303 	and.w	r3, r3, #3
 8009c4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0310 	and.w	r3, r3, #16
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 80e4 	beq.w	8009e22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d007      	beq.n	8009c70 <HAL_RCC_OscConfig+0x4c>
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	2b0c      	cmp	r3, #12
 8009c64:	f040 808b 	bne.w	8009d7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	f040 8087 	bne.w	8009d7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009c70:	4b88      	ldr	r3, [pc, #544]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0302 	and.w	r3, r3, #2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <HAL_RCC_OscConfig+0x64>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d101      	bne.n	8009c88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e3d9      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6a1a      	ldr	r2, [r3, #32]
 8009c8c:	4b81      	ldr	r3, [pc, #516]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0308 	and.w	r3, r3, #8
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d004      	beq.n	8009ca2 <HAL_RCC_OscConfig+0x7e>
 8009c98:	4b7e      	ldr	r3, [pc, #504]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ca0:	e005      	b.n	8009cae <HAL_RCC_OscConfig+0x8a>
 8009ca2:	4b7c      	ldr	r3, [pc, #496]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ca8:	091b      	lsrs	r3, r3, #4
 8009caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d223      	bcs.n	8009cfa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a1b      	ldr	r3, [r3, #32]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fd8c 	bl	800a7d4 <RCC_SetFlashLatencyFromMSIRange>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e3ba      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cc6:	4b73      	ldr	r3, [pc, #460]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a72      	ldr	r2, [pc, #456]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009ccc:	f043 0308 	orr.w	r3, r3, #8
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	4b70      	ldr	r3, [pc, #448]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	496d      	ldr	r1, [pc, #436]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ce4:	4b6b      	ldr	r3, [pc, #428]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	4968      	ldr	r1, [pc, #416]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	604b      	str	r3, [r1, #4]
 8009cf8:	e025      	b.n	8009d46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009cfa:	4b66      	ldr	r3, [pc, #408]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a65      	ldr	r2, [pc, #404]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d00:	f043 0308 	orr.w	r3, r3, #8
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	4b63      	ldr	r3, [pc, #396]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a1b      	ldr	r3, [r3, #32]
 8009d12:	4960      	ldr	r1, [pc, #384]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009d18:	4b5e      	ldr	r3, [pc, #376]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	495b      	ldr	r1, [pc, #364]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d109      	bne.n	8009d46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fd4c 	bl	800a7d4 <RCC_SetFlashLatencyFromMSIRange>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009d42:	2301      	movs	r3, #1
 8009d44:	e37a      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009d46:	f000 fc81 	bl	800a64c <HAL_RCC_GetSysClockFreq>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	4b51      	ldr	r3, [pc, #324]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	091b      	lsrs	r3, r3, #4
 8009d52:	f003 030f 	and.w	r3, r3, #15
 8009d56:	4950      	ldr	r1, [pc, #320]	; (8009e98 <HAL_RCC_OscConfig+0x274>)
 8009d58:	5ccb      	ldrb	r3, [r1, r3]
 8009d5a:	f003 031f 	and.w	r3, r3, #31
 8009d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d62:	4a4e      	ldr	r2, [pc, #312]	; (8009e9c <HAL_RCC_OscConfig+0x278>)
 8009d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009d66:	4b4e      	ldr	r3, [pc, #312]	; (8009ea0 <HAL_RCC_OscConfig+0x27c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff fb6e 	bl	800944c <HAL_InitTick>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d052      	beq.n	8009e20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8009d7a:	7bfb      	ldrb	r3, [r7, #15]
 8009d7c:	e35e      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d032      	beq.n	8009dec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009d86:	4b43      	ldr	r3, [pc, #268]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a42      	ldr	r2, [pc, #264]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009d8c:	f043 0301 	orr.w	r3, r3, #1
 8009d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009d92:	f7ff fbab 	bl	80094ec <HAL_GetTick>
 8009d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009d9a:	f7ff fba7 	bl	80094ec <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e347      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009dac:	4b39      	ldr	r3, [pc, #228]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d0f0      	beq.n	8009d9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009db8:	4b36      	ldr	r3, [pc, #216]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a35      	ldr	r2, [pc, #212]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dbe:	f043 0308 	orr.w	r3, r3, #8
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	4b33      	ldr	r3, [pc, #204]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	4930      	ldr	r1, [pc, #192]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009dd6:	4b2f      	ldr	r3, [pc, #188]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	492b      	ldr	r1, [pc, #172]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009de6:	4313      	orrs	r3, r2
 8009de8:	604b      	str	r3, [r1, #4]
 8009dea:	e01a      	b.n	8009e22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009dec:	4b29      	ldr	r3, [pc, #164]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a28      	ldr	r2, [pc, #160]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009df2:	f023 0301 	bic.w	r3, r3, #1
 8009df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009df8:	f7ff fb78 	bl	80094ec <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009e00:	f7ff fb74 	bl	80094ec <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e314      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009e12:	4b20      	ldr	r3, [pc, #128]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 0302 	and.w	r3, r3, #2
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1f0      	bne.n	8009e00 <HAL_RCC_OscConfig+0x1dc>
 8009e1e:	e000      	b.n	8009e22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f003 0301 	and.w	r3, r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d073      	beq.n	8009f16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	2b08      	cmp	r3, #8
 8009e32:	d005      	beq.n	8009e40 <HAL_RCC_OscConfig+0x21c>
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	2b0c      	cmp	r3, #12
 8009e38:	d10e      	bne.n	8009e58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b03      	cmp	r3, #3
 8009e3e:	d10b      	bne.n	8009e58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e40:	4b14      	ldr	r3, [pc, #80]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d063      	beq.n	8009f14 <HAL_RCC_OscConfig+0x2f0>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d15f      	bne.n	8009f14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	e2f1      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e60:	d106      	bne.n	8009e70 <HAL_RCC_OscConfig+0x24c>
 8009e62:	4b0c      	ldr	r3, [pc, #48]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a0b      	ldr	r2, [pc, #44]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	e025      	b.n	8009ebc <HAL_RCC_OscConfig+0x298>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e78:	d114      	bne.n	8009ea4 <HAL_RCC_OscConfig+0x280>
 8009e7a:	4b06      	ldr	r3, [pc, #24]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a05      	ldr	r2, [pc, #20]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a02      	ldr	r2, [pc, #8]	; (8009e94 <HAL_RCC_OscConfig+0x270>)
 8009e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	e013      	b.n	8009ebc <HAL_RCC_OscConfig+0x298>
 8009e94:	40021000 	.word	0x40021000
 8009e98:	08011328 	.word	0x08011328
 8009e9c:	20000000 	.word	0x20000000
 8009ea0:	20000004 	.word	0x20000004
 8009ea4:	4ba0      	ldr	r3, [pc, #640]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a9f      	ldr	r2, [pc, #636]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eae:	6013      	str	r3, [r2, #0]
 8009eb0:	4b9d      	ldr	r3, [pc, #628]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a9c      	ldr	r2, [pc, #624]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d013      	beq.n	8009eec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec4:	f7ff fb12 	bl	80094ec <HAL_GetTick>
 8009ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009eca:	e008      	b.n	8009ede <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ecc:	f7ff fb0e 	bl	80094ec <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	2b64      	cmp	r3, #100	; 0x64
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e2ae      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ede:	4b92      	ldr	r3, [pc, #584]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d0f0      	beq.n	8009ecc <HAL_RCC_OscConfig+0x2a8>
 8009eea:	e014      	b.n	8009f16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eec:	f7ff fafe 	bl	80094ec <HAL_GetTick>
 8009ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ef2:	e008      	b.n	8009f06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ef4:	f7ff fafa 	bl	80094ec <HAL_GetTick>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	2b64      	cmp	r3, #100	; 0x64
 8009f00:	d901      	bls.n	8009f06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	e29a      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009f06:	4b88      	ldr	r3, [pc, #544]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f0      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x2d0>
 8009f12:	e000      	b.n	8009f16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d060      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d005      	beq.n	8009f34 <HAL_RCC_OscConfig+0x310>
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	2b0c      	cmp	r3, #12
 8009f2c:	d119      	bne.n	8009f62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d116      	bne.n	8009f62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f34:	4b7c      	ldr	r3, [pc, #496]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d005      	beq.n	8009f4c <HAL_RCC_OscConfig+0x328>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d101      	bne.n	8009f4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e277      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f4c:	4b76      	ldr	r3, [pc, #472]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	061b      	lsls	r3, r3, #24
 8009f5a:	4973      	ldr	r1, [pc, #460]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f60:	e040      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d023      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f6a:	4b6f      	ldr	r3, [pc, #444]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a6e      	ldr	r2, [pc, #440]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f76:	f7ff fab9 	bl	80094ec <HAL_GetTick>
 8009f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f7c:	e008      	b.n	8009f90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f7e:	f7ff fab5 	bl	80094ec <HAL_GetTick>
 8009f82:	4602      	mov	r2, r0
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	1ad3      	subs	r3, r2, r3
 8009f88:	2b02      	cmp	r3, #2
 8009f8a:	d901      	bls.n	8009f90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e255      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f90:	4b65      	ldr	r3, [pc, #404]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0f0      	beq.n	8009f7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f9c:	4b62      	ldr	r3, [pc, #392]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	061b      	lsls	r3, r3, #24
 8009faa:	495f      	ldr	r1, [pc, #380]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	604b      	str	r3, [r1, #4]
 8009fb0:	e018      	b.n	8009fe4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fb2:	4b5d      	ldr	r3, [pc, #372]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a5c      	ldr	r2, [pc, #368]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fbe:	f7ff fa95 	bl	80094ec <HAL_GetTick>
 8009fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fc4:	e008      	b.n	8009fd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fc6:	f7ff fa91 	bl	80094ec <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d901      	bls.n	8009fd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e231      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fd8:	4b53      	ldr	r3, [pc, #332]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1f0      	bne.n	8009fc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0308 	and.w	r3, r3, #8
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d03c      	beq.n	800a06a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	695b      	ldr	r3, [r3, #20]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d01c      	beq.n	800a032 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ff8:	4b4b      	ldr	r3, [pc, #300]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 8009ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ffe:	4a4a      	ldr	r2, [pc, #296]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a000:	f043 0301 	orr.w	r3, r3, #1
 800a004:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a008:	f7ff fa70 	bl	80094ec <HAL_GetTick>
 800a00c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a00e:	e008      	b.n	800a022 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a010:	f7ff fa6c 	bl	80094ec <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d901      	bls.n	800a022 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e20c      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a022:	4b41      	ldr	r3, [pc, #260]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0ef      	beq.n	800a010 <HAL_RCC_OscConfig+0x3ec>
 800a030:	e01b      	b.n	800a06a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a032:	4b3d      	ldr	r3, [pc, #244]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a038:	4a3b      	ldr	r2, [pc, #236]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a03a:	f023 0301 	bic.w	r3, r3, #1
 800a03e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a042:	f7ff fa53 	bl	80094ec <HAL_GetTick>
 800a046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a048:	e008      	b.n	800a05c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a04a:	f7ff fa4f 	bl	80094ec <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	2b02      	cmp	r3, #2
 800a056:	d901      	bls.n	800a05c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e1ef      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a05c:	4b32      	ldr	r3, [pc, #200]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a05e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1ef      	bne.n	800a04a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 0304 	and.w	r3, r3, #4
 800a072:	2b00      	cmp	r3, #0
 800a074:	f000 80a6 	beq.w	800a1c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a078:	2300      	movs	r3, #0
 800a07a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800a07c:	4b2a      	ldr	r3, [pc, #168]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a07e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10d      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a088:	4b27      	ldr	r3, [pc, #156]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08c:	4a26      	ldr	r2, [pc, #152]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a08e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a092:	6593      	str	r3, [r2, #88]	; 0x58
 800a094:	4b24      	ldr	r3, [pc, #144]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a09c:	60bb      	str	r3, [r7, #8]
 800a09e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0a4:	4b21      	ldr	r3, [pc, #132]	; (800a12c <HAL_RCC_OscConfig+0x508>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d118      	bne.n	800a0e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0b0:	4b1e      	ldr	r3, [pc, #120]	; (800a12c <HAL_RCC_OscConfig+0x508>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	; (800a12c <HAL_RCC_OscConfig+0x508>)
 800a0b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0bc:	f7ff fa16 	bl	80094ec <HAL_GetTick>
 800a0c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0c4:	f7ff fa12 	bl	80094ec <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d901      	bls.n	800a0d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e1b2      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0d6:	4b15      	ldr	r3, [pc, #84]	; (800a12c <HAL_RCC_OscConfig+0x508>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0f0      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d108      	bne.n	800a0fc <HAL_RCC_OscConfig+0x4d8>
 800a0ea:	4b0f      	ldr	r3, [pc, #60]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f0:	4a0d      	ldr	r2, [pc, #52]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a0f2:	f043 0301 	orr.w	r3, r3, #1
 800a0f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a0fa:	e029      	b.n	800a150 <HAL_RCC_OscConfig+0x52c>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b05      	cmp	r3, #5
 800a102:	d115      	bne.n	800a130 <HAL_RCC_OscConfig+0x50c>
 800a104:	4b08      	ldr	r3, [pc, #32]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a10a:	4a07      	ldr	r2, [pc, #28]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a10c:	f043 0304 	orr.w	r3, r3, #4
 800a110:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a114:	4b04      	ldr	r3, [pc, #16]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11a:	4a03      	ldr	r2, [pc, #12]	; (800a128 <HAL_RCC_OscConfig+0x504>)
 800a11c:	f043 0301 	orr.w	r3, r3, #1
 800a120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a124:	e014      	b.n	800a150 <HAL_RCC_OscConfig+0x52c>
 800a126:	bf00      	nop
 800a128:	40021000 	.word	0x40021000
 800a12c:	40007000 	.word	0x40007000
 800a130:	4b9a      	ldr	r3, [pc, #616]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a136:	4a99      	ldr	r2, [pc, #612]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a138:	f023 0301 	bic.w	r3, r3, #1
 800a13c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a140:	4b96      	ldr	r3, [pc, #600]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a146:	4a95      	ldr	r2, [pc, #596]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a148:	f023 0304 	bic.w	r3, r3, #4
 800a14c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d016      	beq.n	800a186 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a158:	f7ff f9c8 	bl	80094ec <HAL_GetTick>
 800a15c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a15e:	e00a      	b.n	800a176 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a160:	f7ff f9c4 	bl	80094ec <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16e:	4293      	cmp	r3, r2
 800a170:	d901      	bls.n	800a176 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e162      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a176:	4b89      	ldr	r3, [pc, #548]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0ed      	beq.n	800a160 <HAL_RCC_OscConfig+0x53c>
 800a184:	e015      	b.n	800a1b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a186:	f7ff f9b1 	bl	80094ec <HAL_GetTick>
 800a18a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a18c:	e00a      	b.n	800a1a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a18e:	f7ff f9ad 	bl	80094ec <HAL_GetTick>
 800a192:	4602      	mov	r2, r0
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	1ad3      	subs	r3, r2, r3
 800a198:	f241 3288 	movw	r2, #5000	; 0x1388
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d901      	bls.n	800a1a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e14b      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1a4:	4b7d      	ldr	r3, [pc, #500]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1aa:	f003 0302 	and.w	r3, r3, #2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1ed      	bne.n	800a18e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a1b2:	7ffb      	ldrb	r3, [r7, #31]
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d105      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1b8:	4b78      	ldr	r3, [pc, #480]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1bc:	4a77      	ldr	r2, [pc, #476]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a1be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0320 	and.w	r3, r3, #32
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d03c      	beq.n	800a24a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01c      	beq.n	800a212 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1d8:	4b70      	ldr	r3, [pc, #448]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a1da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1de:	4a6f      	ldr	r2, [pc, #444]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1e8:	f7ff f980 	bl	80094ec <HAL_GetTick>
 800a1ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a1ee:	e008      	b.n	800a202 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1f0:	f7ff f97c 	bl	80094ec <HAL_GetTick>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	1ad3      	subs	r3, r2, r3
 800a1fa:	2b02      	cmp	r3, #2
 800a1fc:	d901      	bls.n	800a202 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800a1fe:	2303      	movs	r3, #3
 800a200:	e11c      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a202:	4b66      	ldr	r3, [pc, #408]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a208:	f003 0302 	and.w	r3, r3, #2
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0ef      	beq.n	800a1f0 <HAL_RCC_OscConfig+0x5cc>
 800a210:	e01b      	b.n	800a24a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a212:	4b62      	ldr	r3, [pc, #392]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a218:	4a60      	ldr	r2, [pc, #384]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a21a:	f023 0301 	bic.w	r3, r3, #1
 800a21e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a222:	f7ff f963 	bl	80094ec <HAL_GetTick>
 800a226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a228:	e008      	b.n	800a23c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a22a:	f7ff f95f 	bl	80094ec <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	2b02      	cmp	r3, #2
 800a236:	d901      	bls.n	800a23c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800a238:	2303      	movs	r3, #3
 800a23a:	e0ff      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a23c:	4b57      	ldr	r3, [pc, #348]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a23e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a242:	f003 0302 	and.w	r3, r3, #2
 800a246:	2b00      	cmp	r3, #0
 800a248:	d1ef      	bne.n	800a22a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24e:	2b00      	cmp	r3, #0
 800a250:	f000 80f3 	beq.w	800a43a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a258:	2b02      	cmp	r3, #2
 800a25a:	f040 80c9 	bne.w	800a3f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800a25e:	4b4f      	ldr	r3, [pc, #316]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f003 0203 	and.w	r2, r3, #3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26e:	429a      	cmp	r2, r3
 800a270:	d12c      	bne.n	800a2cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	3b01      	subs	r3, #1
 800a27e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a280:	429a      	cmp	r2, r3
 800a282:	d123      	bne.n	800a2cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a290:	429a      	cmp	r2, r3
 800a292:	d11b      	bne.n	800a2cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d113      	bne.n	800a2cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d109      	bne.n	800a2cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d06b      	beq.n	800a3a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	2b0c      	cmp	r3, #12
 800a2d0:	d062      	beq.n	800a398 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800a2d2:	4b32      	ldr	r3, [pc, #200]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e0ac      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800a2e2:	4b2e      	ldr	r3, [pc, #184]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a2d      	ldr	r2, [pc, #180]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a2e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a2ee:	f7ff f8fd 	bl	80094ec <HAL_GetTick>
 800a2f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2f4:	e008      	b.n	800a308 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2f6:	f7ff f8f9 	bl	80094ec <HAL_GetTick>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d901      	bls.n	800a308 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e099      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a308:	4b24      	ldr	r3, [pc, #144]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1f0      	bne.n	800a2f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a314:	4b21      	ldr	r3, [pc, #132]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a316:	68da      	ldr	r2, [r3, #12]
 800a318:	4b21      	ldr	r3, [pc, #132]	; (800a3a0 <HAL_RCC_OscConfig+0x77c>)
 800a31a:	4013      	ands	r3, r2
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a324:	3a01      	subs	r2, #1
 800a326:	0112      	lsls	r2, r2, #4
 800a328:	4311      	orrs	r1, r2
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a32e:	0212      	lsls	r2, r2, #8
 800a330:	4311      	orrs	r1, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a336:	0852      	lsrs	r2, r2, #1
 800a338:	3a01      	subs	r2, #1
 800a33a:	0552      	lsls	r2, r2, #21
 800a33c:	4311      	orrs	r1, r2
 800a33e:	687a      	ldr	r2, [r7, #4]
 800a340:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800a342:	0852      	lsrs	r2, r2, #1
 800a344:	3a01      	subs	r2, #1
 800a346:	0652      	lsls	r2, r2, #25
 800a348:	4311      	orrs	r1, r2
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a34e:	06d2      	lsls	r2, r2, #27
 800a350:	430a      	orrs	r2, r1
 800a352:	4912      	ldr	r1, [pc, #72]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a354:	4313      	orrs	r3, r2
 800a356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800a358:	4b10      	ldr	r3, [pc, #64]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a0f      	ldr	r2, [pc, #60]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a35e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a364:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	4a0c      	ldr	r2, [pc, #48]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a36a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a36e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800a370:	f7ff f8bc 	bl	80094ec <HAL_GetTick>
 800a374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a376:	e008      	b.n	800a38a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a378:	f7ff f8b8 	bl	80094ec <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d901      	bls.n	800a38a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e058      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a38a:	4b04      	ldr	r3, [pc, #16]	; (800a39c <HAL_RCC_OscConfig+0x778>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a392:	2b00      	cmp	r3, #0
 800a394:	d0f0      	beq.n	800a378 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a396:	e050      	b.n	800a43a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e04f      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
 800a39c:	40021000 	.word	0x40021000
 800a3a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3a4:	4b27      	ldr	r3, [pc, #156]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d144      	bne.n	800a43a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800a3b0:	4b24      	ldr	r3, [pc, #144]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a23      	ldr	r2, [pc, #140]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a3bc:	4b21      	ldr	r3, [pc, #132]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	4a20      	ldr	r2, [pc, #128]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a3c8:	f7ff f890 	bl	80094ec <HAL_GetTick>
 800a3cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3ce:	e008      	b.n	800a3e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3d0:	f7ff f88c 	bl	80094ec <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d901      	bls.n	800a3e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	e02c      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a3e2:	4b18      	ldr	r3, [pc, #96]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0f0      	beq.n	800a3d0 <HAL_RCC_OscConfig+0x7ac>
 800a3ee:	e024      	b.n	800a43a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	2b0c      	cmp	r3, #12
 800a3f4:	d01f      	beq.n	800a436 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3f6:	4b13      	ldr	r3, [pc, #76]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a12      	ldr	r2, [pc, #72]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a3fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a402:	f7ff f873 	bl	80094ec <HAL_GetTick>
 800a406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a408:	e008      	b.n	800a41c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a40a:	f7ff f86f 	bl	80094ec <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e00f      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a41c:	4b09      	ldr	r3, [pc, #36]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d1f0      	bne.n	800a40a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800a428:	4b06      	ldr	r3, [pc, #24]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	4905      	ldr	r1, [pc, #20]	; (800a444 <HAL_RCC_OscConfig+0x820>)
 800a42e:	4b06      	ldr	r3, [pc, #24]	; (800a448 <HAL_RCC_OscConfig+0x824>)
 800a430:	4013      	ands	r3, r2
 800a432:	60cb      	str	r3, [r1, #12]
 800a434:	e001      	b.n	800a43a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e000      	b.n	800a43c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3720      	adds	r7, #32
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}
 800a444:	40021000 	.word	0x40021000
 800a448:	feeefffc 	.word	0xfeeefffc

0800a44c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d101      	bne.n	800a460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e0e7      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a460:	4b75      	ldr	r3, [pc, #468]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d910      	bls.n	800a490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a46e:	4b72      	ldr	r3, [pc, #456]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f023 0207 	bic.w	r2, r3, #7
 800a476:	4970      	ldr	r1, [pc, #448]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a47e:	4b6e      	ldr	r3, [pc, #440]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d001      	beq.n	800a490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e0cf      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d010      	beq.n	800a4be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	689a      	ldr	r2, [r3, #8]
 800a4a0:	4b66      	ldr	r3, [pc, #408]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d908      	bls.n	800a4be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ac:	4b63      	ldr	r3, [pc, #396]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	4960      	ldr	r1, [pc, #384]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d04c      	beq.n	800a564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d107      	bne.n	800a4e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a4d2:	4b5a      	ldr	r3, [pc, #360]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d121      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e0a6      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d107      	bne.n	800a4fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4ea:	4b54      	ldr	r3, [pc, #336]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d115      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e09a      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d107      	bne.n	800a512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a502:	4b4e      	ldr	r3, [pc, #312]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d109      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e08e      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a512:	4b4a      	ldr	r3, [pc, #296]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e086      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a522:	4b46      	ldr	r3, [pc, #280]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f023 0203 	bic.w	r2, r3, #3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	4943      	ldr	r1, [pc, #268]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a530:	4313      	orrs	r3, r2
 800a532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a534:	f7fe ffda 	bl	80094ec <HAL_GetTick>
 800a538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a53a:	e00a      	b.n	800a552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a53c:	f7fe ffd6 	bl	80094ec <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d901      	bls.n	800a552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800a54e:	2303      	movs	r3, #3
 800a550:	e06e      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a552:	4b3a      	ldr	r3, [pc, #232]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f003 020c 	and.w	r2, r3, #12
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	429a      	cmp	r2, r3
 800a562:	d1eb      	bne.n	800a53c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f003 0302 	and.w	r3, r3, #2
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d010      	beq.n	800a592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	4b31      	ldr	r3, [pc, #196]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d208      	bcs.n	800a592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a580:	4b2e      	ldr	r3, [pc, #184]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	492b      	ldr	r1, [pc, #172]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a592:	4b29      	ldr	r3, [pc, #164]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d210      	bcs.n	800a5c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a0:	4b25      	ldr	r3, [pc, #148]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f023 0207 	bic.w	r2, r3, #7
 800a5a8:	4923      	ldr	r1, [pc, #140]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5b0:	4b21      	ldr	r3, [pc, #132]	; (800a638 <HAL_RCC_ClockConfig+0x1ec>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0307 	and.w	r3, r3, #7
 800a5b8:	683a      	ldr	r2, [r7, #0]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d001      	beq.n	800a5c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e036      	b.n	800a630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0304 	and.w	r3, r3, #4
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d008      	beq.n	800a5e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5ce:	4b1b      	ldr	r3, [pc, #108]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	4918      	ldr	r1, [pc, #96]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d009      	beq.n	800a600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5ec:	4b13      	ldr	r3, [pc, #76]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	691b      	ldr	r3, [r3, #16]
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	4910      	ldr	r1, [pc, #64]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a600:	f000 f824 	bl	800a64c <HAL_RCC_GetSysClockFreq>
 800a604:	4602      	mov	r2, r0
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <HAL_RCC_ClockConfig+0x1f0>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	091b      	lsrs	r3, r3, #4
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	490b      	ldr	r1, [pc, #44]	; (800a640 <HAL_RCC_ClockConfig+0x1f4>)
 800a612:	5ccb      	ldrb	r3, [r1, r3]
 800a614:	f003 031f 	and.w	r3, r3, #31
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	4a09      	ldr	r2, [pc, #36]	; (800a644 <HAL_RCC_ClockConfig+0x1f8>)
 800a61e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <HAL_RCC_ClockConfig+0x1fc>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe ff11 	bl	800944c <HAL_InitTick>
 800a62a:	4603      	mov	r3, r0
 800a62c:	72fb      	strb	r3, [r7, #11]

  return status;
 800a62e:	7afb      	ldrb	r3, [r7, #11]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	40022000 	.word	0x40022000
 800a63c:	40021000 	.word	0x40021000
 800a640:	08011328 	.word	0x08011328
 800a644:	20000000 	.word	0x20000000
 800a648:	20000004 	.word	0x20000004

0800a64c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b089      	sub	sp, #36	; 0x24
 800a650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	61fb      	str	r3, [r7, #28]
 800a656:	2300      	movs	r3, #0
 800a658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a65a:	4b3e      	ldr	r3, [pc, #248]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f003 030c 	and.w	r3, r3, #12
 800a662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a664:	4b3b      	ldr	r3, [pc, #236]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	f003 0303 	and.w	r3, r3, #3
 800a66c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d005      	beq.n	800a680 <HAL_RCC_GetSysClockFreq+0x34>
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2b0c      	cmp	r3, #12
 800a678:	d121      	bne.n	800a6be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d11e      	bne.n	800a6be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a680:	4b34      	ldr	r3, [pc, #208]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0308 	and.w	r3, r3, #8
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d107      	bne.n	800a69c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a68c:	4b31      	ldr	r3, [pc, #196]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a68e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	61fb      	str	r3, [r7, #28]
 800a69a:	e005      	b.n	800a6a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a69c:	4b2d      	ldr	r3, [pc, #180]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	091b      	lsrs	r3, r3, #4
 800a6a2:	f003 030f 	and.w	r3, r3, #15
 800a6a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a6a8:	4a2b      	ldr	r2, [pc, #172]	; (800a758 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10d      	bne.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6bc:	e00a      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d102      	bne.n	800a6ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a6c4:	4b25      	ldr	r3, [pc, #148]	; (800a75c <HAL_RCC_GetSysClockFreq+0x110>)
 800a6c6:	61bb      	str	r3, [r7, #24]
 800a6c8:	e004      	b.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d101      	bne.n	800a6d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6d0:	4b23      	ldr	r3, [pc, #140]	; (800a760 <HAL_RCC_GetSysClockFreq+0x114>)
 800a6d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	2b0c      	cmp	r3, #12
 800a6d8:	d134      	bne.n	800a744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6da:	4b1e      	ldr	r3, [pc, #120]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	f003 0303 	and.w	r3, r3, #3
 800a6e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d003      	beq.n	800a6f2 <HAL_RCC_GetSysClockFreq+0xa6>
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	2b03      	cmp	r3, #3
 800a6ee:	d003      	beq.n	800a6f8 <HAL_RCC_GetSysClockFreq+0xac>
 800a6f0:	e005      	b.n	800a6fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a6f2:	4b1a      	ldr	r3, [pc, #104]	; (800a75c <HAL_RCC_GetSysClockFreq+0x110>)
 800a6f4:	617b      	str	r3, [r7, #20]
      break;
 800a6f6:	e005      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a6f8:	4b19      	ldr	r3, [pc, #100]	; (800a760 <HAL_RCC_GetSysClockFreq+0x114>)
 800a6fa:	617b      	str	r3, [r7, #20]
      break;
 800a6fc:	e002      	b.n	800a704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	617b      	str	r3, [r7, #20]
      break;
 800a702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a704:	4b13      	ldr	r3, [pc, #76]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	091b      	lsrs	r3, r3, #4
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	3301      	adds	r3, #1
 800a710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	0a1b      	lsrs	r3, r3, #8
 800a718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	fb03 f202 	mul.w	r2, r3, r2
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	fbb2 f3f3 	udiv	r3, r2, r3
 800a728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a72a:	4b0a      	ldr	r3, [pc, #40]	; (800a754 <HAL_RCC_GetSysClockFreq+0x108>)
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	0e5b      	lsrs	r3, r3, #25
 800a730:	f003 0303 	and.w	r3, r3, #3
 800a734:	3301      	adds	r3, #1
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a744:	69bb      	ldr	r3, [r7, #24]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3724      	adds	r7, #36	; 0x24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr
 800a752:	bf00      	nop
 800a754:	40021000 	.word	0x40021000
 800a758:	08011340 	.word	0x08011340
 800a75c:	00f42400 	.word	0x00f42400
 800a760:	007a1200 	.word	0x007a1200

0800a764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a768:	4b03      	ldr	r3, [pc, #12]	; (800a778 <HAL_RCC_GetHCLKFreq+0x14>)
 800a76a:	681b      	ldr	r3, [r3, #0]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000000 	.word	0x20000000

0800a77c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a780:	f7ff fff0 	bl	800a764 <HAL_RCC_GetHCLKFreq>
 800a784:	4602      	mov	r2, r0
 800a786:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	4904      	ldr	r1, [pc, #16]	; (800a7a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a792:	5ccb      	ldrb	r3, [r1, r3]
 800a794:	f003 031f 	and.w	r3, r3, #31
 800a798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	40021000 	.word	0x40021000
 800a7a4:	08011338 	.word	0x08011338

0800a7a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a7ac:	f7ff ffda 	bl	800a764 <HAL_RCC_GetHCLKFreq>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	4b06      	ldr	r3, [pc, #24]	; (800a7cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	0adb      	lsrs	r3, r3, #11
 800a7b8:	f003 0307 	and.w	r3, r3, #7
 800a7bc:	4904      	ldr	r1, [pc, #16]	; (800a7d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7be:	5ccb      	ldrb	r3, [r1, r3]
 800a7c0:	f003 031f 	and.w	r3, r3, #31
 800a7c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	40021000 	.word	0x40021000
 800a7d0:	08011338 	.word	0x08011338

0800a7d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a7dc:	2300      	movs	r3, #0
 800a7de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a7e0:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a7ec:	f7ff f9b6 	bl	8009b5c <HAL_PWREx_GetVoltageRange>
 800a7f0:	6178      	str	r0, [r7, #20]
 800a7f2:	e014      	b.n	800a81e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	4a24      	ldr	r2, [pc, #144]	; (800a88c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a7fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7fe:	6593      	str	r3, [r2, #88]	; 0x58
 800a800:	4b22      	ldr	r3, [pc, #136]	; (800a88c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a808:	60fb      	str	r3, [r7, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a80c:	f7ff f9a6 	bl	8009b5c <HAL_PWREx_GetVoltageRange>
 800a810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a812:	4b1e      	ldr	r3, [pc, #120]	; (800a88c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a816:	4a1d      	ldr	r2, [pc, #116]	; (800a88c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a81c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a824:	d10b      	bne.n	800a83e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	d919      	bls.n	800a860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2ba0      	cmp	r3, #160	; 0xa0
 800a830:	d902      	bls.n	800a838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a832:	2302      	movs	r3, #2
 800a834:	613b      	str	r3, [r7, #16]
 800a836:	e013      	b.n	800a860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a838:	2301      	movs	r3, #1
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	e010      	b.n	800a860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b80      	cmp	r3, #128	; 0x80
 800a842:	d902      	bls.n	800a84a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a844:	2303      	movs	r3, #3
 800a846:	613b      	str	r3, [r7, #16]
 800a848:	e00a      	b.n	800a860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b80      	cmp	r3, #128	; 0x80
 800a84e:	d102      	bne.n	800a856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a850:	2302      	movs	r3, #2
 800a852:	613b      	str	r3, [r7, #16]
 800a854:	e004      	b.n	800a860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b70      	cmp	r3, #112	; 0x70
 800a85a:	d101      	bne.n	800a860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a85c:	2301      	movs	r3, #1
 800a85e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f023 0207 	bic.w	r2, r3, #7
 800a868:	4909      	ldr	r1, [pc, #36]	; (800a890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a870:	4b07      	ldr	r3, [pc, #28]	; (800a890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0307 	and.w	r3, r3, #7
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d001      	beq.n	800a882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	40021000 	.word	0x40021000
 800a890:	40022000 	.word	0x40022000

0800a894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a89c:	2300      	movs	r3, #0
 800a89e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d031      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8b8:	d01a      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a8ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a8be:	d814      	bhi.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a8c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8c8:	d10f      	bne.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a8ca:	4b5d      	ldr	r3, [pc, #372]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	4a5c      	ldr	r2, [pc, #368]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a8d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8d6:	e00c      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	2100      	movs	r1, #0
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f000 f9ce 	bl	800ac80 <RCCEx_PLLSAI1_Config>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a8e8:	e003      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	74fb      	strb	r3, [r7, #19]
      break;
 800a8ee:	e000      	b.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a8f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8f2:	7cfb      	ldrb	r3, [r7, #19]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8f8:	4b51      	ldr	r3, [pc, #324]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a906:	494e      	ldr	r1, [pc, #312]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a90e:	e001      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a910:	7cfb      	ldrb	r3, [r7, #19]
 800a912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 809e 	beq.w	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a922:	2300      	movs	r3, #0
 800a924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a926:	4b46      	ldr	r3, [pc, #280]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d101      	bne.n	800a936 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a932:	2301      	movs	r3, #1
 800a934:	e000      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a936:	2300      	movs	r3, #0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00d      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a93c:	4b40      	ldr	r3, [pc, #256]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a93e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a940:	4a3f      	ldr	r2, [pc, #252]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a946:	6593      	str	r3, [r2, #88]	; 0x58
 800a948:	4b3d      	ldr	r3, [pc, #244]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a94a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a94c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a950:	60bb      	str	r3, [r7, #8]
 800a952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a954:	2301      	movs	r3, #1
 800a956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a958:	4b3a      	ldr	r3, [pc, #232]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a39      	ldr	r2, [pc, #228]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a95e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a964:	f7fe fdc2 	bl	80094ec <HAL_GetTick>
 800a968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a96a:	e009      	b.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a96c:	f7fe fdbe 	bl	80094ec <HAL_GetTick>
 800a970:	4602      	mov	r2, r0
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	1ad3      	subs	r3, r2, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d902      	bls.n	800a980 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	74fb      	strb	r3, [r7, #19]
        break;
 800a97e:	e005      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a980:	4b30      	ldr	r3, [pc, #192]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0ef      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a98c:	7cfb      	ldrb	r3, [r7, #19]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d15a      	bne.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a992:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a99c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01e      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a8:	697a      	ldr	r2, [r7, #20]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d019      	beq.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a9ae:	4b24      	ldr	r3, [pc, #144]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a9ba:	4b21      	ldr	r3, [pc, #132]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c0:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a9ca:	4b1d      	ldr	r3, [pc, #116]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d0:	4a1b      	ldr	r2, [pc, #108]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a9da:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d016      	beq.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ec:	f7fe fd7e 	bl	80094ec <HAL_GetTick>
 800a9f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a9f2:	e00b      	b.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9f4:	f7fe fd7a 	bl	80094ec <HAL_GetTick>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d902      	bls.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	74fb      	strb	r3, [r7, #19]
            break;
 800aa0a:	e006      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d0ec      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800aa1a:	7cfb      	ldrb	r3, [r7, #19]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10b      	bne.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa2e:	4904      	ldr	r1, [pc, #16]	; (800aa40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800aa36:	e009      	b.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800aa38:	7cfb      	ldrb	r3, [r7, #19]
 800aa3a:	74bb      	strb	r3, [r7, #18]
 800aa3c:	e006      	b.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800aa3e:	bf00      	nop
 800aa40:	40021000 	.word	0x40021000
 800aa44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa48:	7cfb      	ldrb	r3, [r7, #19]
 800aa4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa4c:	7c7b      	ldrb	r3, [r7, #17]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d105      	bne.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa52:	4b8a      	ldr	r3, [pc, #552]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa56:	4a89      	ldr	r2, [pc, #548]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 0301 	and.w	r3, r3, #1
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800aa6a:	4b84      	ldr	r3, [pc, #528]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa70:	f023 0203 	bic.w	r2, r3, #3
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	4980      	ldr	r1, [pc, #512]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0302 	and.w	r3, r3, #2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00a      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa8c:	4b7b      	ldr	r3, [pc, #492]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa92:	f023 020c 	bic.w	r2, r3, #12
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9a:	4978      	ldr	r1, [pc, #480]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00a      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aaae:	4b73      	ldr	r3, [pc, #460]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aab4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabc:	496f      	ldr	r1, [pc, #444]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aabe:	4313      	orrs	r3, r2
 800aac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00a      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aad0:	4b6a      	ldr	r3, [pc, #424]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aad6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aade:	4967      	ldr	r1, [pc, #412]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aae0:	4313      	orrs	r3, r2
 800aae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00a      	beq.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aaf2:	4b62      	ldr	r3, [pc, #392]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800aaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aaf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab00:	495e      	ldr	r1, [pc, #376]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab14:	4b59      	ldr	r3, [pc, #356]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab1a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	4956      	ldr	r1, [pc, #344]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab24:	4313      	orrs	r3, r2
 800ab26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ab36:	4b51      	ldr	r3, [pc, #324]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab44:	494d      	ldr	r1, [pc, #308]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab46:	4313      	orrs	r3, r2
 800ab48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d028      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab58:	4b48      	ldr	r3, [pc, #288]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	4945      	ldr	r1, [pc, #276]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab76:	d106      	bne.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab78:	4b40      	ldr	r3, [pc, #256]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	4a3f      	ldr	r2, [pc, #252]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ab7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab82:	60d3      	str	r3, [r2, #12]
 800ab84:	e011      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab8e:	d10c      	bne.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3304      	adds	r3, #4
 800ab94:	2101      	movs	r1, #1
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 f872 	bl	800ac80 <RCCEx_PLLSAI1_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800aba0:	7cfb      	ldrb	r3, [r7, #19]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800aba6:	7cfb      	ldrb	r3, [r7, #19]
 800aba8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d028      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abb6:	4b31      	ldr	r3, [pc, #196]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc4:	492d      	ldr	r1, [pc, #180]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abd4:	d106      	bne.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800abd6:	4b29      	ldr	r3, [pc, #164]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	4a28      	ldr	r2, [pc, #160]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800abdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abe0:	60d3      	str	r3, [r2, #12]
 800abe2:	e011      	b.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abec:	d10c      	bne.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	2101      	movs	r1, #1
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 f843 	bl	800ac80 <RCCEx_PLLSAI1_Config>
 800abfa:	4603      	mov	r3, r0
 800abfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800abfe:	7cfb      	ldrb	r3, [r7, #19]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800ac04:	7cfb      	ldrb	r3, [r7, #19]
 800ac06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d01c      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac14:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac22:	4916      	ldr	r1, [pc, #88]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac32:	d10c      	bne.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3304      	adds	r3, #4
 800ac38:	2102      	movs	r1, #2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f820 	bl	800ac80 <RCCEx_PLLSAI1_Config>
 800ac40:	4603      	mov	r3, r0
 800ac42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800ac44:	7cfb      	ldrb	r3, [r7, #19]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d001      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800ac4a:	7cfb      	ldrb	r3, [r7, #19]
 800ac4c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ac5a:	4b08      	ldr	r3, [pc, #32]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac60:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac68:	4904      	ldr	r1, [pc, #16]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800ac70:	7cbb      	ldrb	r3, [r7, #18]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	40021000 	.word	0x40021000

0800ac80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800ac8e:	4b74      	ldr	r3, [pc, #464]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	f003 0303 	and.w	r3, r3, #3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d018      	beq.n	800accc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800ac9a:	4b71      	ldr	r3, [pc, #452]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ac9c:	68db      	ldr	r3, [r3, #12]
 800ac9e:	f003 0203 	and.w	r2, r3, #3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d10d      	bne.n	800acc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
       ||
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d009      	beq.n	800acc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800acb2:	4b6b      	ldr	r3, [pc, #428]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	091b      	lsrs	r3, r3, #4
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	685b      	ldr	r3, [r3, #4]
       ||
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d047      	beq.n	800ad56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	73fb      	strb	r3, [r7, #15]
 800acca:	e044      	b.n	800ad56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d018      	beq.n	800ad06 <RCCEx_PLLSAI1_Config+0x86>
 800acd4:	2b03      	cmp	r3, #3
 800acd6:	d825      	bhi.n	800ad24 <RCCEx_PLLSAI1_Config+0xa4>
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d002      	beq.n	800ace2 <RCCEx_PLLSAI1_Config+0x62>
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d009      	beq.n	800acf4 <RCCEx_PLLSAI1_Config+0x74>
 800ace0:	e020      	b.n	800ad24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ace2:	4b5f      	ldr	r3, [pc, #380]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d11d      	bne.n	800ad2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800acf2:	e01a      	b.n	800ad2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800acf4:	4b5a      	ldr	r3, [pc, #360]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d116      	bne.n	800ad2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ad04:	e013      	b.n	800ad2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ad06:	4b56      	ldr	r3, [pc, #344]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10f      	bne.n	800ad32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ad12:	4b53      	ldr	r3, [pc, #332]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d109      	bne.n	800ad32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad22:	e006      	b.n	800ad32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
      break;
 800ad28:	e004      	b.n	800ad34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ad2a:	bf00      	nop
 800ad2c:	e002      	b.n	800ad34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ad2e:	bf00      	nop
 800ad30:	e000      	b.n	800ad34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800ad32:	bf00      	nop
    }

    if(status == HAL_OK)
 800ad34:	7bfb      	ldrb	r3, [r7, #15]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d10d      	bne.n	800ad56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ad3a:	4b49      	ldr	r3, [pc, #292]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6819      	ldr	r1, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	011b      	lsls	r3, r3, #4
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	4943      	ldr	r1, [pc, #268]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d17c      	bne.n	800ae56 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800ad5c:	4b40      	ldr	r3, [pc, #256]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a3f      	ldr	r2, [pc, #252]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad68:	f7fe fbc0 	bl	80094ec <HAL_GetTick>
 800ad6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ad6e:	e009      	b.n	800ad84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad70:	f7fe fbbc 	bl	80094ec <HAL_GetTick>
 800ad74:	4602      	mov	r2, r0
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	1ad3      	subs	r3, r2, r3
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d902      	bls.n	800ad84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800ad7e:	2303      	movs	r3, #3
 800ad80:	73fb      	strb	r3, [r7, #15]
        break;
 800ad82:	e005      	b.n	800ad90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800ad84:	4b36      	ldr	r3, [pc, #216]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1ef      	bne.n	800ad70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d15f      	bne.n	800ae56 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d110      	bne.n	800adbe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800ad9c:	4b30      	ldr	r3, [pc, #192]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800ada4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6892      	ldr	r2, [r2, #8]
 800adac:	0211      	lsls	r1, r2, #8
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	68d2      	ldr	r2, [r2, #12]
 800adb2:	06d2      	lsls	r2, r2, #27
 800adb4:	430a      	orrs	r2, r1
 800adb6:	492a      	ldr	r1, [pc, #168]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	610b      	str	r3, [r1, #16]
 800adbc:	e027      	b.n	800ae0e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d112      	bne.n	800adea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800adc4:	4b26      	ldr	r3, [pc, #152]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800adc6:	691b      	ldr	r3, [r3, #16]
 800adc8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800adcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	6892      	ldr	r2, [r2, #8]
 800add4:	0211      	lsls	r1, r2, #8
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	6912      	ldr	r2, [r2, #16]
 800adda:	0852      	lsrs	r2, r2, #1
 800addc:	3a01      	subs	r2, #1
 800adde:	0552      	lsls	r2, r2, #21
 800ade0:	430a      	orrs	r2, r1
 800ade2:	491f      	ldr	r1, [pc, #124]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	610b      	str	r3, [r1, #16]
 800ade8:	e011      	b.n	800ae0e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800adea:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800adf2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6892      	ldr	r2, [r2, #8]
 800adfa:	0211      	lsls	r1, r2, #8
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	6952      	ldr	r2, [r2, #20]
 800ae00:	0852      	lsrs	r2, r2, #1
 800ae02:	3a01      	subs	r2, #1
 800ae04:	0652      	lsls	r2, r2, #25
 800ae06:	430a      	orrs	r2, r1
 800ae08:	4915      	ldr	r1, [pc, #84]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800ae0e:	4b14      	ldr	r3, [pc, #80]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a13      	ldr	r2, [pc, #76]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ae18:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae1a:	f7fe fb67 	bl	80094ec <HAL_GetTick>
 800ae1e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae20:	e009      	b.n	800ae36 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ae22:	f7fe fb63 	bl	80094ec <HAL_GetTick>
 800ae26:	4602      	mov	r2, r0
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d902      	bls.n	800ae36 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800ae30:	2303      	movs	r3, #3
 800ae32:	73fb      	strb	r3, [r7, #15]
          break;
 800ae34:	e005      	b.n	800ae42 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ae36:	4b0a      	ldr	r3, [pc, #40]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0ef      	beq.n	800ae22 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d106      	bne.n	800ae56 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800ae48:	4b05      	ldr	r3, [pc, #20]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	4903      	ldr	r1, [pc, #12]	; (800ae60 <RCCEx_PLLSAI1_Config+0x1e0>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	40021000 	.word	0x40021000

0800ae64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e040      	b.n	800aef8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d106      	bne.n	800ae8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7fe f920 	bl	80090cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2224      	movs	r2, #36	; 0x24
 800ae90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	681a      	ldr	r2, [r3, #0]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f022 0201 	bic.w	r2, r2, #1
 800aea0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fbe8 	bl	800b678 <UART_SetConfig>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e022      	b.n	800aef8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fe08 	bl	800bad0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685a      	ldr	r2, [r3, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aece:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689a      	ldr	r2, [r3, #8]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aede:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f042 0201 	orr.w	r2, r2, #1
 800aeee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fe8f 	bl	800bc14 <UART_CheckIdleState>
 800aef6:	4603      	mov	r3, r0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800af00:	b480      	push	{r7}
 800af02:	b08b      	sub	sp, #44	; 0x2c
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	4613      	mov	r3, r2
 800af0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af12:	2b20      	cmp	r3, #32
 800af14:	d156      	bne.n	800afc4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <HAL_UART_Transmit_IT+0x22>
 800af1c:	88fb      	ldrh	r3, [r7, #6]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e04f      	b.n	800afc6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d101      	bne.n	800af34 <HAL_UART_Transmit_IT+0x34>
 800af30:	2302      	movs	r3, #2
 800af32:	e048      	b.n	800afc6 <HAL_UART_Transmit_IT+0xc6>
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	88fa      	ldrh	r2, [r7, #6]
 800af46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	88fa      	ldrh	r2, [r7, #6]
 800af4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2200      	movs	r2, #0
 800af56:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2221      	movs	r2, #33	; 0x21
 800af64:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af6e:	d107      	bne.n	800af80 <HAL_UART_Transmit_IT+0x80>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d103      	bne.n	800af80 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4a16      	ldr	r2, [pc, #88]	; (800afd4 <HAL_UART_Transmit_IT+0xd4>)
 800af7c:	669a      	str	r2, [r3, #104]	; 0x68
 800af7e:	e002      	b.n	800af86 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4a15      	ldr	r2, [pc, #84]	; (800afd8 <HAL_UART_Transmit_IT+0xd8>)
 800af84:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	613b      	str	r3, [r7, #16]
   return(result);
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afa2:	627b      	str	r3, [r7, #36]	; 0x24
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	461a      	mov	r2, r3
 800afaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afac:	623b      	str	r3, [r7, #32]
 800afae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	69f9      	ldr	r1, [r7, #28]
 800afb2:	6a3a      	ldr	r2, [r7, #32]
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e6      	bne.n	800af8e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800afc0:	2300      	movs	r3, #0
 800afc2:	e000      	b.n	800afc6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800afc4:	2302      	movs	r3, #2
  }
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	372c      	adds	r7, #44	; 0x2c
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	0800c16f 	.word	0x0800c16f
 800afd8:	0800c0b7 	.word	0x0800c0b7

0800afdc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b08a      	sub	sp, #40	; 0x28
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	4613      	mov	r3, r2
 800afe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afee:	2b20      	cmp	r3, #32
 800aff0:	d142      	bne.n	800b078 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d002      	beq.n	800affe <HAL_UART_Receive_IT+0x22>
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	e03b      	b.n	800b07a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d101      	bne.n	800b010 <HAL_UART_Receive_IT+0x34>
 800b00c:	2302      	movs	r3, #2
 800b00e:	e034      	b.n	800b07a <HAL_UART_Receive_IT+0x9e>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a18      	ldr	r2, [pc, #96]	; (800b084 <HAL_UART_Receive_IT+0xa8>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d01f      	beq.n	800b068 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b032:	2b00      	cmp	r3, #0
 800b034:	d018      	beq.n	800b068 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	613b      	str	r3, [r7, #16]
   return(result);
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	623b      	str	r3, [r7, #32]
 800b056:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	69f9      	ldr	r1, [r7, #28]
 800b05a:	6a3a      	ldr	r2, [r7, #32]
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	61bb      	str	r3, [r7, #24]
   return(result);
 800b062:	69bb      	ldr	r3, [r7, #24]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e6      	bne.n	800b036 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	461a      	mov	r2, r3
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f000 fede 	bl	800be30 <UART_Start_Receive_IT>
 800b074:	4603      	mov	r3, r0
 800b076:	e000      	b.n	800b07a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b078:	2302      	movs	r3, #2
  }
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3728      	adds	r7, #40	; 0x28
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	40008000 	.word	0x40008000

0800b088 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b0ba      	sub	sp, #232	; 0xe8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	69db      	ldr	r3, [r3, #28]
 800b096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b0ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b0b2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b0bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d115      	bne.n	800b0f0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b0c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d00f      	beq.n	800b0f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b0d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d4:	f003 0320 	and.w	r3, r3, #32
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 82a6 	beq.w	800b632 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	4798      	blx	r3
      }
      return;
 800b0ee:	e2a0      	b.n	800b632 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b0f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 8117 	beq.w	800b328 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b0fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b00      	cmp	r3, #0
 800b104:	d106      	bne.n	800b114 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b106:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b10a:	4b85      	ldr	r3, [pc, #532]	; (800b320 <HAL_UART_IRQHandler+0x298>)
 800b10c:	4013      	ands	r3, r2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 810a 	beq.w	800b328 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d011      	beq.n	800b144 <HAL_UART_IRQHandler+0xbc>
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00b      	beq.n	800b144 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2201      	movs	r2, #1
 800b132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b13a:	f043 0201 	orr.w	r2, r3, #1
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b148:	f003 0302 	and.w	r3, r3, #2
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d011      	beq.n	800b174 <HAL_UART_IRQHandler+0xec>
 800b150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2202      	movs	r2, #2
 800b162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b16a:	f043 0204 	orr.w	r2, r3, #4
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d011      	beq.n	800b1a4 <HAL_UART_IRQHandler+0x11c>
 800b180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00b      	beq.n	800b1a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2204      	movs	r2, #4
 800b192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b19a:	f043 0202 	orr.w	r2, r3, #2
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b1a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a8:	f003 0308 	and.w	r3, r3, #8
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d017      	beq.n	800b1e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b4:	f003 0320 	and.w	r3, r3, #32
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d105      	bne.n	800b1c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b1c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2208      	movs	r2, #8
 800b1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1d6:	f043 0208 	orr.w	r2, r3, #8
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d012      	beq.n	800b212 <HAL_UART_IRQHandler+0x18a>
 800b1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00c      	beq.n	800b212 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b200:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b208:	f043 0220 	orr.w	r2, r3, #32
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 820c 	beq.w	800b636 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00d      	beq.n	800b246 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22e:	f003 0320 	and.w	r3, r3, #32
 800b232:	2b00      	cmp	r3, #0
 800b234:	d007      	beq.n	800b246 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d003      	beq.n	800b246 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b24c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25a:	2b40      	cmp	r3, #64	; 0x40
 800b25c:	d005      	beq.n	800b26a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b25e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b262:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b266:	2b00      	cmp	r3, #0
 800b268:	d04f      	beq.n	800b30a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 feaa 	bl	800bfc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27a:	2b40      	cmp	r3, #64	; 0x40
 800b27c:	d141      	bne.n	800b302 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3308      	adds	r3, #8
 800b284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b288:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	3308      	adds	r3, #8
 800b2a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b2b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b2c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1d9      	bne.n	800b27e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d013      	beq.n	800b2fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d6:	4a13      	ldr	r2, [pc, #76]	; (800b324 <HAL_UART_IRQHandler+0x29c>)
 800b2d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe fa5f 	bl	80097a2 <HAL_DMA_Abort_IT>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d017      	beq.n	800b31a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f0:	687a      	ldr	r2, [r7, #4]
 800b2f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2f8:	e00f      	b.n	800b31a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f9a6 	bl	800b64c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b300:	e00b      	b.n	800b31a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f9a2 	bl	800b64c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b308:	e007      	b.n	800b31a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f99e 	bl	800b64c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b318:	e18d      	b.n	800b636 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b31a:	bf00      	nop
    return;
 800b31c:	e18b      	b.n	800b636 <HAL_UART_IRQHandler+0x5ae>
 800b31e:	bf00      	nop
 800b320:	04000120 	.word	0x04000120
 800b324:	0800c08b 	.word	0x0800c08b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	f040 8146 	bne.w	800b5be <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b336:	f003 0310 	and.w	r3, r3, #16
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 813f 	beq.w	800b5be <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b344:	f003 0310 	and.w	r3, r3, #16
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f000 8138 	beq.w	800b5be <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2210      	movs	r2, #16
 800b354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b360:	2b40      	cmp	r3, #64	; 0x40
 800b362:	f040 80b4 	bne.w	800b4ce <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b372:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 815f 	beq.w	800b63a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b382:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b386:	429a      	cmp	r2, r3
 800b388:	f080 8157 	bcs.w	800b63a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b392:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 0320 	and.w	r3, r3, #32
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f040 8085 	bne.w	800b4b2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b3bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3d6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b3de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b3ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1da      	bne.n	800b3a8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	3308      	adds	r3, #8
 800b3f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3fc:	e853 3f00 	ldrex	r3, [r3]
 800b400:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b402:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b404:	f023 0301 	bic.w	r3, r3, #1
 800b408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3308      	adds	r3, #8
 800b412:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b416:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b41a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b41e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b422:	e841 2300 	strex	r3, r2, [r1]
 800b426:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b428:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1e1      	bne.n	800b3f2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3308      	adds	r3, #8
 800b434:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b438:	e853 3f00 	ldrex	r3, [r3]
 800b43c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b452:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b454:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b456:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b458:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b45a:	e841 2300 	strex	r3, r2, [r1]
 800b45e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1e3      	bne.n	800b42e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2220      	movs	r2, #32
 800b46a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47a:	e853 3f00 	ldrex	r3, [r3]
 800b47e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b482:	f023 0310 	bic.w	r3, r3, #16
 800b486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b494:	65bb      	str	r3, [r7, #88]	; 0x58
 800b496:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b498:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b49a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b49c:	e841 2300 	strex	r3, r2, [r1]
 800b4a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e4      	bne.n	800b472 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fe f93a 	bl	8009726 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 f8ca 	bl	800b660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4cc:	e0b5      	b.n	800b63a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4da:	b29b      	uxth	r3, r3
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f000 80a7 	beq.w	800b63e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b4f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 80a2 	beq.w	800b63e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b502:	e853 3f00 	ldrex	r3, [r3]
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b50e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b51c:	647b      	str	r3, [r7, #68]	; 0x44
 800b51e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b520:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b524:	e841 2300 	strex	r3, r2, [r1]
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e4      	bne.n	800b4fa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3308      	adds	r3, #8
 800b536:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53a:	e853 3f00 	ldrex	r3, [r3]
 800b53e:	623b      	str	r3, [r7, #32]
   return(result);
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	f023 0301 	bic.w	r3, r3, #1
 800b546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b554:	633a      	str	r2, [r7, #48]	; 0x30
 800b556:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e3      	bne.n	800b530 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2220      	movs	r2, #32
 800b56c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	e853 3f00 	ldrex	r3, [r3]
 800b586:	60fb      	str	r3, [r7, #12]
   return(result);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 0310 	bic.w	r3, r3, #16
 800b58e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b59c:	61fb      	str	r3, [r7, #28]
 800b59e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a0:	69b9      	ldr	r1, [r7, #24]
 800b5a2:	69fa      	ldr	r2, [r7, #28]
 800b5a4:	e841 2300 	strex	r3, r2, [r1]
 800b5a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e4      	bne.n	800b57a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f852 	bl	800b660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5bc:	e03f      	b.n	800b63e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00e      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x560>
 800b5ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d008      	beq.n	800b5e8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b5de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 ffae 	bl	800c542 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5e6:	e02d      	b.n	800b644 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00e      	beq.n	800b612 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d008      	beq.n	800b612 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b604:	2b00      	cmp	r3, #0
 800b606:	d01c      	beq.n	800b642 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	4798      	blx	r3
    }
    return;
 800b610:	e017      	b.n	800b642 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d012      	beq.n	800b644 <HAL_UART_IRQHandler+0x5bc>
 800b61e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00c      	beq.n	800b644 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fdff 	bl	800c22e <UART_EndTransmit_IT>
    return;
 800b630:	e008      	b.n	800b644 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b632:	bf00      	nop
 800b634:	e006      	b.n	800b644 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b636:	bf00      	nop
 800b638:	e004      	b.n	800b644 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b63a:	bf00      	nop
 800b63c:	e002      	b.n	800b644 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b63e:	bf00      	nop
 800b640:	e000      	b.n	800b644 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b642:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b644:	37e8      	adds	r7, #232	; 0xe8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop

0800b64c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b654:	bf00      	nop
 800b656:	370c      	adds	r7, #12
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr

0800b660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b66c:	bf00      	nop
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b67c:	b08a      	sub	sp, #40	; 0x28
 800b67e:	af00      	add	r7, sp, #0
 800b680:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b682:	2300      	movs	r3, #0
 800b684:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	689a      	ldr	r2, [r3, #8]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	431a      	orrs	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	695b      	ldr	r3, [r3, #20]
 800b696:	431a      	orrs	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	69db      	ldr	r3, [r3, #28]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	4bb4      	ldr	r3, [pc, #720]	; (800b978 <UART_SetConfig+0x300>)
 800b6a8:	4013      	ands	r3, r2
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	6812      	ldr	r2, [r2, #0]
 800b6ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4aa9      	ldr	r2, [pc, #676]	; (800b97c <UART_SetConfig+0x304>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d004      	beq.n	800b6e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6f4:	430a      	orrs	r2, r1
 800b6f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4aa0      	ldr	r2, [pc, #640]	; (800b980 <UART_SetConfig+0x308>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d126      	bne.n	800b750 <UART_SetConfig+0xd8>
 800b702:	4ba0      	ldr	r3, [pc, #640]	; (800b984 <UART_SetConfig+0x30c>)
 800b704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	2b03      	cmp	r3, #3
 800b70e:	d81b      	bhi.n	800b748 <UART_SetConfig+0xd0>
 800b710:	a201      	add	r2, pc, #4	; (adr r2, 800b718 <UART_SetConfig+0xa0>)
 800b712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b716:	bf00      	nop
 800b718:	0800b729 	.word	0x0800b729
 800b71c:	0800b739 	.word	0x0800b739
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b741 	.word	0x0800b741
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b72e:	e080      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b730:	2302      	movs	r3, #2
 800b732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b736:	e07c      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b738:	2304      	movs	r3, #4
 800b73a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b73e:	e078      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b740:	2308      	movs	r3, #8
 800b742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b746:	e074      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b748:	2310      	movs	r3, #16
 800b74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b74e:	e070      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a8c      	ldr	r2, [pc, #560]	; (800b988 <UART_SetConfig+0x310>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d138      	bne.n	800b7cc <UART_SetConfig+0x154>
 800b75a:	4b8a      	ldr	r3, [pc, #552]	; (800b984 <UART_SetConfig+0x30c>)
 800b75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b760:	f003 030c 	and.w	r3, r3, #12
 800b764:	2b0c      	cmp	r3, #12
 800b766:	d82d      	bhi.n	800b7c4 <UART_SetConfig+0x14c>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <UART_SetConfig+0xf8>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b7a5 	.word	0x0800b7a5
 800b774:	0800b7c5 	.word	0x0800b7c5
 800b778:	0800b7c5 	.word	0x0800b7c5
 800b77c:	0800b7c5 	.word	0x0800b7c5
 800b780:	0800b7b5 	.word	0x0800b7b5
 800b784:	0800b7c5 	.word	0x0800b7c5
 800b788:	0800b7c5 	.word	0x0800b7c5
 800b78c:	0800b7c5 	.word	0x0800b7c5
 800b790:	0800b7ad 	.word	0x0800b7ad
 800b794:	0800b7c5 	.word	0x0800b7c5
 800b798:	0800b7c5 	.word	0x0800b7c5
 800b79c:	0800b7c5 	.word	0x0800b7c5
 800b7a0:	0800b7bd 	.word	0x0800b7bd
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7aa:	e042      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7b2:	e03e      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b7b4:	2304      	movs	r3, #4
 800b7b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ba:	e03a      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b7bc:	2308      	movs	r3, #8
 800b7be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7c2:	e036      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b7c4:	2310      	movs	r3, #16
 800b7c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b7ca:	e032      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a6a      	ldr	r2, [pc, #424]	; (800b97c <UART_SetConfig+0x304>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d12a      	bne.n	800b82c <UART_SetConfig+0x1b4>
 800b7d6:	4b6b      	ldr	r3, [pc, #428]	; (800b984 <UART_SetConfig+0x30c>)
 800b7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b7e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7e4:	d01a      	beq.n	800b81c <UART_SetConfig+0x1a4>
 800b7e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7ea:	d81b      	bhi.n	800b824 <UART_SetConfig+0x1ac>
 800b7ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f0:	d00c      	beq.n	800b80c <UART_SetConfig+0x194>
 800b7f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7f6:	d815      	bhi.n	800b824 <UART_SetConfig+0x1ac>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <UART_SetConfig+0x18c>
 800b7fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b800:	d008      	beq.n	800b814 <UART_SetConfig+0x19c>
 800b802:	e00f      	b.n	800b824 <UART_SetConfig+0x1ac>
 800b804:	2300      	movs	r3, #0
 800b806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b80a:	e012      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b80c:	2302      	movs	r3, #2
 800b80e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b812:	e00e      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b814:	2304      	movs	r3, #4
 800b816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b81a:	e00a      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b81c:	2308      	movs	r3, #8
 800b81e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b822:	e006      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b824:	2310      	movs	r3, #16
 800b826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b82a:	e002      	b.n	800b832 <UART_SetConfig+0x1ba>
 800b82c:	2310      	movs	r3, #16
 800b82e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a51      	ldr	r2, [pc, #324]	; (800b97c <UART_SetConfig+0x304>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d17a      	bne.n	800b932 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b83c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b840:	2b08      	cmp	r3, #8
 800b842:	d824      	bhi.n	800b88e <UART_SetConfig+0x216>
 800b844:	a201      	add	r2, pc, #4	; (adr r2, 800b84c <UART_SetConfig+0x1d4>)
 800b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84a:	bf00      	nop
 800b84c:	0800b871 	.word	0x0800b871
 800b850:	0800b88f 	.word	0x0800b88f
 800b854:	0800b879 	.word	0x0800b879
 800b858:	0800b88f 	.word	0x0800b88f
 800b85c:	0800b87f 	.word	0x0800b87f
 800b860:	0800b88f 	.word	0x0800b88f
 800b864:	0800b88f 	.word	0x0800b88f
 800b868:	0800b88f 	.word	0x0800b88f
 800b86c:	0800b887 	.word	0x0800b887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b870:	f7fe ff84 	bl	800a77c <HAL_RCC_GetPCLK1Freq>
 800b874:	61f8      	str	r0, [r7, #28]
        break;
 800b876:	e010      	b.n	800b89a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b878:	4b44      	ldr	r3, [pc, #272]	; (800b98c <UART_SetConfig+0x314>)
 800b87a:	61fb      	str	r3, [r7, #28]
        break;
 800b87c:	e00d      	b.n	800b89a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b87e:	f7fe fee5 	bl	800a64c <HAL_RCC_GetSysClockFreq>
 800b882:	61f8      	str	r0, [r7, #28]
        break;
 800b884:	e009      	b.n	800b89a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b88a:	61fb      	str	r3, [r7, #28]
        break;
 800b88c:	e005      	b.n	800b89a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 8107 	beq.w	800bab0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	685a      	ldr	r2, [r3, #4]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	4413      	add	r3, r2
 800b8ac:	69fa      	ldr	r2, [r7, #28]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d305      	bcc.n	800b8be <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d903      	bls.n	800b8c6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b8c4:	e0f4      	b.n	800bab0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	461c      	mov	r4, r3
 800b8cc:	4615      	mov	r5, r2
 800b8ce:	f04f 0200 	mov.w	r2, #0
 800b8d2:	f04f 0300 	mov.w	r3, #0
 800b8d6:	022b      	lsls	r3, r5, #8
 800b8d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b8dc:	0222      	lsls	r2, r4, #8
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	6849      	ldr	r1, [r1, #4]
 800b8e2:	0849      	lsrs	r1, r1, #1
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	4688      	mov	r8, r1
 800b8e8:	4681      	mov	r9, r0
 800b8ea:	eb12 0a08 	adds.w	sl, r2, r8
 800b8ee:	eb43 0b09 	adc.w	fp, r3, r9
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	603b      	str	r3, [r7, #0]
 800b8fa:	607a      	str	r2, [r7, #4]
 800b8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b900:	4650      	mov	r0, sl
 800b902:	4659      	mov	r1, fp
 800b904:	f7f5 f9c0 	bl	8000c88 <__aeabi_uldivmod>
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	4613      	mov	r3, r2
 800b90e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b916:	d308      	bcc.n	800b92a <UART_SetConfig+0x2b2>
 800b918:	69bb      	ldr	r3, [r7, #24]
 800b91a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b91e:	d204      	bcs.n	800b92a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	69ba      	ldr	r2, [r7, #24]
 800b926:	60da      	str	r2, [r3, #12]
 800b928:	e0c2      	b.n	800bab0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b930:	e0be      	b.n	800bab0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	69db      	ldr	r3, [r3, #28]
 800b936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b93a:	d16a      	bne.n	800ba12 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b93c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b940:	2b08      	cmp	r3, #8
 800b942:	d834      	bhi.n	800b9ae <UART_SetConfig+0x336>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x2d4>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b971 	.word	0x0800b971
 800b950:	0800b991 	.word	0x0800b991
 800b954:	0800b999 	.word	0x0800b999
 800b958:	0800b9af 	.word	0x0800b9af
 800b95c:	0800b99f 	.word	0x0800b99f
 800b960:	0800b9af 	.word	0x0800b9af
 800b964:	0800b9af 	.word	0x0800b9af
 800b968:	0800b9af 	.word	0x0800b9af
 800b96c:	0800b9a7 	.word	0x0800b9a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b970:	f7fe ff04 	bl	800a77c <HAL_RCC_GetPCLK1Freq>
 800b974:	61f8      	str	r0, [r7, #28]
        break;
 800b976:	e020      	b.n	800b9ba <UART_SetConfig+0x342>
 800b978:	efff69f3 	.word	0xefff69f3
 800b97c:	40008000 	.word	0x40008000
 800b980:	40013800 	.word	0x40013800
 800b984:	40021000 	.word	0x40021000
 800b988:	40004400 	.word	0x40004400
 800b98c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b990:	f7fe ff0a 	bl	800a7a8 <HAL_RCC_GetPCLK2Freq>
 800b994:	61f8      	str	r0, [r7, #28]
        break;
 800b996:	e010      	b.n	800b9ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b998:	4b4c      	ldr	r3, [pc, #304]	; (800bacc <UART_SetConfig+0x454>)
 800b99a:	61fb      	str	r3, [r7, #28]
        break;
 800b99c:	e00d      	b.n	800b9ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b99e:	f7fe fe55 	bl	800a64c <HAL_RCC_GetSysClockFreq>
 800b9a2:	61f8      	str	r0, [r7, #28]
        break;
 800b9a4:	e009      	b.n	800b9ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9aa:	61fb      	str	r3, [r7, #28]
        break;
 800b9ac:	e005      	b.n	800b9ba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b9b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d077      	beq.n	800bab0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	005a      	lsls	r2, r3, #1
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	085b      	lsrs	r3, r3, #1
 800b9ca:	441a      	add	r2, r3
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	2b0f      	cmp	r3, #15
 800b9da:	d916      	bls.n	800ba0a <UART_SetConfig+0x392>
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e2:	d212      	bcs.n	800ba0a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	f023 030f 	bic.w	r3, r3, #15
 800b9ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	085b      	lsrs	r3, r3, #1
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	8afb      	ldrh	r3, [r7, #22]
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	8afa      	ldrh	r2, [r7, #22]
 800ba06:	60da      	str	r2, [r3, #12]
 800ba08:	e052      	b.n	800bab0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ba10:	e04e      	b.n	800bab0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ba12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ba16:	2b08      	cmp	r3, #8
 800ba18:	d827      	bhi.n	800ba6a <UART_SetConfig+0x3f2>
 800ba1a:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <UART_SetConfig+0x3a8>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba45 	.word	0x0800ba45
 800ba24:	0800ba4d 	.word	0x0800ba4d
 800ba28:	0800ba55 	.word	0x0800ba55
 800ba2c:	0800ba6b 	.word	0x0800ba6b
 800ba30:	0800ba5b 	.word	0x0800ba5b
 800ba34:	0800ba6b 	.word	0x0800ba6b
 800ba38:	0800ba6b 	.word	0x0800ba6b
 800ba3c:	0800ba6b 	.word	0x0800ba6b
 800ba40:	0800ba63 	.word	0x0800ba63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba44:	f7fe fe9a 	bl	800a77c <HAL_RCC_GetPCLK1Freq>
 800ba48:	61f8      	str	r0, [r7, #28]
        break;
 800ba4a:	e014      	b.n	800ba76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba4c:	f7fe feac 	bl	800a7a8 <HAL_RCC_GetPCLK2Freq>
 800ba50:	61f8      	str	r0, [r7, #28]
        break;
 800ba52:	e010      	b.n	800ba76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba54:	4b1d      	ldr	r3, [pc, #116]	; (800bacc <UART_SetConfig+0x454>)
 800ba56:	61fb      	str	r3, [r7, #28]
        break;
 800ba58:	e00d      	b.n	800ba76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba5a:	f7fe fdf7 	bl	800a64c <HAL_RCC_GetSysClockFreq>
 800ba5e:	61f8      	str	r0, [r7, #28]
        break;
 800ba60:	e009      	b.n	800ba76 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba66:	61fb      	str	r3, [r7, #28]
        break;
 800ba68:	e005      	b.n	800ba76 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ba74:	bf00      	nop
    }

    if (pclk != 0U)
 800ba76:	69fb      	ldr	r3, [r7, #28]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d019      	beq.n	800bab0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	085a      	lsrs	r2, r3, #1
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	441a      	add	r2, r3
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	2b0f      	cmp	r3, #15
 800ba94:	d909      	bls.n	800baaa <UART_SetConfig+0x432>
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba9c:	d205      	bcs.n	800baaa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	60da      	str	r2, [r3, #12]
 800baa8:	e002      	b.n	800bab0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2200      	movs	r2, #0
 800bab4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800babc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3728      	adds	r7, #40	; 0x28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800baca:	bf00      	nop
 800bacc:	00f42400 	.word	0x00f42400

0800bad0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00a      	beq.n	800bafa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	430a      	orrs	r2, r1
 800baf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	f003 0302 	and.w	r3, r3, #2
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00a      	beq.n	800bb1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb20:	f003 0304 	and.w	r3, r3, #4
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00a      	beq.n	800bb3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	f003 0308 	and.w	r3, r3, #8
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb64:	f003 0310 	and.w	r3, r3, #16
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00a      	beq.n	800bb82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb86:	f003 0320 	and.w	r3, r3, #32
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01a      	beq.n	800bbe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbce:	d10a      	bne.n	800bbe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	430a      	orrs	r2, r1
 800bc06:	605a      	str	r2, [r3, #4]
  }
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc24:	f7fd fc62 	bl	80094ec <HAL_GetTick>
 800bc28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 0308 	and.w	r3, r3, #8
 800bc34:	2b08      	cmp	r3, #8
 800bc36:	d10e      	bne.n	800bc56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 f82d 	bl	800bca6 <UART_WaitOnFlagUntilTimeout>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d001      	beq.n	800bc56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc52:	2303      	movs	r3, #3
 800bc54:	e023      	b.n	800bc9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 0304 	and.w	r3, r3, #4
 800bc60:	2b04      	cmp	r3, #4
 800bc62:	d10e      	bne.n	800bc82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f817 	bl	800bca6 <UART_WaitOnFlagUntilTimeout>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e00d      	b.n	800bc9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2220      	movs	r2, #32
 800bc86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b09c      	sub	sp, #112	; 0x70
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	603b      	str	r3, [r7, #0]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcb6:	e0a5      	b.n	800be04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcbe:	f000 80a1 	beq.w	800be04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcc2:	f7fd fc13 	bl	80094ec <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d302      	bcc.n	800bcd8 <UART_WaitOnFlagUntilTimeout+0x32>
 800bcd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d13e      	bne.n	800bd56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bcec:	667b      	str	r3, [r7, #100]	; 0x64
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcf8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bcfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bd04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e6      	bne.n	800bcd8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3308      	adds	r3, #8
 800bd10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd14:	e853 3f00 	ldrex	r3, [r3]
 800bd18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	f023 0301 	bic.w	r3, r3, #1
 800bd20:	663b      	str	r3, [r7, #96]	; 0x60
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3308      	adds	r3, #8
 800bd28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bd2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800bd2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd32:	e841 2300 	strex	r3, r2, [r1]
 800bd36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d1e5      	bne.n	800bd0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2220      	movs	r2, #32
 800bd42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2220      	movs	r2, #32
 800bd48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e067      	b.n	800be26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d04f      	beq.n	800be04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd72:	d147      	bne.n	800be04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	e853 3f00 	ldrex	r3, [r3]
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bda2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bda4:	e841 2300 	strex	r3, r2, [r1]
 800bda8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e6      	bne.n	800bd7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	e853 3f00 	ldrex	r3, [r3]
 800bdbe:	613b      	str	r3, [r7, #16]
   return(result);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f023 0301 	bic.w	r3, r3, #1
 800bdc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	3308      	adds	r3, #8
 800bdce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bdd0:	623a      	str	r2, [r7, #32]
 800bdd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd4:	69f9      	ldr	r1, [r7, #28]
 800bdd6:	6a3a      	ldr	r2, [r7, #32]
 800bdd8:	e841 2300 	strex	r3, r2, [r1]
 800bddc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d1e5      	bne.n	800bdb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2220      	movs	r2, #32
 800bde8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2220      	movs	r2, #32
 800bdee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e010      	b.n	800be26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69da      	ldr	r2, [r3, #28]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4013      	ands	r3, r2
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	bf0c      	ite	eq
 800be14:	2301      	moveq	r3, #1
 800be16:	2300      	movne	r3, #0
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	461a      	mov	r2, r3
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	429a      	cmp	r2, r3
 800be20:	f43f af4a 	beq.w	800bcb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be24:	2300      	movs	r3, #0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3770      	adds	r7, #112	; 0x70
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be30:	b480      	push	{r7}
 800be32:	b097      	sub	sp, #92	; 0x5c
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	4613      	mov	r3, r2
 800be3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	88fa      	ldrh	r2, [r7, #6]
 800be48:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	88fa      	ldrh	r2, [r7, #6]
 800be50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2200      	movs	r2, #0
 800be58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be62:	d10e      	bne.n	800be82 <UART_Start_Receive_IT+0x52>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d105      	bne.n	800be78 <UART_Start_Receive_IT+0x48>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be76:	e02d      	b.n	800bed4 <UART_Start_Receive_IT+0xa4>
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	22ff      	movs	r2, #255	; 0xff
 800be7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be80:	e028      	b.n	800bed4 <UART_Start_Receive_IT+0xa4>
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10d      	bne.n	800bea6 <UART_Start_Receive_IT+0x76>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d104      	bne.n	800be9c <UART_Start_Receive_IT+0x6c>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	22ff      	movs	r2, #255	; 0xff
 800be96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800be9a:	e01b      	b.n	800bed4 <UART_Start_Receive_IT+0xa4>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	227f      	movs	r2, #127	; 0x7f
 800bea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bea4:	e016      	b.n	800bed4 <UART_Start_Receive_IT+0xa4>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beae:	d10d      	bne.n	800becc <UART_Start_Receive_IT+0x9c>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d104      	bne.n	800bec2 <UART_Start_Receive_IT+0x92>
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	227f      	movs	r2, #127	; 0x7f
 800bebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bec0:	e008      	b.n	800bed4 <UART_Start_Receive_IT+0xa4>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	223f      	movs	r2, #63	; 0x3f
 800bec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800beca:	e003      	b.n	800bed4 <UART_Start_Receive_IT+0xa4>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2222      	movs	r2, #34	; 0x22
 800bee0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3308      	adds	r3, #8
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	f043 0301 	orr.w	r3, r3, #1
 800bef8:	657b      	str	r3, [r7, #84]	; 0x54
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	3308      	adds	r3, #8
 800bf00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf02:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf0a:	e841 2300 	strex	r3, r2, [r1]
 800bf0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d1e5      	bne.n	800bee2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf1e:	d107      	bne.n	800bf30 <UART_Start_Receive_IT+0x100>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d103      	bne.n	800bf30 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	4a24      	ldr	r2, [pc, #144]	; (800bfbc <UART_Start_Receive_IT+0x18c>)
 800bf2c:	665a      	str	r2, [r3, #100]	; 0x64
 800bf2e:	e002      	b.n	800bf36 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4a23      	ldr	r2, [pc, #140]	; (800bfc0 <UART_Start_Receive_IT+0x190>)
 800bf34:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d019      	beq.n	800bf7a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bf5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf64:	637b      	str	r3, [r7, #52]	; 0x34
 800bf66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf6c:	e841 2300 	strex	r3, r2, [r1]
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1e6      	bne.n	800bf46 <UART_Start_Receive_IT+0x116>
 800bf78:	e018      	b.n	800bfac <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	e853 3f00 	ldrex	r3, [r3]
 800bf86:	613b      	str	r3, [r7, #16]
   return(result);
 800bf88:	693b      	ldr	r3, [r7, #16]
 800bf8a:	f043 0320 	orr.w	r3, r3, #32
 800bf8e:	653b      	str	r3, [r7, #80]	; 0x50
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf98:	623b      	str	r3, [r7, #32]
 800bf9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9c:	69f9      	ldr	r1, [r7, #28]
 800bf9e:	6a3a      	ldr	r2, [r7, #32]
 800bfa0:	e841 2300 	strex	r3, r2, [r1]
 800bfa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1e6      	bne.n	800bf7a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	375c      	adds	r7, #92	; 0x5c
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	0800c3e3 	.word	0x0800c3e3
 800bfc0:	0800c283 	.word	0x0800c283

0800bfc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b095      	sub	sp, #84	; 0x54
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bfe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	461a      	mov	r2, r3
 800bfe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfea:	643b      	str	r3, [r7, #64]	; 0x40
 800bfec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bff2:	e841 2300 	strex	r3, r2, [r1]
 800bff6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e6      	bne.n	800bfcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3308      	adds	r3, #8
 800c004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	f023 0301 	bic.w	r3, r3, #1
 800c014:	64bb      	str	r3, [r7, #72]	; 0x48
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3308      	adds	r3, #8
 800c01c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c01e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e5      	bne.n	800bffe <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c036:	2b01      	cmp	r3, #1
 800c038:	d118      	bne.n	800c06c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	e853 3f00 	ldrex	r3, [r3]
 800c046:	60bb      	str	r3, [r7, #8]
   return(result);
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	f023 0310 	bic.w	r3, r3, #16
 800c04e:	647b      	str	r3, [r7, #68]	; 0x44
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	461a      	mov	r2, r3
 800c056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c058:	61bb      	str	r3, [r7, #24]
 800c05a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05c:	6979      	ldr	r1, [r7, #20]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	e841 2300 	strex	r3, r2, [r1]
 800c064:	613b      	str	r3, [r7, #16]
   return(result);
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1e6      	bne.n	800c03a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2220      	movs	r2, #32
 800c070:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c07e:	bf00      	nop
 800c080:	3754      	adds	r7, #84	; 0x54
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr

0800c08a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b084      	sub	sp, #16
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f7ff facf 	bl	800b64c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0ae:	bf00      	nop
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b08f      	sub	sp, #60	; 0x3c
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c0c2:	2b21      	cmp	r3, #33	; 0x21
 800c0c4:	d14d      	bne.n	800c162 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d132      	bne.n	800c138 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	e853 3f00 	ldrex	r3, [r3]
 800c0de:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0f2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f8:	e841 2300 	strex	r3, r2, [r1]
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1e6      	bne.n	800c0d2 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	e853 3f00 	ldrex	r3, [r3]
 800c110:	60bb      	str	r3, [r7, #8]
   return(result);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c118:	633b      	str	r3, [r7, #48]	; 0x30
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	61bb      	str	r3, [r7, #24]
 800c124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c126:	6979      	ldr	r1, [r7, #20]
 800c128:	69ba      	ldr	r2, [r7, #24]
 800c12a:	e841 2300 	strex	r3, r2, [r1]
 800c12e:	613b      	str	r3, [r7, #16]
   return(result);
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d1e6      	bne.n	800c104 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c136:	e014      	b.n	800c162 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c13c:	781a      	ldrb	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	b292      	uxth	r2, r2
 800c144:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c156:	b29b      	uxth	r3, r3
 800c158:	3b01      	subs	r3, #1
 800c15a:	b29a      	uxth	r2, r3
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c162:	bf00      	nop
 800c164:	373c      	adds	r7, #60	; 0x3c
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr

0800c16e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c16e:	b480      	push	{r7}
 800c170:	b091      	sub	sp, #68	; 0x44
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c17a:	2b21      	cmp	r3, #33	; 0x21
 800c17c:	d151      	bne.n	800c222 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c184:	b29b      	uxth	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d132      	bne.n	800c1f0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c192:	e853 3f00 	ldrex	r3, [r3]
 800c196:	623b      	str	r3, [r7, #32]
   return(result);
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c19e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a8:	633b      	str	r3, [r7, #48]	; 0x30
 800c1aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b0:	e841 2300 	strex	r3, r2, [r1]
 800c1b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1e6      	bne.n	800c18a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	e853 3f00 	ldrex	r3, [r3]
 800c1c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1da:	61fb      	str	r3, [r7, #28]
 800c1dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1de:	69b9      	ldr	r1, [r7, #24]
 800c1e0:	69fa      	ldr	r2, [r7, #28]
 800c1e2:	e841 2300 	strex	r3, r2, [r1]
 800c1e6:	617b      	str	r3, [r7, #20]
   return(result);
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1e6      	bne.n	800c1bc <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c1ee:	e018      	b.n	800c222 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f8:	881a      	ldrh	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c202:	b292      	uxth	r2, r2
 800c204:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c20a:	1c9a      	adds	r2, r3, #2
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c216:	b29b      	uxth	r3, r3
 800c218:	3b01      	subs	r3, #1
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c222:	bf00      	nop
 800c224:	3744      	adds	r7, #68	; 0x44
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b088      	sub	sp, #32
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	e853 3f00 	ldrex	r3, [r3]
 800c242:	60bb      	str	r3, [r7, #8]
   return(result);
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c24a:	61fb      	str	r3, [r7, #28]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c258:	6979      	ldr	r1, [r7, #20]
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	e841 2300 	strex	r3, r2, [r1]
 800c260:	613b      	str	r3, [r7, #16]
   return(result);
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1e6      	bne.n	800c236 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2220      	movs	r2, #32
 800c26c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f7fc fecf 	bl	8009018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c27a:	bf00      	nop
 800c27c:	3720      	adds	r7, #32
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c282:	b580      	push	{r7, lr}
 800c284:	b096      	sub	sp, #88	; 0x58
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c298:	2b22      	cmp	r3, #34	; 0x22
 800c29a:	f040 8094 	bne.w	800c3c6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c2a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c2ac:	b2d9      	uxtb	r1, r3
 800c2ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b8:	400a      	ands	r2, r1
 800c2ba:	b2d2      	uxtb	r2, r2
 800c2bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c2:	1c5a      	adds	r2, r3, #1
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d179      	bne.n	800c3da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ee:	e853 3f00 	ldrex	r3, [r3]
 800c2f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c2fa:	653b      	str	r3, [r7, #80]	; 0x50
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c304:	647b      	str	r3, [r7, #68]	; 0x44
 800c306:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c30a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c30c:	e841 2300 	strex	r3, r2, [r1]
 800c310:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c314:	2b00      	cmp	r3, #0
 800c316:	d1e6      	bne.n	800c2e6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	3308      	adds	r3, #8
 800c31e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c322:	e853 3f00 	ldrex	r3, [r3]
 800c326:	623b      	str	r3, [r7, #32]
   return(result);
 800c328:	6a3b      	ldr	r3, [r7, #32]
 800c32a:	f023 0301 	bic.w	r3, r3, #1
 800c32e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3308      	adds	r3, #8
 800c336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c338:	633a      	str	r2, [r7, #48]	; 0x30
 800c33a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c33e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e5      	bne.n	800c318 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2220      	movs	r2, #32
 800c350:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2200      	movs	r2, #0
 800c356:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d12e      	bne.n	800c3be <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	e853 3f00 	ldrex	r3, [r3]
 800c372:	60fb      	str	r3, [r7, #12]
   return(result);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f023 0310 	bic.w	r3, r3, #16
 800c37a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	461a      	mov	r2, r3
 800c382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c384:	61fb      	str	r3, [r7, #28]
 800c386:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	69b9      	ldr	r1, [r7, #24]
 800c38a:	69fa      	ldr	r2, [r7, #28]
 800c38c:	e841 2300 	strex	r3, r2, [r1]
 800c390:	617b      	str	r3, [r7, #20]
   return(result);
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e6      	bne.n	800c366 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	69db      	ldr	r3, [r3, #28]
 800c39e:	f003 0310 	and.w	r3, r3, #16
 800c3a2:	2b10      	cmp	r3, #16
 800c3a4:	d103      	bne.n	800c3ae <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2210      	movs	r2, #16
 800c3ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f7ff f952 	bl	800b660 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3bc:	e00d      	b.n	800c3da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f7fc fe08 	bl	8008fd4 <HAL_UART_RxCpltCallback>
}
 800c3c4:	e009      	b.n	800c3da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	8b1b      	ldrh	r3, [r3, #24]
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f042 0208 	orr.w	r2, r2, #8
 800c3d6:	b292      	uxth	r2, r2
 800c3d8:	831a      	strh	r2, [r3, #24]
}
 800c3da:	bf00      	nop
 800c3dc:	3758      	adds	r7, #88	; 0x58
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b096      	sub	sp, #88	; 0x58
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f8:	2b22      	cmp	r3, #34	; 0x22
 800c3fa:	f040 8094 	bne.w	800c526 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c404:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c40c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c40e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c412:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c416:	4013      	ands	r3, r2
 800c418:	b29a      	uxth	r2, r3
 800c41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c41c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c422:	1c9a      	adds	r2, r3, #2
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3b01      	subs	r3, #1
 800c432:	b29a      	uxth	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c440:	b29b      	uxth	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d179      	bne.n	800c53a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44e:	e853 3f00 	ldrex	r3, [r3]
 800c452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c45a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c464:	643b      	str	r3, [r7, #64]	; 0x40
 800c466:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c46a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c46c:	e841 2300 	strex	r3, r2, [r1]
 800c470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	2b00      	cmp	r3, #0
 800c476:	d1e6      	bne.n	800c446 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3308      	adds	r3, #8
 800c47e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c480:	6a3b      	ldr	r3, [r7, #32]
 800c482:	e853 3f00 	ldrex	r3, [r3]
 800c486:	61fb      	str	r3, [r7, #28]
   return(result);
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	f023 0301 	bic.w	r3, r3, #1
 800c48e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	3308      	adds	r3, #8
 800c496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c49a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4a0:	e841 2300 	strex	r3, r2, [r1]
 800c4a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1e5      	bne.n	800c478 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2220      	movs	r2, #32
 800c4b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d12e      	bne.n	800c51e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	e853 3f00 	ldrex	r3, [r3]
 800c4d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f023 0310 	bic.w	r3, r3, #16
 800c4da:	647b      	str	r3, [r7, #68]	; 0x44
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e4:	61bb      	str	r3, [r7, #24]
 800c4e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	6979      	ldr	r1, [r7, #20]
 800c4ea:	69ba      	ldr	r2, [r7, #24]
 800c4ec:	e841 2300 	strex	r3, r2, [r1]
 800c4f0:	613b      	str	r3, [r7, #16]
   return(result);
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1e6      	bne.n	800c4c6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	69db      	ldr	r3, [r3, #28]
 800c4fe:	f003 0310 	and.w	r3, r3, #16
 800c502:	2b10      	cmp	r3, #16
 800c504:	d103      	bne.n	800c50e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2210      	movs	r2, #16
 800c50c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff f8a2 	bl	800b660 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c51c:	e00d      	b.n	800c53a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7fc fd58 	bl	8008fd4 <HAL_UART_RxCpltCallback>
}
 800c524:	e009      	b.n	800c53a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	8b1b      	ldrh	r3, [r3, #24]
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f042 0208 	orr.w	r2, r2, #8
 800c536:	b292      	uxth	r2, r2
 800c538:	831a      	strh	r2, [r3, #24]
}
 800c53a:	bf00      	nop
 800c53c:	3758      	adds	r7, #88	; 0x58
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c54a:	bf00      	nop
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <atof>:
 800c556:	2100      	movs	r1, #0
 800c558:	f001 bafc 	b.w	800db54 <strtod>

0800c55c <__errno>:
 800c55c:	4b01      	ldr	r3, [pc, #4]	; (800c564 <__errno+0x8>)
 800c55e:	6818      	ldr	r0, [r3, #0]
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop
 800c564:	2000000c 	.word	0x2000000c

0800c568 <__libc_init_array>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	4d0d      	ldr	r5, [pc, #52]	; (800c5a0 <__libc_init_array+0x38>)
 800c56c:	4c0d      	ldr	r4, [pc, #52]	; (800c5a4 <__libc_init_array+0x3c>)
 800c56e:	1b64      	subs	r4, r4, r5
 800c570:	10a4      	asrs	r4, r4, #2
 800c572:	2600      	movs	r6, #0
 800c574:	42a6      	cmp	r6, r4
 800c576:	d109      	bne.n	800c58c <__libc_init_array+0x24>
 800c578:	4d0b      	ldr	r5, [pc, #44]	; (800c5a8 <__libc_init_array+0x40>)
 800c57a:	4c0c      	ldr	r4, [pc, #48]	; (800c5ac <__libc_init_array+0x44>)
 800c57c:	f004 fda0 	bl	80110c0 <_init>
 800c580:	1b64      	subs	r4, r4, r5
 800c582:	10a4      	asrs	r4, r4, #2
 800c584:	2600      	movs	r6, #0
 800c586:	42a6      	cmp	r6, r4
 800c588:	d105      	bne.n	800c596 <__libc_init_array+0x2e>
 800c58a:	bd70      	pop	{r4, r5, r6, pc}
 800c58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c590:	4798      	blx	r3
 800c592:	3601      	adds	r6, #1
 800c594:	e7ee      	b.n	800c574 <__libc_init_array+0xc>
 800c596:	f855 3b04 	ldr.w	r3, [r5], #4
 800c59a:	4798      	blx	r3
 800c59c:	3601      	adds	r6, #1
 800c59e:	e7f2      	b.n	800c586 <__libc_init_array+0x1e>
 800c5a0:	080118a0 	.word	0x080118a0
 800c5a4:	080118a0 	.word	0x080118a0
 800c5a8:	080118a0 	.word	0x080118a0
 800c5ac:	080118a4 	.word	0x080118a4

0800c5b0 <memcpy>:
 800c5b0:	440a      	add	r2, r1
 800c5b2:	4291      	cmp	r1, r2
 800c5b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5b8:	d100      	bne.n	800c5bc <memcpy+0xc>
 800c5ba:	4770      	bx	lr
 800c5bc:	b510      	push	{r4, lr}
 800c5be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5c6:	4291      	cmp	r1, r2
 800c5c8:	d1f9      	bne.n	800c5be <memcpy+0xe>
 800c5ca:	bd10      	pop	{r4, pc}

0800c5cc <memset>:
 800c5cc:	4402      	add	r2, r0
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d100      	bne.n	800c5d6 <memset+0xa>
 800c5d4:	4770      	bx	lr
 800c5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5da:	e7f9      	b.n	800c5d0 <memset+0x4>

0800c5dc <__cvt>:
 800c5dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e0:	ec55 4b10 	vmov	r4, r5, d0
 800c5e4:	2d00      	cmp	r5, #0
 800c5e6:	460e      	mov	r6, r1
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	462b      	mov	r3, r5
 800c5ec:	bfbb      	ittet	lt
 800c5ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5f2:	461d      	movlt	r5, r3
 800c5f4:	2300      	movge	r3, #0
 800c5f6:	232d      	movlt	r3, #45	; 0x2d
 800c5f8:	700b      	strb	r3, [r1, #0]
 800c5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c600:	4691      	mov	r9, r2
 800c602:	f023 0820 	bic.w	r8, r3, #32
 800c606:	bfbc      	itt	lt
 800c608:	4622      	movlt	r2, r4
 800c60a:	4614      	movlt	r4, r2
 800c60c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c610:	d005      	beq.n	800c61e <__cvt+0x42>
 800c612:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c616:	d100      	bne.n	800c61a <__cvt+0x3e>
 800c618:	3601      	adds	r6, #1
 800c61a:	2102      	movs	r1, #2
 800c61c:	e000      	b.n	800c620 <__cvt+0x44>
 800c61e:	2103      	movs	r1, #3
 800c620:	ab03      	add	r3, sp, #12
 800c622:	9301      	str	r3, [sp, #4]
 800c624:	ab02      	add	r3, sp, #8
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	ec45 4b10 	vmov	d0, r4, r5
 800c62c:	4653      	mov	r3, sl
 800c62e:	4632      	mov	r2, r6
 800c630:	f001 fba2 	bl	800dd78 <_dtoa_r>
 800c634:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c638:	4607      	mov	r7, r0
 800c63a:	d102      	bne.n	800c642 <__cvt+0x66>
 800c63c:	f019 0f01 	tst.w	r9, #1
 800c640:	d022      	beq.n	800c688 <__cvt+0xac>
 800c642:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c646:	eb07 0906 	add.w	r9, r7, r6
 800c64a:	d110      	bne.n	800c66e <__cvt+0x92>
 800c64c:	783b      	ldrb	r3, [r7, #0]
 800c64e:	2b30      	cmp	r3, #48	; 0x30
 800c650:	d10a      	bne.n	800c668 <__cvt+0x8c>
 800c652:	2200      	movs	r2, #0
 800c654:	2300      	movs	r3, #0
 800c656:	4620      	mov	r0, r4
 800c658:	4629      	mov	r1, r5
 800c65a:	f7f4 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800c65e:	b918      	cbnz	r0, 800c668 <__cvt+0x8c>
 800c660:	f1c6 0601 	rsb	r6, r6, #1
 800c664:	f8ca 6000 	str.w	r6, [sl]
 800c668:	f8da 3000 	ldr.w	r3, [sl]
 800c66c:	4499      	add	r9, r3
 800c66e:	2200      	movs	r2, #0
 800c670:	2300      	movs	r3, #0
 800c672:	4620      	mov	r0, r4
 800c674:	4629      	mov	r1, r5
 800c676:	f7f4 fa27 	bl	8000ac8 <__aeabi_dcmpeq>
 800c67a:	b108      	cbz	r0, 800c680 <__cvt+0xa4>
 800c67c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c680:	2230      	movs	r2, #48	; 0x30
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	454b      	cmp	r3, r9
 800c686:	d307      	bcc.n	800c698 <__cvt+0xbc>
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c68c:	1bdb      	subs	r3, r3, r7
 800c68e:	4638      	mov	r0, r7
 800c690:	6013      	str	r3, [r2, #0]
 800c692:	b004      	add	sp, #16
 800c694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c698:	1c59      	adds	r1, r3, #1
 800c69a:	9103      	str	r1, [sp, #12]
 800c69c:	701a      	strb	r2, [r3, #0]
 800c69e:	e7f0      	b.n	800c682 <__cvt+0xa6>

0800c6a0 <__exponent>:
 800c6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	bfb8      	it	lt
 800c6a8:	4249      	neglt	r1, r1
 800c6aa:	f803 2b02 	strb.w	r2, [r3], #2
 800c6ae:	bfb4      	ite	lt
 800c6b0:	222d      	movlt	r2, #45	; 0x2d
 800c6b2:	222b      	movge	r2, #43	; 0x2b
 800c6b4:	2909      	cmp	r1, #9
 800c6b6:	7042      	strb	r2, [r0, #1]
 800c6b8:	dd2a      	ble.n	800c710 <__exponent+0x70>
 800c6ba:	f10d 0407 	add.w	r4, sp, #7
 800c6be:	46a4      	mov	ip, r4
 800c6c0:	270a      	movs	r7, #10
 800c6c2:	46a6      	mov	lr, r4
 800c6c4:	460a      	mov	r2, r1
 800c6c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c6ca:	fb07 1516 	mls	r5, r7, r6, r1
 800c6ce:	3530      	adds	r5, #48	; 0x30
 800c6d0:	2a63      	cmp	r2, #99	; 0x63
 800c6d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c6da:	4631      	mov	r1, r6
 800c6dc:	dcf1      	bgt.n	800c6c2 <__exponent+0x22>
 800c6de:	3130      	adds	r1, #48	; 0x30
 800c6e0:	f1ae 0502 	sub.w	r5, lr, #2
 800c6e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c6e8:	1c44      	adds	r4, r0, #1
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	4561      	cmp	r1, ip
 800c6ee:	d30a      	bcc.n	800c706 <__exponent+0x66>
 800c6f0:	f10d 0209 	add.w	r2, sp, #9
 800c6f4:	eba2 020e 	sub.w	r2, r2, lr
 800c6f8:	4565      	cmp	r5, ip
 800c6fa:	bf88      	it	hi
 800c6fc:	2200      	movhi	r2, #0
 800c6fe:	4413      	add	r3, r2
 800c700:	1a18      	subs	r0, r3, r0
 800c702:	b003      	add	sp, #12
 800c704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c706:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c70a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c70e:	e7ed      	b.n	800c6ec <__exponent+0x4c>
 800c710:	2330      	movs	r3, #48	; 0x30
 800c712:	3130      	adds	r1, #48	; 0x30
 800c714:	7083      	strb	r3, [r0, #2]
 800c716:	70c1      	strb	r1, [r0, #3]
 800c718:	1d03      	adds	r3, r0, #4
 800c71a:	e7f1      	b.n	800c700 <__exponent+0x60>

0800c71c <_printf_float>:
 800c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	ed2d 8b02 	vpush	{d8}
 800c724:	b08d      	sub	sp, #52	; 0x34
 800c726:	460c      	mov	r4, r1
 800c728:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c72c:	4616      	mov	r6, r2
 800c72e:	461f      	mov	r7, r3
 800c730:	4605      	mov	r5, r0
 800c732:	f002 fc91 	bl	800f058 <_localeconv_r>
 800c736:	f8d0 a000 	ldr.w	sl, [r0]
 800c73a:	4650      	mov	r0, sl
 800c73c:	f7f3 fd48 	bl	80001d0 <strlen>
 800c740:	2300      	movs	r3, #0
 800c742:	930a      	str	r3, [sp, #40]	; 0x28
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	9305      	str	r3, [sp, #20]
 800c748:	f8d8 3000 	ldr.w	r3, [r8]
 800c74c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c750:	3307      	adds	r3, #7
 800c752:	f023 0307 	bic.w	r3, r3, #7
 800c756:	f103 0208 	add.w	r2, r3, #8
 800c75a:	f8c8 2000 	str.w	r2, [r8]
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c766:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c76a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c76e:	9307      	str	r3, [sp, #28]
 800c770:	f8cd 8018 	str.w	r8, [sp, #24]
 800c774:	ee08 0a10 	vmov	s16, r0
 800c778:	4b9f      	ldr	r3, [pc, #636]	; (800c9f8 <_printf_float+0x2dc>)
 800c77a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c77e:	f04f 32ff 	mov.w	r2, #4294967295
 800c782:	f7f4 f9d3 	bl	8000b2c <__aeabi_dcmpun>
 800c786:	bb88      	cbnz	r0, 800c7ec <_printf_float+0xd0>
 800c788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c78c:	4b9a      	ldr	r3, [pc, #616]	; (800c9f8 <_printf_float+0x2dc>)
 800c78e:	f04f 32ff 	mov.w	r2, #4294967295
 800c792:	f7f4 f9ad 	bl	8000af0 <__aeabi_dcmple>
 800c796:	bb48      	cbnz	r0, 800c7ec <_printf_float+0xd0>
 800c798:	2200      	movs	r2, #0
 800c79a:	2300      	movs	r3, #0
 800c79c:	4640      	mov	r0, r8
 800c79e:	4649      	mov	r1, r9
 800c7a0:	f7f4 f99c 	bl	8000adc <__aeabi_dcmplt>
 800c7a4:	b110      	cbz	r0, 800c7ac <_printf_float+0x90>
 800c7a6:	232d      	movs	r3, #45	; 0x2d
 800c7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7ac:	4b93      	ldr	r3, [pc, #588]	; (800c9fc <_printf_float+0x2e0>)
 800c7ae:	4894      	ldr	r0, [pc, #592]	; (800ca00 <_printf_float+0x2e4>)
 800c7b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7b4:	bf94      	ite	ls
 800c7b6:	4698      	movls	r8, r3
 800c7b8:	4680      	movhi	r8, r0
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	6123      	str	r3, [r4, #16]
 800c7be:	9b05      	ldr	r3, [sp, #20]
 800c7c0:	f023 0204 	bic.w	r2, r3, #4
 800c7c4:	6022      	str	r2, [r4, #0]
 800c7c6:	f04f 0900 	mov.w	r9, #0
 800c7ca:	9700      	str	r7, [sp, #0]
 800c7cc:	4633      	mov	r3, r6
 800c7ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800c7d0:	4621      	mov	r1, r4
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f000 f9d8 	bl	800cb88 <_printf_common>
 800c7d8:	3001      	adds	r0, #1
 800c7da:	f040 8090 	bne.w	800c8fe <_printf_float+0x1e2>
 800c7de:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e2:	b00d      	add	sp, #52	; 0x34
 800c7e4:	ecbd 8b02 	vpop	{d8}
 800c7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ec:	4642      	mov	r2, r8
 800c7ee:	464b      	mov	r3, r9
 800c7f0:	4640      	mov	r0, r8
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	f7f4 f99a 	bl	8000b2c <__aeabi_dcmpun>
 800c7f8:	b140      	cbz	r0, 800c80c <_printf_float+0xf0>
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	bfbc      	itt	lt
 800c800:	232d      	movlt	r3, #45	; 0x2d
 800c802:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c806:	487f      	ldr	r0, [pc, #508]	; (800ca04 <_printf_float+0x2e8>)
 800c808:	4b7f      	ldr	r3, [pc, #508]	; (800ca08 <_printf_float+0x2ec>)
 800c80a:	e7d1      	b.n	800c7b0 <_printf_float+0x94>
 800c80c:	6863      	ldr	r3, [r4, #4]
 800c80e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c812:	9206      	str	r2, [sp, #24]
 800c814:	1c5a      	adds	r2, r3, #1
 800c816:	d13f      	bne.n	800c898 <_printf_float+0x17c>
 800c818:	2306      	movs	r3, #6
 800c81a:	6063      	str	r3, [r4, #4]
 800c81c:	9b05      	ldr	r3, [sp, #20]
 800c81e:	6861      	ldr	r1, [r4, #4]
 800c820:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c824:	2300      	movs	r3, #0
 800c826:	9303      	str	r3, [sp, #12]
 800c828:	ab0a      	add	r3, sp, #40	; 0x28
 800c82a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c82e:	ab09      	add	r3, sp, #36	; 0x24
 800c830:	ec49 8b10 	vmov	d0, r8, r9
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	6022      	str	r2, [r4, #0]
 800c838:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c83c:	4628      	mov	r0, r5
 800c83e:	f7ff fecd 	bl	800c5dc <__cvt>
 800c842:	9b06      	ldr	r3, [sp, #24]
 800c844:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c846:	2b47      	cmp	r3, #71	; 0x47
 800c848:	4680      	mov	r8, r0
 800c84a:	d108      	bne.n	800c85e <_printf_float+0x142>
 800c84c:	1cc8      	adds	r0, r1, #3
 800c84e:	db02      	blt.n	800c856 <_printf_float+0x13a>
 800c850:	6863      	ldr	r3, [r4, #4]
 800c852:	4299      	cmp	r1, r3
 800c854:	dd41      	ble.n	800c8da <_printf_float+0x1be>
 800c856:	f1ab 0b02 	sub.w	fp, fp, #2
 800c85a:	fa5f fb8b 	uxtb.w	fp, fp
 800c85e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c862:	d820      	bhi.n	800c8a6 <_printf_float+0x18a>
 800c864:	3901      	subs	r1, #1
 800c866:	465a      	mov	r2, fp
 800c868:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c86c:	9109      	str	r1, [sp, #36]	; 0x24
 800c86e:	f7ff ff17 	bl	800c6a0 <__exponent>
 800c872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c874:	1813      	adds	r3, r2, r0
 800c876:	2a01      	cmp	r2, #1
 800c878:	4681      	mov	r9, r0
 800c87a:	6123      	str	r3, [r4, #16]
 800c87c:	dc02      	bgt.n	800c884 <_printf_float+0x168>
 800c87e:	6822      	ldr	r2, [r4, #0]
 800c880:	07d2      	lsls	r2, r2, #31
 800c882:	d501      	bpl.n	800c888 <_printf_float+0x16c>
 800c884:	3301      	adds	r3, #1
 800c886:	6123      	str	r3, [r4, #16]
 800c888:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d09c      	beq.n	800c7ca <_printf_float+0xae>
 800c890:	232d      	movs	r3, #45	; 0x2d
 800c892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c896:	e798      	b.n	800c7ca <_printf_float+0xae>
 800c898:	9a06      	ldr	r2, [sp, #24]
 800c89a:	2a47      	cmp	r2, #71	; 0x47
 800c89c:	d1be      	bne.n	800c81c <_printf_float+0x100>
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1bc      	bne.n	800c81c <_printf_float+0x100>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	e7b9      	b.n	800c81a <_printf_float+0xfe>
 800c8a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8aa:	d118      	bne.n	800c8de <_printf_float+0x1c2>
 800c8ac:	2900      	cmp	r1, #0
 800c8ae:	6863      	ldr	r3, [r4, #4]
 800c8b0:	dd0b      	ble.n	800c8ca <_printf_float+0x1ae>
 800c8b2:	6121      	str	r1, [r4, #16]
 800c8b4:	b913      	cbnz	r3, 800c8bc <_printf_float+0x1a0>
 800c8b6:	6822      	ldr	r2, [r4, #0]
 800c8b8:	07d0      	lsls	r0, r2, #31
 800c8ba:	d502      	bpl.n	800c8c2 <_printf_float+0x1a6>
 800c8bc:	3301      	adds	r3, #1
 800c8be:	440b      	add	r3, r1
 800c8c0:	6123      	str	r3, [r4, #16]
 800c8c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8c4:	f04f 0900 	mov.w	r9, #0
 800c8c8:	e7de      	b.n	800c888 <_printf_float+0x16c>
 800c8ca:	b913      	cbnz	r3, 800c8d2 <_printf_float+0x1b6>
 800c8cc:	6822      	ldr	r2, [r4, #0]
 800c8ce:	07d2      	lsls	r2, r2, #31
 800c8d0:	d501      	bpl.n	800c8d6 <_printf_float+0x1ba>
 800c8d2:	3302      	adds	r3, #2
 800c8d4:	e7f4      	b.n	800c8c0 <_printf_float+0x1a4>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e7f2      	b.n	800c8c0 <_printf_float+0x1a4>
 800c8da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e0:	4299      	cmp	r1, r3
 800c8e2:	db05      	blt.n	800c8f0 <_printf_float+0x1d4>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	6121      	str	r1, [r4, #16]
 800c8e8:	07d8      	lsls	r0, r3, #31
 800c8ea:	d5ea      	bpl.n	800c8c2 <_printf_float+0x1a6>
 800c8ec:	1c4b      	adds	r3, r1, #1
 800c8ee:	e7e7      	b.n	800c8c0 <_printf_float+0x1a4>
 800c8f0:	2900      	cmp	r1, #0
 800c8f2:	bfd4      	ite	le
 800c8f4:	f1c1 0202 	rsble	r2, r1, #2
 800c8f8:	2201      	movgt	r2, #1
 800c8fa:	4413      	add	r3, r2
 800c8fc:	e7e0      	b.n	800c8c0 <_printf_float+0x1a4>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	055a      	lsls	r2, r3, #21
 800c902:	d407      	bmi.n	800c914 <_printf_float+0x1f8>
 800c904:	6923      	ldr	r3, [r4, #16]
 800c906:	4642      	mov	r2, r8
 800c908:	4631      	mov	r1, r6
 800c90a:	4628      	mov	r0, r5
 800c90c:	47b8      	blx	r7
 800c90e:	3001      	adds	r0, #1
 800c910:	d12c      	bne.n	800c96c <_printf_float+0x250>
 800c912:	e764      	b.n	800c7de <_printf_float+0xc2>
 800c914:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c918:	f240 80e0 	bls.w	800cadc <_printf_float+0x3c0>
 800c91c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c920:	2200      	movs	r2, #0
 800c922:	2300      	movs	r3, #0
 800c924:	f7f4 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d034      	beq.n	800c996 <_printf_float+0x27a>
 800c92c:	4a37      	ldr	r2, [pc, #220]	; (800ca0c <_printf_float+0x2f0>)
 800c92e:	2301      	movs	r3, #1
 800c930:	4631      	mov	r1, r6
 800c932:	4628      	mov	r0, r5
 800c934:	47b8      	blx	r7
 800c936:	3001      	adds	r0, #1
 800c938:	f43f af51 	beq.w	800c7de <_printf_float+0xc2>
 800c93c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c940:	429a      	cmp	r2, r3
 800c942:	db02      	blt.n	800c94a <_printf_float+0x22e>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	07d8      	lsls	r0, r3, #31
 800c948:	d510      	bpl.n	800c96c <_printf_float+0x250>
 800c94a:	ee18 3a10 	vmov	r3, s16
 800c94e:	4652      	mov	r2, sl
 800c950:	4631      	mov	r1, r6
 800c952:	4628      	mov	r0, r5
 800c954:	47b8      	blx	r7
 800c956:	3001      	adds	r0, #1
 800c958:	f43f af41 	beq.w	800c7de <_printf_float+0xc2>
 800c95c:	f04f 0800 	mov.w	r8, #0
 800c960:	f104 091a 	add.w	r9, r4, #26
 800c964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c966:	3b01      	subs	r3, #1
 800c968:	4543      	cmp	r3, r8
 800c96a:	dc09      	bgt.n	800c980 <_printf_float+0x264>
 800c96c:	6823      	ldr	r3, [r4, #0]
 800c96e:	079b      	lsls	r3, r3, #30
 800c970:	f100 8105 	bmi.w	800cb7e <_printf_float+0x462>
 800c974:	68e0      	ldr	r0, [r4, #12]
 800c976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c978:	4298      	cmp	r0, r3
 800c97a:	bfb8      	it	lt
 800c97c:	4618      	movlt	r0, r3
 800c97e:	e730      	b.n	800c7e2 <_printf_float+0xc6>
 800c980:	2301      	movs	r3, #1
 800c982:	464a      	mov	r2, r9
 800c984:	4631      	mov	r1, r6
 800c986:	4628      	mov	r0, r5
 800c988:	47b8      	blx	r7
 800c98a:	3001      	adds	r0, #1
 800c98c:	f43f af27 	beq.w	800c7de <_printf_float+0xc2>
 800c990:	f108 0801 	add.w	r8, r8, #1
 800c994:	e7e6      	b.n	800c964 <_printf_float+0x248>
 800c996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c998:	2b00      	cmp	r3, #0
 800c99a:	dc39      	bgt.n	800ca10 <_printf_float+0x2f4>
 800c99c:	4a1b      	ldr	r2, [pc, #108]	; (800ca0c <_printf_float+0x2f0>)
 800c99e:	2301      	movs	r3, #1
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b8      	blx	r7
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	f43f af19 	beq.w	800c7de <_printf_float+0xc2>
 800c9ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	d102      	bne.n	800c9ba <_printf_float+0x29e>
 800c9b4:	6823      	ldr	r3, [r4, #0]
 800c9b6:	07d9      	lsls	r1, r3, #31
 800c9b8:	d5d8      	bpl.n	800c96c <_printf_float+0x250>
 800c9ba:	ee18 3a10 	vmov	r3, s16
 800c9be:	4652      	mov	r2, sl
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	47b8      	blx	r7
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	f43f af09 	beq.w	800c7de <_printf_float+0xc2>
 800c9cc:	f04f 0900 	mov.w	r9, #0
 800c9d0:	f104 0a1a 	add.w	sl, r4, #26
 800c9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d6:	425b      	negs	r3, r3
 800c9d8:	454b      	cmp	r3, r9
 800c9da:	dc01      	bgt.n	800c9e0 <_printf_float+0x2c4>
 800c9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9de:	e792      	b.n	800c906 <_printf_float+0x1ea>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	4652      	mov	r2, sl
 800c9e4:	4631      	mov	r1, r6
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	47b8      	blx	r7
 800c9ea:	3001      	adds	r0, #1
 800c9ec:	f43f aef7 	beq.w	800c7de <_printf_float+0xc2>
 800c9f0:	f109 0901 	add.w	r9, r9, #1
 800c9f4:	e7ee      	b.n	800c9d4 <_printf_float+0x2b8>
 800c9f6:	bf00      	nop
 800c9f8:	7fefffff 	.word	0x7fefffff
 800c9fc:	08011374 	.word	0x08011374
 800ca00:	08011378 	.word	0x08011378
 800ca04:	08011380 	.word	0x08011380
 800ca08:	0801137c 	.word	0x0801137c
 800ca0c:	08011384 	.word	0x08011384
 800ca10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca14:	429a      	cmp	r2, r3
 800ca16:	bfa8      	it	ge
 800ca18:	461a      	movge	r2, r3
 800ca1a:	2a00      	cmp	r2, #0
 800ca1c:	4691      	mov	r9, r2
 800ca1e:	dc37      	bgt.n	800ca90 <_printf_float+0x374>
 800ca20:	f04f 0b00 	mov.w	fp, #0
 800ca24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca28:	f104 021a 	add.w	r2, r4, #26
 800ca2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca2e:	9305      	str	r3, [sp, #20]
 800ca30:	eba3 0309 	sub.w	r3, r3, r9
 800ca34:	455b      	cmp	r3, fp
 800ca36:	dc33      	bgt.n	800caa0 <_printf_float+0x384>
 800ca38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	db3b      	blt.n	800cab8 <_printf_float+0x39c>
 800ca40:	6823      	ldr	r3, [r4, #0]
 800ca42:	07da      	lsls	r2, r3, #31
 800ca44:	d438      	bmi.n	800cab8 <_printf_float+0x39c>
 800ca46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca48:	9a05      	ldr	r2, [sp, #20]
 800ca4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca4c:	1a9a      	subs	r2, r3, r2
 800ca4e:	eba3 0901 	sub.w	r9, r3, r1
 800ca52:	4591      	cmp	r9, r2
 800ca54:	bfa8      	it	ge
 800ca56:	4691      	movge	r9, r2
 800ca58:	f1b9 0f00 	cmp.w	r9, #0
 800ca5c:	dc35      	bgt.n	800caca <_printf_float+0x3ae>
 800ca5e:	f04f 0800 	mov.w	r8, #0
 800ca62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca66:	f104 0a1a 	add.w	sl, r4, #26
 800ca6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca6e:	1a9b      	subs	r3, r3, r2
 800ca70:	eba3 0309 	sub.w	r3, r3, r9
 800ca74:	4543      	cmp	r3, r8
 800ca76:	f77f af79 	ble.w	800c96c <_printf_float+0x250>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	4652      	mov	r2, sl
 800ca7e:	4631      	mov	r1, r6
 800ca80:	4628      	mov	r0, r5
 800ca82:	47b8      	blx	r7
 800ca84:	3001      	adds	r0, #1
 800ca86:	f43f aeaa 	beq.w	800c7de <_printf_float+0xc2>
 800ca8a:	f108 0801 	add.w	r8, r8, #1
 800ca8e:	e7ec      	b.n	800ca6a <_printf_float+0x34e>
 800ca90:	4613      	mov	r3, r2
 800ca92:	4631      	mov	r1, r6
 800ca94:	4642      	mov	r2, r8
 800ca96:	4628      	mov	r0, r5
 800ca98:	47b8      	blx	r7
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	d1c0      	bne.n	800ca20 <_printf_float+0x304>
 800ca9e:	e69e      	b.n	800c7de <_printf_float+0xc2>
 800caa0:	2301      	movs	r3, #1
 800caa2:	4631      	mov	r1, r6
 800caa4:	4628      	mov	r0, r5
 800caa6:	9205      	str	r2, [sp, #20]
 800caa8:	47b8      	blx	r7
 800caaa:	3001      	adds	r0, #1
 800caac:	f43f ae97 	beq.w	800c7de <_printf_float+0xc2>
 800cab0:	9a05      	ldr	r2, [sp, #20]
 800cab2:	f10b 0b01 	add.w	fp, fp, #1
 800cab6:	e7b9      	b.n	800ca2c <_printf_float+0x310>
 800cab8:	ee18 3a10 	vmov	r3, s16
 800cabc:	4652      	mov	r2, sl
 800cabe:	4631      	mov	r1, r6
 800cac0:	4628      	mov	r0, r5
 800cac2:	47b8      	blx	r7
 800cac4:	3001      	adds	r0, #1
 800cac6:	d1be      	bne.n	800ca46 <_printf_float+0x32a>
 800cac8:	e689      	b.n	800c7de <_printf_float+0xc2>
 800caca:	9a05      	ldr	r2, [sp, #20]
 800cacc:	464b      	mov	r3, r9
 800cace:	4442      	add	r2, r8
 800cad0:	4631      	mov	r1, r6
 800cad2:	4628      	mov	r0, r5
 800cad4:	47b8      	blx	r7
 800cad6:	3001      	adds	r0, #1
 800cad8:	d1c1      	bne.n	800ca5e <_printf_float+0x342>
 800cada:	e680      	b.n	800c7de <_printf_float+0xc2>
 800cadc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cade:	2a01      	cmp	r2, #1
 800cae0:	dc01      	bgt.n	800cae6 <_printf_float+0x3ca>
 800cae2:	07db      	lsls	r3, r3, #31
 800cae4:	d538      	bpl.n	800cb58 <_printf_float+0x43c>
 800cae6:	2301      	movs	r3, #1
 800cae8:	4642      	mov	r2, r8
 800caea:	4631      	mov	r1, r6
 800caec:	4628      	mov	r0, r5
 800caee:	47b8      	blx	r7
 800caf0:	3001      	adds	r0, #1
 800caf2:	f43f ae74 	beq.w	800c7de <_printf_float+0xc2>
 800caf6:	ee18 3a10 	vmov	r3, s16
 800cafa:	4652      	mov	r2, sl
 800cafc:	4631      	mov	r1, r6
 800cafe:	4628      	mov	r0, r5
 800cb00:	47b8      	blx	r7
 800cb02:	3001      	adds	r0, #1
 800cb04:	f43f ae6b 	beq.w	800c7de <_printf_float+0xc2>
 800cb08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f7f3 ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb14:	b9d8      	cbnz	r0, 800cb4e <_printf_float+0x432>
 800cb16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb18:	f108 0201 	add.w	r2, r8, #1
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	4631      	mov	r1, r6
 800cb20:	4628      	mov	r0, r5
 800cb22:	47b8      	blx	r7
 800cb24:	3001      	adds	r0, #1
 800cb26:	d10e      	bne.n	800cb46 <_printf_float+0x42a>
 800cb28:	e659      	b.n	800c7de <_printf_float+0xc2>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	4652      	mov	r2, sl
 800cb2e:	4631      	mov	r1, r6
 800cb30:	4628      	mov	r0, r5
 800cb32:	47b8      	blx	r7
 800cb34:	3001      	adds	r0, #1
 800cb36:	f43f ae52 	beq.w	800c7de <_printf_float+0xc2>
 800cb3a:	f108 0801 	add.w	r8, r8, #1
 800cb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb40:	3b01      	subs	r3, #1
 800cb42:	4543      	cmp	r3, r8
 800cb44:	dcf1      	bgt.n	800cb2a <_printf_float+0x40e>
 800cb46:	464b      	mov	r3, r9
 800cb48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb4c:	e6dc      	b.n	800c908 <_printf_float+0x1ec>
 800cb4e:	f04f 0800 	mov.w	r8, #0
 800cb52:	f104 0a1a 	add.w	sl, r4, #26
 800cb56:	e7f2      	b.n	800cb3e <_printf_float+0x422>
 800cb58:	2301      	movs	r3, #1
 800cb5a:	4642      	mov	r2, r8
 800cb5c:	e7df      	b.n	800cb1e <_printf_float+0x402>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	464a      	mov	r2, r9
 800cb62:	4631      	mov	r1, r6
 800cb64:	4628      	mov	r0, r5
 800cb66:	47b8      	blx	r7
 800cb68:	3001      	adds	r0, #1
 800cb6a:	f43f ae38 	beq.w	800c7de <_printf_float+0xc2>
 800cb6e:	f108 0801 	add.w	r8, r8, #1
 800cb72:	68e3      	ldr	r3, [r4, #12]
 800cb74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb76:	1a5b      	subs	r3, r3, r1
 800cb78:	4543      	cmp	r3, r8
 800cb7a:	dcf0      	bgt.n	800cb5e <_printf_float+0x442>
 800cb7c:	e6fa      	b.n	800c974 <_printf_float+0x258>
 800cb7e:	f04f 0800 	mov.w	r8, #0
 800cb82:	f104 0919 	add.w	r9, r4, #25
 800cb86:	e7f4      	b.n	800cb72 <_printf_float+0x456>

0800cb88 <_printf_common>:
 800cb88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb8c:	4616      	mov	r6, r2
 800cb8e:	4699      	mov	r9, r3
 800cb90:	688a      	ldr	r2, [r1, #8]
 800cb92:	690b      	ldr	r3, [r1, #16]
 800cb94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	bfb8      	it	lt
 800cb9c:	4613      	movlt	r3, r2
 800cb9e:	6033      	str	r3, [r6, #0]
 800cba0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cba4:	4607      	mov	r7, r0
 800cba6:	460c      	mov	r4, r1
 800cba8:	b10a      	cbz	r2, 800cbae <_printf_common+0x26>
 800cbaa:	3301      	adds	r3, #1
 800cbac:	6033      	str	r3, [r6, #0]
 800cbae:	6823      	ldr	r3, [r4, #0]
 800cbb0:	0699      	lsls	r1, r3, #26
 800cbb2:	bf42      	ittt	mi
 800cbb4:	6833      	ldrmi	r3, [r6, #0]
 800cbb6:	3302      	addmi	r3, #2
 800cbb8:	6033      	strmi	r3, [r6, #0]
 800cbba:	6825      	ldr	r5, [r4, #0]
 800cbbc:	f015 0506 	ands.w	r5, r5, #6
 800cbc0:	d106      	bne.n	800cbd0 <_printf_common+0x48>
 800cbc2:	f104 0a19 	add.w	sl, r4, #25
 800cbc6:	68e3      	ldr	r3, [r4, #12]
 800cbc8:	6832      	ldr	r2, [r6, #0]
 800cbca:	1a9b      	subs	r3, r3, r2
 800cbcc:	42ab      	cmp	r3, r5
 800cbce:	dc26      	bgt.n	800cc1e <_printf_common+0x96>
 800cbd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbd4:	1e13      	subs	r3, r2, #0
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	bf18      	it	ne
 800cbda:	2301      	movne	r3, #1
 800cbdc:	0692      	lsls	r2, r2, #26
 800cbde:	d42b      	bmi.n	800cc38 <_printf_common+0xb0>
 800cbe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	47c0      	blx	r8
 800cbea:	3001      	adds	r0, #1
 800cbec:	d01e      	beq.n	800cc2c <_printf_common+0xa4>
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	68e5      	ldr	r5, [r4, #12]
 800cbf2:	6832      	ldr	r2, [r6, #0]
 800cbf4:	f003 0306 	and.w	r3, r3, #6
 800cbf8:	2b04      	cmp	r3, #4
 800cbfa:	bf08      	it	eq
 800cbfc:	1aad      	subeq	r5, r5, r2
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	6922      	ldr	r2, [r4, #16]
 800cc02:	bf0c      	ite	eq
 800cc04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc08:	2500      	movne	r5, #0
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	bfc4      	itt	gt
 800cc0e:	1a9b      	subgt	r3, r3, r2
 800cc10:	18ed      	addgt	r5, r5, r3
 800cc12:	2600      	movs	r6, #0
 800cc14:	341a      	adds	r4, #26
 800cc16:	42b5      	cmp	r5, r6
 800cc18:	d11a      	bne.n	800cc50 <_printf_common+0xc8>
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	e008      	b.n	800cc30 <_printf_common+0xa8>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	4652      	mov	r2, sl
 800cc22:	4649      	mov	r1, r9
 800cc24:	4638      	mov	r0, r7
 800cc26:	47c0      	blx	r8
 800cc28:	3001      	adds	r0, #1
 800cc2a:	d103      	bne.n	800cc34 <_printf_common+0xac>
 800cc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc34:	3501      	adds	r5, #1
 800cc36:	e7c6      	b.n	800cbc6 <_printf_common+0x3e>
 800cc38:	18e1      	adds	r1, r4, r3
 800cc3a:	1c5a      	adds	r2, r3, #1
 800cc3c:	2030      	movs	r0, #48	; 0x30
 800cc3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc42:	4422      	add	r2, r4
 800cc44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc4c:	3302      	adds	r3, #2
 800cc4e:	e7c7      	b.n	800cbe0 <_printf_common+0x58>
 800cc50:	2301      	movs	r3, #1
 800cc52:	4622      	mov	r2, r4
 800cc54:	4649      	mov	r1, r9
 800cc56:	4638      	mov	r0, r7
 800cc58:	47c0      	blx	r8
 800cc5a:	3001      	adds	r0, #1
 800cc5c:	d0e6      	beq.n	800cc2c <_printf_common+0xa4>
 800cc5e:	3601      	adds	r6, #1
 800cc60:	e7d9      	b.n	800cc16 <_printf_common+0x8e>
	...

0800cc64 <_printf_i>:
 800cc64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc68:	7e0f      	ldrb	r7, [r1, #24]
 800cc6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc6c:	2f78      	cmp	r7, #120	; 0x78
 800cc6e:	4691      	mov	r9, r2
 800cc70:	4680      	mov	r8, r0
 800cc72:	460c      	mov	r4, r1
 800cc74:	469a      	mov	sl, r3
 800cc76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc7a:	d807      	bhi.n	800cc8c <_printf_i+0x28>
 800cc7c:	2f62      	cmp	r7, #98	; 0x62
 800cc7e:	d80a      	bhi.n	800cc96 <_printf_i+0x32>
 800cc80:	2f00      	cmp	r7, #0
 800cc82:	f000 80d8 	beq.w	800ce36 <_printf_i+0x1d2>
 800cc86:	2f58      	cmp	r7, #88	; 0x58
 800cc88:	f000 80a3 	beq.w	800cdd2 <_printf_i+0x16e>
 800cc8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc94:	e03a      	b.n	800cd0c <_printf_i+0xa8>
 800cc96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc9a:	2b15      	cmp	r3, #21
 800cc9c:	d8f6      	bhi.n	800cc8c <_printf_i+0x28>
 800cc9e:	a101      	add	r1, pc, #4	; (adr r1, 800cca4 <_printf_i+0x40>)
 800cca0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cca4:	0800ccfd 	.word	0x0800ccfd
 800cca8:	0800cd11 	.word	0x0800cd11
 800ccac:	0800cc8d 	.word	0x0800cc8d
 800ccb0:	0800cc8d 	.word	0x0800cc8d
 800ccb4:	0800cc8d 	.word	0x0800cc8d
 800ccb8:	0800cc8d 	.word	0x0800cc8d
 800ccbc:	0800cd11 	.word	0x0800cd11
 800ccc0:	0800cc8d 	.word	0x0800cc8d
 800ccc4:	0800cc8d 	.word	0x0800cc8d
 800ccc8:	0800cc8d 	.word	0x0800cc8d
 800cccc:	0800cc8d 	.word	0x0800cc8d
 800ccd0:	0800ce1d 	.word	0x0800ce1d
 800ccd4:	0800cd41 	.word	0x0800cd41
 800ccd8:	0800cdff 	.word	0x0800cdff
 800ccdc:	0800cc8d 	.word	0x0800cc8d
 800cce0:	0800cc8d 	.word	0x0800cc8d
 800cce4:	0800ce3f 	.word	0x0800ce3f
 800cce8:	0800cc8d 	.word	0x0800cc8d
 800ccec:	0800cd41 	.word	0x0800cd41
 800ccf0:	0800cc8d 	.word	0x0800cc8d
 800ccf4:	0800cc8d 	.word	0x0800cc8d
 800ccf8:	0800ce07 	.word	0x0800ce07
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	1d1a      	adds	r2, r3, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	602a      	str	r2, [r5, #0]
 800cd04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	e0a3      	b.n	800ce58 <_printf_i+0x1f4>
 800cd10:	6820      	ldr	r0, [r4, #0]
 800cd12:	6829      	ldr	r1, [r5, #0]
 800cd14:	0606      	lsls	r6, r0, #24
 800cd16:	f101 0304 	add.w	r3, r1, #4
 800cd1a:	d50a      	bpl.n	800cd32 <_printf_i+0xce>
 800cd1c:	680e      	ldr	r6, [r1, #0]
 800cd1e:	602b      	str	r3, [r5, #0]
 800cd20:	2e00      	cmp	r6, #0
 800cd22:	da03      	bge.n	800cd2c <_printf_i+0xc8>
 800cd24:	232d      	movs	r3, #45	; 0x2d
 800cd26:	4276      	negs	r6, r6
 800cd28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd2c:	485e      	ldr	r0, [pc, #376]	; (800cea8 <_printf_i+0x244>)
 800cd2e:	230a      	movs	r3, #10
 800cd30:	e019      	b.n	800cd66 <_printf_i+0x102>
 800cd32:	680e      	ldr	r6, [r1, #0]
 800cd34:	602b      	str	r3, [r5, #0]
 800cd36:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd3a:	bf18      	it	ne
 800cd3c:	b236      	sxthne	r6, r6
 800cd3e:	e7ef      	b.n	800cd20 <_printf_i+0xbc>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	6820      	ldr	r0, [r4, #0]
 800cd44:	1d19      	adds	r1, r3, #4
 800cd46:	6029      	str	r1, [r5, #0]
 800cd48:	0601      	lsls	r1, r0, #24
 800cd4a:	d501      	bpl.n	800cd50 <_printf_i+0xec>
 800cd4c:	681e      	ldr	r6, [r3, #0]
 800cd4e:	e002      	b.n	800cd56 <_printf_i+0xf2>
 800cd50:	0646      	lsls	r6, r0, #25
 800cd52:	d5fb      	bpl.n	800cd4c <_printf_i+0xe8>
 800cd54:	881e      	ldrh	r6, [r3, #0]
 800cd56:	4854      	ldr	r0, [pc, #336]	; (800cea8 <_printf_i+0x244>)
 800cd58:	2f6f      	cmp	r7, #111	; 0x6f
 800cd5a:	bf0c      	ite	eq
 800cd5c:	2308      	moveq	r3, #8
 800cd5e:	230a      	movne	r3, #10
 800cd60:	2100      	movs	r1, #0
 800cd62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd66:	6865      	ldr	r5, [r4, #4]
 800cd68:	60a5      	str	r5, [r4, #8]
 800cd6a:	2d00      	cmp	r5, #0
 800cd6c:	bfa2      	ittt	ge
 800cd6e:	6821      	ldrge	r1, [r4, #0]
 800cd70:	f021 0104 	bicge.w	r1, r1, #4
 800cd74:	6021      	strge	r1, [r4, #0]
 800cd76:	b90e      	cbnz	r6, 800cd7c <_printf_i+0x118>
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	d04d      	beq.n	800ce18 <_printf_i+0x1b4>
 800cd7c:	4615      	mov	r5, r2
 800cd7e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd82:	fb03 6711 	mls	r7, r3, r1, r6
 800cd86:	5dc7      	ldrb	r7, [r0, r7]
 800cd88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd8c:	4637      	mov	r7, r6
 800cd8e:	42bb      	cmp	r3, r7
 800cd90:	460e      	mov	r6, r1
 800cd92:	d9f4      	bls.n	800cd7e <_printf_i+0x11a>
 800cd94:	2b08      	cmp	r3, #8
 800cd96:	d10b      	bne.n	800cdb0 <_printf_i+0x14c>
 800cd98:	6823      	ldr	r3, [r4, #0]
 800cd9a:	07de      	lsls	r6, r3, #31
 800cd9c:	d508      	bpl.n	800cdb0 <_printf_i+0x14c>
 800cd9e:	6923      	ldr	r3, [r4, #16]
 800cda0:	6861      	ldr	r1, [r4, #4]
 800cda2:	4299      	cmp	r1, r3
 800cda4:	bfde      	ittt	le
 800cda6:	2330      	movle	r3, #48	; 0x30
 800cda8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cdac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cdb0:	1b52      	subs	r2, r2, r5
 800cdb2:	6122      	str	r2, [r4, #16]
 800cdb4:	f8cd a000 	str.w	sl, [sp]
 800cdb8:	464b      	mov	r3, r9
 800cdba:	aa03      	add	r2, sp, #12
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	f7ff fee2 	bl	800cb88 <_printf_common>
 800cdc4:	3001      	adds	r0, #1
 800cdc6:	d14c      	bne.n	800ce62 <_printf_i+0x1fe>
 800cdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdcc:	b004      	add	sp, #16
 800cdce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdd2:	4835      	ldr	r0, [pc, #212]	; (800cea8 <_printf_i+0x244>)
 800cdd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cdd8:	6829      	ldr	r1, [r5, #0]
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	f851 6b04 	ldr.w	r6, [r1], #4
 800cde0:	6029      	str	r1, [r5, #0]
 800cde2:	061d      	lsls	r5, r3, #24
 800cde4:	d514      	bpl.n	800ce10 <_printf_i+0x1ac>
 800cde6:	07df      	lsls	r7, r3, #31
 800cde8:	bf44      	itt	mi
 800cdea:	f043 0320 	orrmi.w	r3, r3, #32
 800cdee:	6023      	strmi	r3, [r4, #0]
 800cdf0:	b91e      	cbnz	r6, 800cdfa <_printf_i+0x196>
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	f023 0320 	bic.w	r3, r3, #32
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	2310      	movs	r3, #16
 800cdfc:	e7b0      	b.n	800cd60 <_printf_i+0xfc>
 800cdfe:	6823      	ldr	r3, [r4, #0]
 800ce00:	f043 0320 	orr.w	r3, r3, #32
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	2378      	movs	r3, #120	; 0x78
 800ce08:	4828      	ldr	r0, [pc, #160]	; (800ceac <_printf_i+0x248>)
 800ce0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce0e:	e7e3      	b.n	800cdd8 <_printf_i+0x174>
 800ce10:	0659      	lsls	r1, r3, #25
 800ce12:	bf48      	it	mi
 800ce14:	b2b6      	uxthmi	r6, r6
 800ce16:	e7e6      	b.n	800cde6 <_printf_i+0x182>
 800ce18:	4615      	mov	r5, r2
 800ce1a:	e7bb      	b.n	800cd94 <_printf_i+0x130>
 800ce1c:	682b      	ldr	r3, [r5, #0]
 800ce1e:	6826      	ldr	r6, [r4, #0]
 800ce20:	6961      	ldr	r1, [r4, #20]
 800ce22:	1d18      	adds	r0, r3, #4
 800ce24:	6028      	str	r0, [r5, #0]
 800ce26:	0635      	lsls	r5, r6, #24
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	d501      	bpl.n	800ce30 <_printf_i+0x1cc>
 800ce2c:	6019      	str	r1, [r3, #0]
 800ce2e:	e002      	b.n	800ce36 <_printf_i+0x1d2>
 800ce30:	0670      	lsls	r0, r6, #25
 800ce32:	d5fb      	bpl.n	800ce2c <_printf_i+0x1c8>
 800ce34:	8019      	strh	r1, [r3, #0]
 800ce36:	2300      	movs	r3, #0
 800ce38:	6123      	str	r3, [r4, #16]
 800ce3a:	4615      	mov	r5, r2
 800ce3c:	e7ba      	b.n	800cdb4 <_printf_i+0x150>
 800ce3e:	682b      	ldr	r3, [r5, #0]
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	602a      	str	r2, [r5, #0]
 800ce44:	681d      	ldr	r5, [r3, #0]
 800ce46:	6862      	ldr	r2, [r4, #4]
 800ce48:	2100      	movs	r1, #0
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f7f3 f9c8 	bl	80001e0 <memchr>
 800ce50:	b108      	cbz	r0, 800ce56 <_printf_i+0x1f2>
 800ce52:	1b40      	subs	r0, r0, r5
 800ce54:	6060      	str	r0, [r4, #4]
 800ce56:	6863      	ldr	r3, [r4, #4]
 800ce58:	6123      	str	r3, [r4, #16]
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce60:	e7a8      	b.n	800cdb4 <_printf_i+0x150>
 800ce62:	6923      	ldr	r3, [r4, #16]
 800ce64:	462a      	mov	r2, r5
 800ce66:	4649      	mov	r1, r9
 800ce68:	4640      	mov	r0, r8
 800ce6a:	47d0      	blx	sl
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	d0ab      	beq.n	800cdc8 <_printf_i+0x164>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	079b      	lsls	r3, r3, #30
 800ce74:	d413      	bmi.n	800ce9e <_printf_i+0x23a>
 800ce76:	68e0      	ldr	r0, [r4, #12]
 800ce78:	9b03      	ldr	r3, [sp, #12]
 800ce7a:	4298      	cmp	r0, r3
 800ce7c:	bfb8      	it	lt
 800ce7e:	4618      	movlt	r0, r3
 800ce80:	e7a4      	b.n	800cdcc <_printf_i+0x168>
 800ce82:	2301      	movs	r3, #1
 800ce84:	4632      	mov	r2, r6
 800ce86:	4649      	mov	r1, r9
 800ce88:	4640      	mov	r0, r8
 800ce8a:	47d0      	blx	sl
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	d09b      	beq.n	800cdc8 <_printf_i+0x164>
 800ce90:	3501      	adds	r5, #1
 800ce92:	68e3      	ldr	r3, [r4, #12]
 800ce94:	9903      	ldr	r1, [sp, #12]
 800ce96:	1a5b      	subs	r3, r3, r1
 800ce98:	42ab      	cmp	r3, r5
 800ce9a:	dcf2      	bgt.n	800ce82 <_printf_i+0x21e>
 800ce9c:	e7eb      	b.n	800ce76 <_printf_i+0x212>
 800ce9e:	2500      	movs	r5, #0
 800cea0:	f104 0619 	add.w	r6, r4, #25
 800cea4:	e7f5      	b.n	800ce92 <_printf_i+0x22e>
 800cea6:	bf00      	nop
 800cea8:	08011386 	.word	0x08011386
 800ceac:	08011397 	.word	0x08011397

0800ceb0 <siprintf>:
 800ceb0:	b40e      	push	{r1, r2, r3}
 800ceb2:	b500      	push	{lr}
 800ceb4:	b09c      	sub	sp, #112	; 0x70
 800ceb6:	ab1d      	add	r3, sp, #116	; 0x74
 800ceb8:	9002      	str	r0, [sp, #8]
 800ceba:	9006      	str	r0, [sp, #24]
 800cebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cec0:	4809      	ldr	r0, [pc, #36]	; (800cee8 <siprintf+0x38>)
 800cec2:	9107      	str	r1, [sp, #28]
 800cec4:	9104      	str	r1, [sp, #16]
 800cec6:	4909      	ldr	r1, [pc, #36]	; (800ceec <siprintf+0x3c>)
 800cec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cecc:	9105      	str	r1, [sp, #20]
 800cece:	6800      	ldr	r0, [r0, #0]
 800ced0:	9301      	str	r3, [sp, #4]
 800ced2:	a902      	add	r1, sp, #8
 800ced4:	f002 fef2 	bl	800fcbc <_svfiprintf_r>
 800ced8:	9b02      	ldr	r3, [sp, #8]
 800ceda:	2200      	movs	r2, #0
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	b01c      	add	sp, #112	; 0x70
 800cee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee4:	b003      	add	sp, #12
 800cee6:	4770      	bx	lr
 800cee8:	2000000c 	.word	0x2000000c
 800ceec:	ffff0208 	.word	0xffff0208

0800cef0 <strcat>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	4602      	mov	r2, r0
 800cef4:	7814      	ldrb	r4, [r2, #0]
 800cef6:	4613      	mov	r3, r2
 800cef8:	3201      	adds	r2, #1
 800cefa:	2c00      	cmp	r4, #0
 800cefc:	d1fa      	bne.n	800cef4 <strcat+0x4>
 800cefe:	3b01      	subs	r3, #1
 800cf00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf08:	2a00      	cmp	r2, #0
 800cf0a:	d1f9      	bne.n	800cf00 <strcat+0x10>
 800cf0c:	bd10      	pop	{r4, pc}

0800cf0e <sulp>:
 800cf0e:	b570      	push	{r4, r5, r6, lr}
 800cf10:	4604      	mov	r4, r0
 800cf12:	460d      	mov	r5, r1
 800cf14:	ec45 4b10 	vmov	d0, r4, r5
 800cf18:	4616      	mov	r6, r2
 800cf1a:	f002 fc2d 	bl	800f778 <__ulp>
 800cf1e:	ec51 0b10 	vmov	r0, r1, d0
 800cf22:	b17e      	cbz	r6, 800cf44 <sulp+0x36>
 800cf24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	dd09      	ble.n	800cf44 <sulp+0x36>
 800cf30:	051b      	lsls	r3, r3, #20
 800cf32:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cf36:	2400      	movs	r4, #0
 800cf38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cf3c:	4622      	mov	r2, r4
 800cf3e:	462b      	mov	r3, r5
 800cf40:	f7f3 fb5a 	bl	80005f8 <__aeabi_dmul>
 800cf44:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf48 <_strtod_l>:
 800cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	ed2d 8b02 	vpush	{d8}
 800cf50:	b09d      	sub	sp, #116	; 0x74
 800cf52:	461f      	mov	r7, r3
 800cf54:	2300      	movs	r3, #0
 800cf56:	9318      	str	r3, [sp, #96]	; 0x60
 800cf58:	4ba2      	ldr	r3, [pc, #648]	; (800d1e4 <_strtod_l+0x29c>)
 800cf5a:	9213      	str	r2, [sp, #76]	; 0x4c
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	9305      	str	r3, [sp, #20]
 800cf60:	4604      	mov	r4, r0
 800cf62:	4618      	mov	r0, r3
 800cf64:	4688      	mov	r8, r1
 800cf66:	f7f3 f933 	bl	80001d0 <strlen>
 800cf6a:	f04f 0a00 	mov.w	sl, #0
 800cf6e:	4605      	mov	r5, r0
 800cf70:	f04f 0b00 	mov.w	fp, #0
 800cf74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cf78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf7a:	781a      	ldrb	r2, [r3, #0]
 800cf7c:	2a2b      	cmp	r2, #43	; 0x2b
 800cf7e:	d04e      	beq.n	800d01e <_strtod_l+0xd6>
 800cf80:	d83b      	bhi.n	800cffa <_strtod_l+0xb2>
 800cf82:	2a0d      	cmp	r2, #13
 800cf84:	d834      	bhi.n	800cff0 <_strtod_l+0xa8>
 800cf86:	2a08      	cmp	r2, #8
 800cf88:	d834      	bhi.n	800cff4 <_strtod_l+0xac>
 800cf8a:	2a00      	cmp	r2, #0
 800cf8c:	d03e      	beq.n	800d00c <_strtod_l+0xc4>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	930a      	str	r3, [sp, #40]	; 0x28
 800cf92:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cf94:	7833      	ldrb	r3, [r6, #0]
 800cf96:	2b30      	cmp	r3, #48	; 0x30
 800cf98:	f040 80b0 	bne.w	800d0fc <_strtod_l+0x1b4>
 800cf9c:	7873      	ldrb	r3, [r6, #1]
 800cf9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cfa2:	2b58      	cmp	r3, #88	; 0x58
 800cfa4:	d168      	bne.n	800d078 <_strtod_l+0x130>
 800cfa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	ab18      	add	r3, sp, #96	; 0x60
 800cfac:	9702      	str	r7, [sp, #8]
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	4a8d      	ldr	r2, [pc, #564]	; (800d1e8 <_strtod_l+0x2a0>)
 800cfb2:	ab19      	add	r3, sp, #100	; 0x64
 800cfb4:	a917      	add	r1, sp, #92	; 0x5c
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f001 fd46 	bl	800ea48 <__gethex>
 800cfbc:	f010 0707 	ands.w	r7, r0, #7
 800cfc0:	4605      	mov	r5, r0
 800cfc2:	d005      	beq.n	800cfd0 <_strtod_l+0x88>
 800cfc4:	2f06      	cmp	r7, #6
 800cfc6:	d12c      	bne.n	800d022 <_strtod_l+0xda>
 800cfc8:	3601      	adds	r6, #1
 800cfca:	2300      	movs	r3, #0
 800cfcc:	9617      	str	r6, [sp, #92]	; 0x5c
 800cfce:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f040 8590 	bne.w	800daf8 <_strtod_l+0xbb0>
 800cfd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfda:	b1eb      	cbz	r3, 800d018 <_strtod_l+0xd0>
 800cfdc:	4652      	mov	r2, sl
 800cfde:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cfe2:	ec43 2b10 	vmov	d0, r2, r3
 800cfe6:	b01d      	add	sp, #116	; 0x74
 800cfe8:	ecbd 8b02 	vpop	{d8}
 800cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff0:	2a20      	cmp	r2, #32
 800cff2:	d1cc      	bne.n	800cf8e <_strtod_l+0x46>
 800cff4:	3301      	adds	r3, #1
 800cff6:	9317      	str	r3, [sp, #92]	; 0x5c
 800cff8:	e7be      	b.n	800cf78 <_strtod_l+0x30>
 800cffa:	2a2d      	cmp	r2, #45	; 0x2d
 800cffc:	d1c7      	bne.n	800cf8e <_strtod_l+0x46>
 800cffe:	2201      	movs	r2, #1
 800d000:	920a      	str	r2, [sp, #40]	; 0x28
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	9217      	str	r2, [sp, #92]	; 0x5c
 800d006:	785b      	ldrb	r3, [r3, #1]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d1c2      	bne.n	800cf92 <_strtod_l+0x4a>
 800d00c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d00e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d012:	2b00      	cmp	r3, #0
 800d014:	f040 856e 	bne.w	800daf4 <_strtod_l+0xbac>
 800d018:	4652      	mov	r2, sl
 800d01a:	465b      	mov	r3, fp
 800d01c:	e7e1      	b.n	800cfe2 <_strtod_l+0x9a>
 800d01e:	2200      	movs	r2, #0
 800d020:	e7ee      	b.n	800d000 <_strtod_l+0xb8>
 800d022:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d024:	b13a      	cbz	r2, 800d036 <_strtod_l+0xee>
 800d026:	2135      	movs	r1, #53	; 0x35
 800d028:	a81a      	add	r0, sp, #104	; 0x68
 800d02a:	f002 fcb0 	bl	800f98e <__copybits>
 800d02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d030:	4620      	mov	r0, r4
 800d032:	f002 f86f 	bl	800f114 <_Bfree>
 800d036:	3f01      	subs	r7, #1
 800d038:	2f04      	cmp	r7, #4
 800d03a:	d806      	bhi.n	800d04a <_strtod_l+0x102>
 800d03c:	e8df f007 	tbb	[pc, r7]
 800d040:	1714030a 	.word	0x1714030a
 800d044:	0a          	.byte	0x0a
 800d045:	00          	.byte	0x00
 800d046:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d04a:	0728      	lsls	r0, r5, #28
 800d04c:	d5c0      	bpl.n	800cfd0 <_strtod_l+0x88>
 800d04e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d052:	e7bd      	b.n	800cfd0 <_strtod_l+0x88>
 800d054:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d058:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d05a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d05e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d062:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d066:	e7f0      	b.n	800d04a <_strtod_l+0x102>
 800d068:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d1ec <_strtod_l+0x2a4>
 800d06c:	e7ed      	b.n	800d04a <_strtod_l+0x102>
 800d06e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d072:	f04f 3aff 	mov.w	sl, #4294967295
 800d076:	e7e8      	b.n	800d04a <_strtod_l+0x102>
 800d078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d07a:	1c5a      	adds	r2, r3, #1
 800d07c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d07e:	785b      	ldrb	r3, [r3, #1]
 800d080:	2b30      	cmp	r3, #48	; 0x30
 800d082:	d0f9      	beq.n	800d078 <_strtod_l+0x130>
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0a3      	beq.n	800cfd0 <_strtod_l+0x88>
 800d088:	2301      	movs	r3, #1
 800d08a:	f04f 0900 	mov.w	r9, #0
 800d08e:	9304      	str	r3, [sp, #16]
 800d090:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d092:	9308      	str	r3, [sp, #32]
 800d094:	f8cd 901c 	str.w	r9, [sp, #28]
 800d098:	464f      	mov	r7, r9
 800d09a:	220a      	movs	r2, #10
 800d09c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d09e:	7806      	ldrb	r6, [r0, #0]
 800d0a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d0a4:	b2d9      	uxtb	r1, r3
 800d0a6:	2909      	cmp	r1, #9
 800d0a8:	d92a      	bls.n	800d100 <_strtod_l+0x1b8>
 800d0aa:	9905      	ldr	r1, [sp, #20]
 800d0ac:	462a      	mov	r2, r5
 800d0ae:	f003 f877 	bl	80101a0 <strncmp>
 800d0b2:	b398      	cbz	r0, 800d11c <_strtod_l+0x1d4>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	463d      	mov	r5, r7
 800d0ba:	9005      	str	r0, [sp, #20]
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2a65      	cmp	r2, #101	; 0x65
 800d0c0:	d001      	beq.n	800d0c6 <_strtod_l+0x17e>
 800d0c2:	2a45      	cmp	r2, #69	; 0x45
 800d0c4:	d118      	bne.n	800d0f8 <_strtod_l+0x1b0>
 800d0c6:	b91d      	cbnz	r5, 800d0d0 <_strtod_l+0x188>
 800d0c8:	9a04      	ldr	r2, [sp, #16]
 800d0ca:	4302      	orrs	r2, r0
 800d0cc:	d09e      	beq.n	800d00c <_strtod_l+0xc4>
 800d0ce:	2500      	movs	r5, #0
 800d0d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d0d4:	f108 0201 	add.w	r2, r8, #1
 800d0d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d0da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d0de:	2a2b      	cmp	r2, #43	; 0x2b
 800d0e0:	d075      	beq.n	800d1ce <_strtod_l+0x286>
 800d0e2:	2a2d      	cmp	r2, #45	; 0x2d
 800d0e4:	d07b      	beq.n	800d1de <_strtod_l+0x296>
 800d0e6:	f04f 0c00 	mov.w	ip, #0
 800d0ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d0ee:	2909      	cmp	r1, #9
 800d0f0:	f240 8082 	bls.w	800d1f8 <_strtod_l+0x2b0>
 800d0f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d0f8:	2600      	movs	r6, #0
 800d0fa:	e09d      	b.n	800d238 <_strtod_l+0x2f0>
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	e7c4      	b.n	800d08a <_strtod_l+0x142>
 800d100:	2f08      	cmp	r7, #8
 800d102:	bfd8      	it	le
 800d104:	9907      	ldrle	r1, [sp, #28]
 800d106:	f100 0001 	add.w	r0, r0, #1
 800d10a:	bfda      	itte	le
 800d10c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d110:	9307      	strle	r3, [sp, #28]
 800d112:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d116:	3701      	adds	r7, #1
 800d118:	9017      	str	r0, [sp, #92]	; 0x5c
 800d11a:	e7bf      	b.n	800d09c <_strtod_l+0x154>
 800d11c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d11e:	195a      	adds	r2, r3, r5
 800d120:	9217      	str	r2, [sp, #92]	; 0x5c
 800d122:	5d5a      	ldrb	r2, [r3, r5]
 800d124:	2f00      	cmp	r7, #0
 800d126:	d037      	beq.n	800d198 <_strtod_l+0x250>
 800d128:	9005      	str	r0, [sp, #20]
 800d12a:	463d      	mov	r5, r7
 800d12c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d130:	2b09      	cmp	r3, #9
 800d132:	d912      	bls.n	800d15a <_strtod_l+0x212>
 800d134:	2301      	movs	r3, #1
 800d136:	e7c2      	b.n	800d0be <_strtod_l+0x176>
 800d138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d13a:	1c5a      	adds	r2, r3, #1
 800d13c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d13e:	785a      	ldrb	r2, [r3, #1]
 800d140:	3001      	adds	r0, #1
 800d142:	2a30      	cmp	r2, #48	; 0x30
 800d144:	d0f8      	beq.n	800d138 <_strtod_l+0x1f0>
 800d146:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d14a:	2b08      	cmp	r3, #8
 800d14c:	f200 84d9 	bhi.w	800db02 <_strtod_l+0xbba>
 800d150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d152:	9005      	str	r0, [sp, #20]
 800d154:	2000      	movs	r0, #0
 800d156:	9308      	str	r3, [sp, #32]
 800d158:	4605      	mov	r5, r0
 800d15a:	3a30      	subs	r2, #48	; 0x30
 800d15c:	f100 0301 	add.w	r3, r0, #1
 800d160:	d014      	beq.n	800d18c <_strtod_l+0x244>
 800d162:	9905      	ldr	r1, [sp, #20]
 800d164:	4419      	add	r1, r3
 800d166:	9105      	str	r1, [sp, #20]
 800d168:	462b      	mov	r3, r5
 800d16a:	eb00 0e05 	add.w	lr, r0, r5
 800d16e:	210a      	movs	r1, #10
 800d170:	4573      	cmp	r3, lr
 800d172:	d113      	bne.n	800d19c <_strtod_l+0x254>
 800d174:	182b      	adds	r3, r5, r0
 800d176:	2b08      	cmp	r3, #8
 800d178:	f105 0501 	add.w	r5, r5, #1
 800d17c:	4405      	add	r5, r0
 800d17e:	dc1c      	bgt.n	800d1ba <_strtod_l+0x272>
 800d180:	9907      	ldr	r1, [sp, #28]
 800d182:	230a      	movs	r3, #10
 800d184:	fb03 2301 	mla	r3, r3, r1, r2
 800d188:	9307      	str	r3, [sp, #28]
 800d18a:	2300      	movs	r3, #0
 800d18c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d18e:	1c51      	adds	r1, r2, #1
 800d190:	9117      	str	r1, [sp, #92]	; 0x5c
 800d192:	7852      	ldrb	r2, [r2, #1]
 800d194:	4618      	mov	r0, r3
 800d196:	e7c9      	b.n	800d12c <_strtod_l+0x1e4>
 800d198:	4638      	mov	r0, r7
 800d19a:	e7d2      	b.n	800d142 <_strtod_l+0x1fa>
 800d19c:	2b08      	cmp	r3, #8
 800d19e:	dc04      	bgt.n	800d1aa <_strtod_l+0x262>
 800d1a0:	9e07      	ldr	r6, [sp, #28]
 800d1a2:	434e      	muls	r6, r1
 800d1a4:	9607      	str	r6, [sp, #28]
 800d1a6:	3301      	adds	r3, #1
 800d1a8:	e7e2      	b.n	800d170 <_strtod_l+0x228>
 800d1aa:	f103 0c01 	add.w	ip, r3, #1
 800d1ae:	f1bc 0f10 	cmp.w	ip, #16
 800d1b2:	bfd8      	it	le
 800d1b4:	fb01 f909 	mulle.w	r9, r1, r9
 800d1b8:	e7f5      	b.n	800d1a6 <_strtod_l+0x25e>
 800d1ba:	2d10      	cmp	r5, #16
 800d1bc:	bfdc      	itt	le
 800d1be:	230a      	movle	r3, #10
 800d1c0:	fb03 2909 	mlale	r9, r3, r9, r2
 800d1c4:	e7e1      	b.n	800d18a <_strtod_l+0x242>
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9305      	str	r3, [sp, #20]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e77c      	b.n	800d0c8 <_strtod_l+0x180>
 800d1ce:	f04f 0c00 	mov.w	ip, #0
 800d1d2:	f108 0202 	add.w	r2, r8, #2
 800d1d6:	9217      	str	r2, [sp, #92]	; 0x5c
 800d1d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d1dc:	e785      	b.n	800d0ea <_strtod_l+0x1a2>
 800d1de:	f04f 0c01 	mov.w	ip, #1
 800d1e2:	e7f6      	b.n	800d1d2 <_strtod_l+0x28a>
 800d1e4:	08011588 	.word	0x08011588
 800d1e8:	080113a8 	.word	0x080113a8
 800d1ec:	7ff00000 	.word	0x7ff00000
 800d1f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d1f2:	1c51      	adds	r1, r2, #1
 800d1f4:	9117      	str	r1, [sp, #92]	; 0x5c
 800d1f6:	7852      	ldrb	r2, [r2, #1]
 800d1f8:	2a30      	cmp	r2, #48	; 0x30
 800d1fa:	d0f9      	beq.n	800d1f0 <_strtod_l+0x2a8>
 800d1fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d200:	2908      	cmp	r1, #8
 800d202:	f63f af79 	bhi.w	800d0f8 <_strtod_l+0x1b0>
 800d206:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d20a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d20c:	9206      	str	r2, [sp, #24]
 800d20e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d210:	1c51      	adds	r1, r2, #1
 800d212:	9117      	str	r1, [sp, #92]	; 0x5c
 800d214:	7852      	ldrb	r2, [r2, #1]
 800d216:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d21a:	2e09      	cmp	r6, #9
 800d21c:	d937      	bls.n	800d28e <_strtod_l+0x346>
 800d21e:	9e06      	ldr	r6, [sp, #24]
 800d220:	1b89      	subs	r1, r1, r6
 800d222:	2908      	cmp	r1, #8
 800d224:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d228:	dc02      	bgt.n	800d230 <_strtod_l+0x2e8>
 800d22a:	4576      	cmp	r6, lr
 800d22c:	bfa8      	it	ge
 800d22e:	4676      	movge	r6, lr
 800d230:	f1bc 0f00 	cmp.w	ip, #0
 800d234:	d000      	beq.n	800d238 <_strtod_l+0x2f0>
 800d236:	4276      	negs	r6, r6
 800d238:	2d00      	cmp	r5, #0
 800d23a:	d14d      	bne.n	800d2d8 <_strtod_l+0x390>
 800d23c:	9904      	ldr	r1, [sp, #16]
 800d23e:	4301      	orrs	r1, r0
 800d240:	f47f aec6 	bne.w	800cfd0 <_strtod_l+0x88>
 800d244:	2b00      	cmp	r3, #0
 800d246:	f47f aee1 	bne.w	800d00c <_strtod_l+0xc4>
 800d24a:	2a69      	cmp	r2, #105	; 0x69
 800d24c:	d027      	beq.n	800d29e <_strtod_l+0x356>
 800d24e:	dc24      	bgt.n	800d29a <_strtod_l+0x352>
 800d250:	2a49      	cmp	r2, #73	; 0x49
 800d252:	d024      	beq.n	800d29e <_strtod_l+0x356>
 800d254:	2a4e      	cmp	r2, #78	; 0x4e
 800d256:	f47f aed9 	bne.w	800d00c <_strtod_l+0xc4>
 800d25a:	499f      	ldr	r1, [pc, #636]	; (800d4d8 <_strtod_l+0x590>)
 800d25c:	a817      	add	r0, sp, #92	; 0x5c
 800d25e:	f001 fe4b 	bl	800eef8 <__match>
 800d262:	2800      	cmp	r0, #0
 800d264:	f43f aed2 	beq.w	800d00c <_strtod_l+0xc4>
 800d268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	2b28      	cmp	r3, #40	; 0x28
 800d26e:	d12d      	bne.n	800d2cc <_strtod_l+0x384>
 800d270:	499a      	ldr	r1, [pc, #616]	; (800d4dc <_strtod_l+0x594>)
 800d272:	aa1a      	add	r2, sp, #104	; 0x68
 800d274:	a817      	add	r0, sp, #92	; 0x5c
 800d276:	f001 fe53 	bl	800ef20 <__hexnan>
 800d27a:	2805      	cmp	r0, #5
 800d27c:	d126      	bne.n	800d2cc <_strtod_l+0x384>
 800d27e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d280:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d284:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d288:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d28c:	e6a0      	b.n	800cfd0 <_strtod_l+0x88>
 800d28e:	210a      	movs	r1, #10
 800d290:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d294:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d298:	e7b9      	b.n	800d20e <_strtod_l+0x2c6>
 800d29a:	2a6e      	cmp	r2, #110	; 0x6e
 800d29c:	e7db      	b.n	800d256 <_strtod_l+0x30e>
 800d29e:	4990      	ldr	r1, [pc, #576]	; (800d4e0 <_strtod_l+0x598>)
 800d2a0:	a817      	add	r0, sp, #92	; 0x5c
 800d2a2:	f001 fe29 	bl	800eef8 <__match>
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	f43f aeb0 	beq.w	800d00c <_strtod_l+0xc4>
 800d2ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2ae:	498d      	ldr	r1, [pc, #564]	; (800d4e4 <_strtod_l+0x59c>)
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	a817      	add	r0, sp, #92	; 0x5c
 800d2b4:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2b6:	f001 fe1f 	bl	800eef8 <__match>
 800d2ba:	b910      	cbnz	r0, 800d2c2 <_strtod_l+0x37a>
 800d2bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d2be:	3301      	adds	r3, #1
 800d2c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d2c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d4f4 <_strtod_l+0x5ac>
 800d2c6:	f04f 0a00 	mov.w	sl, #0
 800d2ca:	e681      	b.n	800cfd0 <_strtod_l+0x88>
 800d2cc:	4886      	ldr	r0, [pc, #536]	; (800d4e8 <_strtod_l+0x5a0>)
 800d2ce:	f002 ff4f 	bl	8010170 <nan>
 800d2d2:	ec5b ab10 	vmov	sl, fp, d0
 800d2d6:	e67b      	b.n	800cfd0 <_strtod_l+0x88>
 800d2d8:	9b05      	ldr	r3, [sp, #20]
 800d2da:	9807      	ldr	r0, [sp, #28]
 800d2dc:	1af3      	subs	r3, r6, r3
 800d2de:	2f00      	cmp	r7, #0
 800d2e0:	bf08      	it	eq
 800d2e2:	462f      	moveq	r7, r5
 800d2e4:	2d10      	cmp	r5, #16
 800d2e6:	9306      	str	r3, [sp, #24]
 800d2e8:	46a8      	mov	r8, r5
 800d2ea:	bfa8      	it	ge
 800d2ec:	f04f 0810 	movge.w	r8, #16
 800d2f0:	f7f3 f908 	bl	8000504 <__aeabi_ui2d>
 800d2f4:	2d09      	cmp	r5, #9
 800d2f6:	4682      	mov	sl, r0
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	dd13      	ble.n	800d324 <_strtod_l+0x3dc>
 800d2fc:	4b7b      	ldr	r3, [pc, #492]	; (800d4ec <_strtod_l+0x5a4>)
 800d2fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d302:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d306:	f7f3 f977 	bl	80005f8 <__aeabi_dmul>
 800d30a:	4682      	mov	sl, r0
 800d30c:	4648      	mov	r0, r9
 800d30e:	468b      	mov	fp, r1
 800d310:	f7f3 f8f8 	bl	8000504 <__aeabi_ui2d>
 800d314:	4602      	mov	r2, r0
 800d316:	460b      	mov	r3, r1
 800d318:	4650      	mov	r0, sl
 800d31a:	4659      	mov	r1, fp
 800d31c:	f7f2 ffb6 	bl	800028c <__adddf3>
 800d320:	4682      	mov	sl, r0
 800d322:	468b      	mov	fp, r1
 800d324:	2d0f      	cmp	r5, #15
 800d326:	dc38      	bgt.n	800d39a <_strtod_l+0x452>
 800d328:	9b06      	ldr	r3, [sp, #24]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	f43f ae50 	beq.w	800cfd0 <_strtod_l+0x88>
 800d330:	dd24      	ble.n	800d37c <_strtod_l+0x434>
 800d332:	2b16      	cmp	r3, #22
 800d334:	dc0b      	bgt.n	800d34e <_strtod_l+0x406>
 800d336:	496d      	ldr	r1, [pc, #436]	; (800d4ec <_strtod_l+0x5a4>)
 800d338:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d33c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d340:	4652      	mov	r2, sl
 800d342:	465b      	mov	r3, fp
 800d344:	f7f3 f958 	bl	80005f8 <__aeabi_dmul>
 800d348:	4682      	mov	sl, r0
 800d34a:	468b      	mov	fp, r1
 800d34c:	e640      	b.n	800cfd0 <_strtod_l+0x88>
 800d34e:	9a06      	ldr	r2, [sp, #24]
 800d350:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d354:	4293      	cmp	r3, r2
 800d356:	db20      	blt.n	800d39a <_strtod_l+0x452>
 800d358:	4c64      	ldr	r4, [pc, #400]	; (800d4ec <_strtod_l+0x5a4>)
 800d35a:	f1c5 050f 	rsb	r5, r5, #15
 800d35e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d362:	4652      	mov	r2, sl
 800d364:	465b      	mov	r3, fp
 800d366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d36a:	f7f3 f945 	bl	80005f8 <__aeabi_dmul>
 800d36e:	9b06      	ldr	r3, [sp, #24]
 800d370:	1b5d      	subs	r5, r3, r5
 800d372:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d376:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d37a:	e7e3      	b.n	800d344 <_strtod_l+0x3fc>
 800d37c:	9b06      	ldr	r3, [sp, #24]
 800d37e:	3316      	adds	r3, #22
 800d380:	db0b      	blt.n	800d39a <_strtod_l+0x452>
 800d382:	9b05      	ldr	r3, [sp, #20]
 800d384:	1b9e      	subs	r6, r3, r6
 800d386:	4b59      	ldr	r3, [pc, #356]	; (800d4ec <_strtod_l+0x5a4>)
 800d388:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d38c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d390:	4650      	mov	r0, sl
 800d392:	4659      	mov	r1, fp
 800d394:	f7f3 fa5a 	bl	800084c <__aeabi_ddiv>
 800d398:	e7d6      	b.n	800d348 <_strtod_l+0x400>
 800d39a:	9b06      	ldr	r3, [sp, #24]
 800d39c:	eba5 0808 	sub.w	r8, r5, r8
 800d3a0:	4498      	add	r8, r3
 800d3a2:	f1b8 0f00 	cmp.w	r8, #0
 800d3a6:	dd74      	ble.n	800d492 <_strtod_l+0x54a>
 800d3a8:	f018 030f 	ands.w	r3, r8, #15
 800d3ac:	d00a      	beq.n	800d3c4 <_strtod_l+0x47c>
 800d3ae:	494f      	ldr	r1, [pc, #316]	; (800d4ec <_strtod_l+0x5a4>)
 800d3b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3b4:	4652      	mov	r2, sl
 800d3b6:	465b      	mov	r3, fp
 800d3b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3bc:	f7f3 f91c 	bl	80005f8 <__aeabi_dmul>
 800d3c0:	4682      	mov	sl, r0
 800d3c2:	468b      	mov	fp, r1
 800d3c4:	f038 080f 	bics.w	r8, r8, #15
 800d3c8:	d04f      	beq.n	800d46a <_strtod_l+0x522>
 800d3ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d3ce:	dd22      	ble.n	800d416 <_strtod_l+0x4ce>
 800d3d0:	2500      	movs	r5, #0
 800d3d2:	462e      	mov	r6, r5
 800d3d4:	9507      	str	r5, [sp, #28]
 800d3d6:	9505      	str	r5, [sp, #20]
 800d3d8:	2322      	movs	r3, #34	; 0x22
 800d3da:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d4f4 <_strtod_l+0x5ac>
 800d3de:	6023      	str	r3, [r4, #0]
 800d3e0:	f04f 0a00 	mov.w	sl, #0
 800d3e4:	9b07      	ldr	r3, [sp, #28]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	f43f adf2 	beq.w	800cfd0 <_strtod_l+0x88>
 800d3ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f001 fe90 	bl	800f114 <_Bfree>
 800d3f4:	9905      	ldr	r1, [sp, #20]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f001 fe8c 	bl	800f114 <_Bfree>
 800d3fc:	4631      	mov	r1, r6
 800d3fe:	4620      	mov	r0, r4
 800d400:	f001 fe88 	bl	800f114 <_Bfree>
 800d404:	9907      	ldr	r1, [sp, #28]
 800d406:	4620      	mov	r0, r4
 800d408:	f001 fe84 	bl	800f114 <_Bfree>
 800d40c:	4629      	mov	r1, r5
 800d40e:	4620      	mov	r0, r4
 800d410:	f001 fe80 	bl	800f114 <_Bfree>
 800d414:	e5dc      	b.n	800cfd0 <_strtod_l+0x88>
 800d416:	4b36      	ldr	r3, [pc, #216]	; (800d4f0 <_strtod_l+0x5a8>)
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	2300      	movs	r3, #0
 800d41c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d420:	4650      	mov	r0, sl
 800d422:	4659      	mov	r1, fp
 800d424:	4699      	mov	r9, r3
 800d426:	f1b8 0f01 	cmp.w	r8, #1
 800d42a:	dc21      	bgt.n	800d470 <_strtod_l+0x528>
 800d42c:	b10b      	cbz	r3, 800d432 <_strtod_l+0x4ea>
 800d42e:	4682      	mov	sl, r0
 800d430:	468b      	mov	fp, r1
 800d432:	4b2f      	ldr	r3, [pc, #188]	; (800d4f0 <_strtod_l+0x5a8>)
 800d434:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d438:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d43c:	4652      	mov	r2, sl
 800d43e:	465b      	mov	r3, fp
 800d440:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d444:	f7f3 f8d8 	bl	80005f8 <__aeabi_dmul>
 800d448:	4b2a      	ldr	r3, [pc, #168]	; (800d4f4 <_strtod_l+0x5ac>)
 800d44a:	460a      	mov	r2, r1
 800d44c:	400b      	ands	r3, r1
 800d44e:	492a      	ldr	r1, [pc, #168]	; (800d4f8 <_strtod_l+0x5b0>)
 800d450:	428b      	cmp	r3, r1
 800d452:	4682      	mov	sl, r0
 800d454:	d8bc      	bhi.n	800d3d0 <_strtod_l+0x488>
 800d456:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d45a:	428b      	cmp	r3, r1
 800d45c:	bf86      	itte	hi
 800d45e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d4fc <_strtod_l+0x5b4>
 800d462:	f04f 3aff 	movhi.w	sl, #4294967295
 800d466:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d46a:	2300      	movs	r3, #0
 800d46c:	9304      	str	r3, [sp, #16]
 800d46e:	e084      	b.n	800d57a <_strtod_l+0x632>
 800d470:	f018 0f01 	tst.w	r8, #1
 800d474:	d005      	beq.n	800d482 <_strtod_l+0x53a>
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	f7f3 f8bc 	bl	80005f8 <__aeabi_dmul>
 800d480:	2301      	movs	r3, #1
 800d482:	9a04      	ldr	r2, [sp, #16]
 800d484:	3208      	adds	r2, #8
 800d486:	f109 0901 	add.w	r9, r9, #1
 800d48a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d48e:	9204      	str	r2, [sp, #16]
 800d490:	e7c9      	b.n	800d426 <_strtod_l+0x4de>
 800d492:	d0ea      	beq.n	800d46a <_strtod_l+0x522>
 800d494:	f1c8 0800 	rsb	r8, r8, #0
 800d498:	f018 020f 	ands.w	r2, r8, #15
 800d49c:	d00a      	beq.n	800d4b4 <_strtod_l+0x56c>
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <_strtod_l+0x5a4>)
 800d4a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4a4:	4650      	mov	r0, sl
 800d4a6:	4659      	mov	r1, fp
 800d4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ac:	f7f3 f9ce 	bl	800084c <__aeabi_ddiv>
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	468b      	mov	fp, r1
 800d4b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d4b8:	d0d7      	beq.n	800d46a <_strtod_l+0x522>
 800d4ba:	f1b8 0f1f 	cmp.w	r8, #31
 800d4be:	dd1f      	ble.n	800d500 <_strtod_l+0x5b8>
 800d4c0:	2500      	movs	r5, #0
 800d4c2:	462e      	mov	r6, r5
 800d4c4:	9507      	str	r5, [sp, #28]
 800d4c6:	9505      	str	r5, [sp, #20]
 800d4c8:	2322      	movs	r3, #34	; 0x22
 800d4ca:	f04f 0a00 	mov.w	sl, #0
 800d4ce:	f04f 0b00 	mov.w	fp, #0
 800d4d2:	6023      	str	r3, [r4, #0]
 800d4d4:	e786      	b.n	800d3e4 <_strtod_l+0x49c>
 800d4d6:	bf00      	nop
 800d4d8:	08011381 	.word	0x08011381
 800d4dc:	080113bc 	.word	0x080113bc
 800d4e0:	08011379 	.word	0x08011379
 800d4e4:	080114ab 	.word	0x080114ab
 800d4e8:	080114a7 	.word	0x080114a7
 800d4ec:	08011620 	.word	0x08011620
 800d4f0:	080115f8 	.word	0x080115f8
 800d4f4:	7ff00000 	.word	0x7ff00000
 800d4f8:	7ca00000 	.word	0x7ca00000
 800d4fc:	7fefffff 	.word	0x7fefffff
 800d500:	f018 0310 	ands.w	r3, r8, #16
 800d504:	bf18      	it	ne
 800d506:	236a      	movne	r3, #106	; 0x6a
 800d508:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d8b8 <_strtod_l+0x970>
 800d50c:	9304      	str	r3, [sp, #16]
 800d50e:	4650      	mov	r0, sl
 800d510:	4659      	mov	r1, fp
 800d512:	2300      	movs	r3, #0
 800d514:	f018 0f01 	tst.w	r8, #1
 800d518:	d004      	beq.n	800d524 <_strtod_l+0x5dc>
 800d51a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d51e:	f7f3 f86b 	bl	80005f8 <__aeabi_dmul>
 800d522:	2301      	movs	r3, #1
 800d524:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d528:	f109 0908 	add.w	r9, r9, #8
 800d52c:	d1f2      	bne.n	800d514 <_strtod_l+0x5cc>
 800d52e:	b10b      	cbz	r3, 800d534 <_strtod_l+0x5ec>
 800d530:	4682      	mov	sl, r0
 800d532:	468b      	mov	fp, r1
 800d534:	9b04      	ldr	r3, [sp, #16]
 800d536:	b1c3      	cbz	r3, 800d56a <_strtod_l+0x622>
 800d538:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d53c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d540:	2b00      	cmp	r3, #0
 800d542:	4659      	mov	r1, fp
 800d544:	dd11      	ble.n	800d56a <_strtod_l+0x622>
 800d546:	2b1f      	cmp	r3, #31
 800d548:	f340 8124 	ble.w	800d794 <_strtod_l+0x84c>
 800d54c:	2b34      	cmp	r3, #52	; 0x34
 800d54e:	bfde      	ittt	le
 800d550:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d554:	f04f 33ff 	movle.w	r3, #4294967295
 800d558:	fa03 f202 	lslle.w	r2, r3, r2
 800d55c:	f04f 0a00 	mov.w	sl, #0
 800d560:	bfcc      	ite	gt
 800d562:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d566:	ea02 0b01 	andle.w	fp, r2, r1
 800d56a:	2200      	movs	r2, #0
 800d56c:	2300      	movs	r3, #0
 800d56e:	4650      	mov	r0, sl
 800d570:	4659      	mov	r1, fp
 800d572:	f7f3 faa9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d576:	2800      	cmp	r0, #0
 800d578:	d1a2      	bne.n	800d4c0 <_strtod_l+0x578>
 800d57a:	9b07      	ldr	r3, [sp, #28]
 800d57c:	9300      	str	r3, [sp, #0]
 800d57e:	9908      	ldr	r1, [sp, #32]
 800d580:	462b      	mov	r3, r5
 800d582:	463a      	mov	r2, r7
 800d584:	4620      	mov	r0, r4
 800d586:	f001 fe2d 	bl	800f1e4 <__s2b>
 800d58a:	9007      	str	r0, [sp, #28]
 800d58c:	2800      	cmp	r0, #0
 800d58e:	f43f af1f 	beq.w	800d3d0 <_strtod_l+0x488>
 800d592:	9b05      	ldr	r3, [sp, #20]
 800d594:	1b9e      	subs	r6, r3, r6
 800d596:	9b06      	ldr	r3, [sp, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bfb4      	ite	lt
 800d59c:	4633      	movlt	r3, r6
 800d59e:	2300      	movge	r3, #0
 800d5a0:	930c      	str	r3, [sp, #48]	; 0x30
 800d5a2:	9b06      	ldr	r3, [sp, #24]
 800d5a4:	2500      	movs	r5, #0
 800d5a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d5aa:	9312      	str	r3, [sp, #72]	; 0x48
 800d5ac:	462e      	mov	r6, r5
 800d5ae:	9b07      	ldr	r3, [sp, #28]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	6859      	ldr	r1, [r3, #4]
 800d5b4:	f001 fd6e 	bl	800f094 <_Balloc>
 800d5b8:	9005      	str	r0, [sp, #20]
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f43f af0c 	beq.w	800d3d8 <_strtod_l+0x490>
 800d5c0:	9b07      	ldr	r3, [sp, #28]
 800d5c2:	691a      	ldr	r2, [r3, #16]
 800d5c4:	3202      	adds	r2, #2
 800d5c6:	f103 010c 	add.w	r1, r3, #12
 800d5ca:	0092      	lsls	r2, r2, #2
 800d5cc:	300c      	adds	r0, #12
 800d5ce:	f7fe ffef 	bl	800c5b0 <memcpy>
 800d5d2:	ec4b ab10 	vmov	d0, sl, fp
 800d5d6:	aa1a      	add	r2, sp, #104	; 0x68
 800d5d8:	a919      	add	r1, sp, #100	; 0x64
 800d5da:	4620      	mov	r0, r4
 800d5dc:	f002 f948 	bl	800f870 <__d2b>
 800d5e0:	ec4b ab18 	vmov	d8, sl, fp
 800d5e4:	9018      	str	r0, [sp, #96]	; 0x60
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	f43f aef6 	beq.w	800d3d8 <_strtod_l+0x490>
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	4620      	mov	r0, r4
 800d5f0:	f001 fe92 	bl	800f318 <__i2b>
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f43f aeee 	beq.w	800d3d8 <_strtod_l+0x490>
 800d5fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5fe:	9904      	ldr	r1, [sp, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	bfab      	itete	ge
 800d604:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d606:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d608:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d60a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d60e:	bfac      	ite	ge
 800d610:	eb03 0902 	addge.w	r9, r3, r2
 800d614:	1ad7      	sublt	r7, r2, r3
 800d616:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d618:	eba3 0801 	sub.w	r8, r3, r1
 800d61c:	4490      	add	r8, r2
 800d61e:	4ba1      	ldr	r3, [pc, #644]	; (800d8a4 <_strtod_l+0x95c>)
 800d620:	f108 38ff 	add.w	r8, r8, #4294967295
 800d624:	4598      	cmp	r8, r3
 800d626:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d62a:	f280 80c7 	bge.w	800d7bc <_strtod_l+0x874>
 800d62e:	eba3 0308 	sub.w	r3, r3, r8
 800d632:	2b1f      	cmp	r3, #31
 800d634:	eba2 0203 	sub.w	r2, r2, r3
 800d638:	f04f 0101 	mov.w	r1, #1
 800d63c:	f300 80b1 	bgt.w	800d7a2 <_strtod_l+0x85a>
 800d640:	fa01 f303 	lsl.w	r3, r1, r3
 800d644:	930d      	str	r3, [sp, #52]	; 0x34
 800d646:	2300      	movs	r3, #0
 800d648:	9308      	str	r3, [sp, #32]
 800d64a:	eb09 0802 	add.w	r8, r9, r2
 800d64e:	9b04      	ldr	r3, [sp, #16]
 800d650:	45c1      	cmp	r9, r8
 800d652:	4417      	add	r7, r2
 800d654:	441f      	add	r7, r3
 800d656:	464b      	mov	r3, r9
 800d658:	bfa8      	it	ge
 800d65a:	4643      	movge	r3, r8
 800d65c:	42bb      	cmp	r3, r7
 800d65e:	bfa8      	it	ge
 800d660:	463b      	movge	r3, r7
 800d662:	2b00      	cmp	r3, #0
 800d664:	bfc2      	ittt	gt
 800d666:	eba8 0803 	subgt.w	r8, r8, r3
 800d66a:	1aff      	subgt	r7, r7, r3
 800d66c:	eba9 0903 	subgt.w	r9, r9, r3
 800d670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d672:	2b00      	cmp	r3, #0
 800d674:	dd17      	ble.n	800d6a6 <_strtod_l+0x75e>
 800d676:	4631      	mov	r1, r6
 800d678:	461a      	mov	r2, r3
 800d67a:	4620      	mov	r0, r4
 800d67c:	f001 ff0c 	bl	800f498 <__pow5mult>
 800d680:	4606      	mov	r6, r0
 800d682:	2800      	cmp	r0, #0
 800d684:	f43f aea8 	beq.w	800d3d8 <_strtod_l+0x490>
 800d688:	4601      	mov	r1, r0
 800d68a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d68c:	4620      	mov	r0, r4
 800d68e:	f001 fe59 	bl	800f344 <__multiply>
 800d692:	900b      	str	r0, [sp, #44]	; 0x2c
 800d694:	2800      	cmp	r0, #0
 800d696:	f43f ae9f 	beq.w	800d3d8 <_strtod_l+0x490>
 800d69a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d69c:	4620      	mov	r0, r4
 800d69e:	f001 fd39 	bl	800f114 <_Bfree>
 800d6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6a4:	9318      	str	r3, [sp, #96]	; 0x60
 800d6a6:	f1b8 0f00 	cmp.w	r8, #0
 800d6aa:	f300 808c 	bgt.w	800d7c6 <_strtod_l+0x87e>
 800d6ae:	9b06      	ldr	r3, [sp, #24]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dd08      	ble.n	800d6c6 <_strtod_l+0x77e>
 800d6b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6b6:	9905      	ldr	r1, [sp, #20]
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f001 feed 	bl	800f498 <__pow5mult>
 800d6be:	9005      	str	r0, [sp, #20]
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	f43f ae89 	beq.w	800d3d8 <_strtod_l+0x490>
 800d6c6:	2f00      	cmp	r7, #0
 800d6c8:	dd08      	ble.n	800d6dc <_strtod_l+0x794>
 800d6ca:	9905      	ldr	r1, [sp, #20]
 800d6cc:	463a      	mov	r2, r7
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f001 ff3c 	bl	800f54c <__lshift>
 800d6d4:	9005      	str	r0, [sp, #20]
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	f43f ae7e 	beq.w	800d3d8 <_strtod_l+0x490>
 800d6dc:	f1b9 0f00 	cmp.w	r9, #0
 800d6e0:	dd08      	ble.n	800d6f4 <_strtod_l+0x7ac>
 800d6e2:	4631      	mov	r1, r6
 800d6e4:	464a      	mov	r2, r9
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f001 ff30 	bl	800f54c <__lshift>
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	f43f ae72 	beq.w	800d3d8 <_strtod_l+0x490>
 800d6f4:	9a05      	ldr	r2, [sp, #20]
 800d6f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f001 ffb3 	bl	800f664 <__mdiff>
 800d6fe:	4605      	mov	r5, r0
 800d700:	2800      	cmp	r0, #0
 800d702:	f43f ae69 	beq.w	800d3d8 <_strtod_l+0x490>
 800d706:	68c3      	ldr	r3, [r0, #12]
 800d708:	930b      	str	r3, [sp, #44]	; 0x2c
 800d70a:	2300      	movs	r3, #0
 800d70c:	60c3      	str	r3, [r0, #12]
 800d70e:	4631      	mov	r1, r6
 800d710:	f001 ff8c 	bl	800f62c <__mcmp>
 800d714:	2800      	cmp	r0, #0
 800d716:	da60      	bge.n	800d7da <_strtod_l+0x892>
 800d718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d71a:	ea53 030a 	orrs.w	r3, r3, sl
 800d71e:	f040 8082 	bne.w	800d826 <_strtod_l+0x8de>
 800d722:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d726:	2b00      	cmp	r3, #0
 800d728:	d17d      	bne.n	800d826 <_strtod_l+0x8de>
 800d72a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d72e:	0d1b      	lsrs	r3, r3, #20
 800d730:	051b      	lsls	r3, r3, #20
 800d732:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d736:	d976      	bls.n	800d826 <_strtod_l+0x8de>
 800d738:	696b      	ldr	r3, [r5, #20]
 800d73a:	b913      	cbnz	r3, 800d742 <_strtod_l+0x7fa>
 800d73c:	692b      	ldr	r3, [r5, #16]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	dd71      	ble.n	800d826 <_strtod_l+0x8de>
 800d742:	4629      	mov	r1, r5
 800d744:	2201      	movs	r2, #1
 800d746:	4620      	mov	r0, r4
 800d748:	f001 ff00 	bl	800f54c <__lshift>
 800d74c:	4631      	mov	r1, r6
 800d74e:	4605      	mov	r5, r0
 800d750:	f001 ff6c 	bl	800f62c <__mcmp>
 800d754:	2800      	cmp	r0, #0
 800d756:	dd66      	ble.n	800d826 <_strtod_l+0x8de>
 800d758:	9904      	ldr	r1, [sp, #16]
 800d75a:	4a53      	ldr	r2, [pc, #332]	; (800d8a8 <_strtod_l+0x960>)
 800d75c:	465b      	mov	r3, fp
 800d75e:	2900      	cmp	r1, #0
 800d760:	f000 8081 	beq.w	800d866 <_strtod_l+0x91e>
 800d764:	ea02 010b 	and.w	r1, r2, fp
 800d768:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d76c:	dc7b      	bgt.n	800d866 <_strtod_l+0x91e>
 800d76e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d772:	f77f aea9 	ble.w	800d4c8 <_strtod_l+0x580>
 800d776:	4b4d      	ldr	r3, [pc, #308]	; (800d8ac <_strtod_l+0x964>)
 800d778:	4650      	mov	r0, sl
 800d77a:	4659      	mov	r1, fp
 800d77c:	2200      	movs	r2, #0
 800d77e:	f7f2 ff3b 	bl	80005f8 <__aeabi_dmul>
 800d782:	460b      	mov	r3, r1
 800d784:	4303      	orrs	r3, r0
 800d786:	bf08      	it	eq
 800d788:	2322      	moveq	r3, #34	; 0x22
 800d78a:	4682      	mov	sl, r0
 800d78c:	468b      	mov	fp, r1
 800d78e:	bf08      	it	eq
 800d790:	6023      	streq	r3, [r4, #0]
 800d792:	e62b      	b.n	800d3ec <_strtod_l+0x4a4>
 800d794:	f04f 32ff 	mov.w	r2, #4294967295
 800d798:	fa02 f303 	lsl.w	r3, r2, r3
 800d79c:	ea03 0a0a 	and.w	sl, r3, sl
 800d7a0:	e6e3      	b.n	800d56a <_strtod_l+0x622>
 800d7a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d7a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d7aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d7ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d7b2:	fa01 f308 	lsl.w	r3, r1, r8
 800d7b6:	9308      	str	r3, [sp, #32]
 800d7b8:	910d      	str	r1, [sp, #52]	; 0x34
 800d7ba:	e746      	b.n	800d64a <_strtod_l+0x702>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9308      	str	r3, [sp, #32]
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	930d      	str	r3, [sp, #52]	; 0x34
 800d7c4:	e741      	b.n	800d64a <_strtod_l+0x702>
 800d7c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	f001 febe 	bl	800f54c <__lshift>
 800d7d0:	9018      	str	r0, [sp, #96]	; 0x60
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	f47f af6b 	bne.w	800d6ae <_strtod_l+0x766>
 800d7d8:	e5fe      	b.n	800d3d8 <_strtod_l+0x490>
 800d7da:	465f      	mov	r7, fp
 800d7dc:	d16e      	bne.n	800d8bc <_strtod_l+0x974>
 800d7de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d7e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7e4:	b342      	cbz	r2, 800d838 <_strtod_l+0x8f0>
 800d7e6:	4a32      	ldr	r2, [pc, #200]	; (800d8b0 <_strtod_l+0x968>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	d128      	bne.n	800d83e <_strtod_l+0x8f6>
 800d7ec:	9b04      	ldr	r3, [sp, #16]
 800d7ee:	4651      	mov	r1, sl
 800d7f0:	b1eb      	cbz	r3, 800d82e <_strtod_l+0x8e6>
 800d7f2:	4b2d      	ldr	r3, [pc, #180]	; (800d8a8 <_strtod_l+0x960>)
 800d7f4:	403b      	ands	r3, r7
 800d7f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d7fe:	d819      	bhi.n	800d834 <_strtod_l+0x8ec>
 800d800:	0d1b      	lsrs	r3, r3, #20
 800d802:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d806:	fa02 f303 	lsl.w	r3, r2, r3
 800d80a:	4299      	cmp	r1, r3
 800d80c:	d117      	bne.n	800d83e <_strtod_l+0x8f6>
 800d80e:	4b29      	ldr	r3, [pc, #164]	; (800d8b4 <_strtod_l+0x96c>)
 800d810:	429f      	cmp	r7, r3
 800d812:	d102      	bne.n	800d81a <_strtod_l+0x8d2>
 800d814:	3101      	adds	r1, #1
 800d816:	f43f addf 	beq.w	800d3d8 <_strtod_l+0x490>
 800d81a:	4b23      	ldr	r3, [pc, #140]	; (800d8a8 <_strtod_l+0x960>)
 800d81c:	403b      	ands	r3, r7
 800d81e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d822:	f04f 0a00 	mov.w	sl, #0
 800d826:	9b04      	ldr	r3, [sp, #16]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1a4      	bne.n	800d776 <_strtod_l+0x82e>
 800d82c:	e5de      	b.n	800d3ec <_strtod_l+0x4a4>
 800d82e:	f04f 33ff 	mov.w	r3, #4294967295
 800d832:	e7ea      	b.n	800d80a <_strtod_l+0x8c2>
 800d834:	4613      	mov	r3, r2
 800d836:	e7e8      	b.n	800d80a <_strtod_l+0x8c2>
 800d838:	ea53 030a 	orrs.w	r3, r3, sl
 800d83c:	d08c      	beq.n	800d758 <_strtod_l+0x810>
 800d83e:	9b08      	ldr	r3, [sp, #32]
 800d840:	b1db      	cbz	r3, 800d87a <_strtod_l+0x932>
 800d842:	423b      	tst	r3, r7
 800d844:	d0ef      	beq.n	800d826 <_strtod_l+0x8de>
 800d846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d848:	9a04      	ldr	r2, [sp, #16]
 800d84a:	4650      	mov	r0, sl
 800d84c:	4659      	mov	r1, fp
 800d84e:	b1c3      	cbz	r3, 800d882 <_strtod_l+0x93a>
 800d850:	f7ff fb5d 	bl	800cf0e <sulp>
 800d854:	4602      	mov	r2, r0
 800d856:	460b      	mov	r3, r1
 800d858:	ec51 0b18 	vmov	r0, r1, d8
 800d85c:	f7f2 fd16 	bl	800028c <__adddf3>
 800d860:	4682      	mov	sl, r0
 800d862:	468b      	mov	fp, r1
 800d864:	e7df      	b.n	800d826 <_strtod_l+0x8de>
 800d866:	4013      	ands	r3, r2
 800d868:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d86c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d870:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d874:	f04f 3aff 	mov.w	sl, #4294967295
 800d878:	e7d5      	b.n	800d826 <_strtod_l+0x8de>
 800d87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d87c:	ea13 0f0a 	tst.w	r3, sl
 800d880:	e7e0      	b.n	800d844 <_strtod_l+0x8fc>
 800d882:	f7ff fb44 	bl	800cf0e <sulp>
 800d886:	4602      	mov	r2, r0
 800d888:	460b      	mov	r3, r1
 800d88a:	ec51 0b18 	vmov	r0, r1, d8
 800d88e:	f7f2 fcfb 	bl	8000288 <__aeabi_dsub>
 800d892:	2200      	movs	r2, #0
 800d894:	2300      	movs	r3, #0
 800d896:	4682      	mov	sl, r0
 800d898:	468b      	mov	fp, r1
 800d89a:	f7f3 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	d0c1      	beq.n	800d826 <_strtod_l+0x8de>
 800d8a2:	e611      	b.n	800d4c8 <_strtod_l+0x580>
 800d8a4:	fffffc02 	.word	0xfffffc02
 800d8a8:	7ff00000 	.word	0x7ff00000
 800d8ac:	39500000 	.word	0x39500000
 800d8b0:	000fffff 	.word	0x000fffff
 800d8b4:	7fefffff 	.word	0x7fefffff
 800d8b8:	080113d0 	.word	0x080113d0
 800d8bc:	4631      	mov	r1, r6
 800d8be:	4628      	mov	r0, r5
 800d8c0:	f002 f832 	bl	800f928 <__ratio>
 800d8c4:	ec59 8b10 	vmov	r8, r9, d0
 800d8c8:	ee10 0a10 	vmov	r0, s0
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d8d2:	4649      	mov	r1, r9
 800d8d4:	f7f3 f90c 	bl	8000af0 <__aeabi_dcmple>
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	d07a      	beq.n	800d9d2 <_strtod_l+0xa8a>
 800d8dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d04a      	beq.n	800d978 <_strtod_l+0xa30>
 800d8e2:	4b95      	ldr	r3, [pc, #596]	; (800db38 <_strtod_l+0xbf0>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d8ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800db38 <_strtod_l+0xbf0>
 800d8ee:	f04f 0800 	mov.w	r8, #0
 800d8f2:	4b92      	ldr	r3, [pc, #584]	; (800db3c <_strtod_l+0xbf4>)
 800d8f4:	403b      	ands	r3, r7
 800d8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800d8f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8fa:	4b91      	ldr	r3, [pc, #580]	; (800db40 <_strtod_l+0xbf8>)
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	f040 80b0 	bne.w	800da62 <_strtod_l+0xb1a>
 800d902:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d906:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d90a:	ec4b ab10 	vmov	d0, sl, fp
 800d90e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d912:	f001 ff31 	bl	800f778 <__ulp>
 800d916:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d91a:	ec53 2b10 	vmov	r2, r3, d0
 800d91e:	f7f2 fe6b 	bl	80005f8 <__aeabi_dmul>
 800d922:	4652      	mov	r2, sl
 800d924:	465b      	mov	r3, fp
 800d926:	f7f2 fcb1 	bl	800028c <__adddf3>
 800d92a:	460b      	mov	r3, r1
 800d92c:	4983      	ldr	r1, [pc, #524]	; (800db3c <_strtod_l+0xbf4>)
 800d92e:	4a85      	ldr	r2, [pc, #532]	; (800db44 <_strtod_l+0xbfc>)
 800d930:	4019      	ands	r1, r3
 800d932:	4291      	cmp	r1, r2
 800d934:	4682      	mov	sl, r0
 800d936:	d960      	bls.n	800d9fa <_strtod_l+0xab2>
 800d938:	ee18 3a90 	vmov	r3, s17
 800d93c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d940:	4293      	cmp	r3, r2
 800d942:	d104      	bne.n	800d94e <_strtod_l+0xa06>
 800d944:	ee18 3a10 	vmov	r3, s16
 800d948:	3301      	adds	r3, #1
 800d94a:	f43f ad45 	beq.w	800d3d8 <_strtod_l+0x490>
 800d94e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800db50 <_strtod_l+0xc08>
 800d952:	f04f 3aff 	mov.w	sl, #4294967295
 800d956:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d958:	4620      	mov	r0, r4
 800d95a:	f001 fbdb 	bl	800f114 <_Bfree>
 800d95e:	9905      	ldr	r1, [sp, #20]
 800d960:	4620      	mov	r0, r4
 800d962:	f001 fbd7 	bl	800f114 <_Bfree>
 800d966:	4631      	mov	r1, r6
 800d968:	4620      	mov	r0, r4
 800d96a:	f001 fbd3 	bl	800f114 <_Bfree>
 800d96e:	4629      	mov	r1, r5
 800d970:	4620      	mov	r0, r4
 800d972:	f001 fbcf 	bl	800f114 <_Bfree>
 800d976:	e61a      	b.n	800d5ae <_strtod_l+0x666>
 800d978:	f1ba 0f00 	cmp.w	sl, #0
 800d97c:	d11b      	bne.n	800d9b6 <_strtod_l+0xa6e>
 800d97e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d982:	b9f3      	cbnz	r3, 800d9c2 <_strtod_l+0xa7a>
 800d984:	4b6c      	ldr	r3, [pc, #432]	; (800db38 <_strtod_l+0xbf0>)
 800d986:	2200      	movs	r2, #0
 800d988:	4640      	mov	r0, r8
 800d98a:	4649      	mov	r1, r9
 800d98c:	f7f3 f8a6 	bl	8000adc <__aeabi_dcmplt>
 800d990:	b9d0      	cbnz	r0, 800d9c8 <_strtod_l+0xa80>
 800d992:	4640      	mov	r0, r8
 800d994:	4649      	mov	r1, r9
 800d996:	4b6c      	ldr	r3, [pc, #432]	; (800db48 <_strtod_l+0xc00>)
 800d998:	2200      	movs	r2, #0
 800d99a:	f7f2 fe2d 	bl	80005f8 <__aeabi_dmul>
 800d99e:	4680      	mov	r8, r0
 800d9a0:	4689      	mov	r9, r1
 800d9a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d9a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d9aa:	9315      	str	r3, [sp, #84]	; 0x54
 800d9ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d9b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d9b4:	e79d      	b.n	800d8f2 <_strtod_l+0x9aa>
 800d9b6:	f1ba 0f01 	cmp.w	sl, #1
 800d9ba:	d102      	bne.n	800d9c2 <_strtod_l+0xa7a>
 800d9bc:	2f00      	cmp	r7, #0
 800d9be:	f43f ad83 	beq.w	800d4c8 <_strtod_l+0x580>
 800d9c2:	4b62      	ldr	r3, [pc, #392]	; (800db4c <_strtod_l+0xc04>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	e78e      	b.n	800d8e6 <_strtod_l+0x99e>
 800d9c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800db48 <_strtod_l+0xc00>
 800d9cc:	f04f 0800 	mov.w	r8, #0
 800d9d0:	e7e7      	b.n	800d9a2 <_strtod_l+0xa5a>
 800d9d2:	4b5d      	ldr	r3, [pc, #372]	; (800db48 <_strtod_l+0xc00>)
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f7f2 fe0d 	bl	80005f8 <__aeabi_dmul>
 800d9de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9e0:	4680      	mov	r8, r0
 800d9e2:	4689      	mov	r9, r1
 800d9e4:	b933      	cbnz	r3, 800d9f4 <_strtod_l+0xaac>
 800d9e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9ea:	900e      	str	r0, [sp, #56]	; 0x38
 800d9ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d9f2:	e7dd      	b.n	800d9b0 <_strtod_l+0xa68>
 800d9f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d9f8:	e7f9      	b.n	800d9ee <_strtod_l+0xaa6>
 800d9fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1a8      	bne.n	800d956 <_strtod_l+0xa0e>
 800da04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da0a:	0d1b      	lsrs	r3, r3, #20
 800da0c:	051b      	lsls	r3, r3, #20
 800da0e:	429a      	cmp	r2, r3
 800da10:	d1a1      	bne.n	800d956 <_strtod_l+0xa0e>
 800da12:	4640      	mov	r0, r8
 800da14:	4649      	mov	r1, r9
 800da16:	f7f3 f94f 	bl	8000cb8 <__aeabi_d2lz>
 800da1a:	f7f2 fdbf 	bl	800059c <__aeabi_l2d>
 800da1e:	4602      	mov	r2, r0
 800da20:	460b      	mov	r3, r1
 800da22:	4640      	mov	r0, r8
 800da24:	4649      	mov	r1, r9
 800da26:	f7f2 fc2f 	bl	8000288 <__aeabi_dsub>
 800da2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da30:	ea43 030a 	orr.w	r3, r3, sl
 800da34:	4313      	orrs	r3, r2
 800da36:	4680      	mov	r8, r0
 800da38:	4689      	mov	r9, r1
 800da3a:	d055      	beq.n	800dae8 <_strtod_l+0xba0>
 800da3c:	a336      	add	r3, pc, #216	; (adr r3, 800db18 <_strtod_l+0xbd0>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	f7f3 f84b 	bl	8000adc <__aeabi_dcmplt>
 800da46:	2800      	cmp	r0, #0
 800da48:	f47f acd0 	bne.w	800d3ec <_strtod_l+0x4a4>
 800da4c:	a334      	add	r3, pc, #208	; (adr r3, 800db20 <_strtod_l+0xbd8>)
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	4640      	mov	r0, r8
 800da54:	4649      	mov	r1, r9
 800da56:	f7f3 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f43f af7b 	beq.w	800d956 <_strtod_l+0xa0e>
 800da60:	e4c4      	b.n	800d3ec <_strtod_l+0x4a4>
 800da62:	9b04      	ldr	r3, [sp, #16]
 800da64:	b333      	cbz	r3, 800dab4 <_strtod_l+0xb6c>
 800da66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800da6c:	d822      	bhi.n	800dab4 <_strtod_l+0xb6c>
 800da6e:	a32e      	add	r3, pc, #184	; (adr r3, 800db28 <_strtod_l+0xbe0>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	4640      	mov	r0, r8
 800da76:	4649      	mov	r1, r9
 800da78:	f7f3 f83a 	bl	8000af0 <__aeabi_dcmple>
 800da7c:	b1a0      	cbz	r0, 800daa8 <_strtod_l+0xb60>
 800da7e:	4649      	mov	r1, r9
 800da80:	4640      	mov	r0, r8
 800da82:	f7f3 f891 	bl	8000ba8 <__aeabi_d2uiz>
 800da86:	2801      	cmp	r0, #1
 800da88:	bf38      	it	cc
 800da8a:	2001      	movcc	r0, #1
 800da8c:	f7f2 fd3a 	bl	8000504 <__aeabi_ui2d>
 800da90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da92:	4680      	mov	r8, r0
 800da94:	4689      	mov	r9, r1
 800da96:	bb23      	cbnz	r3, 800dae2 <_strtod_l+0xb9a>
 800da98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da9c:	9010      	str	r0, [sp, #64]	; 0x40
 800da9e:	9311      	str	r3, [sp, #68]	; 0x44
 800daa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800daa4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800daa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daaa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800daac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800dab0:	1a9b      	subs	r3, r3, r2
 800dab2:	9309      	str	r3, [sp, #36]	; 0x24
 800dab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dab8:	eeb0 0a48 	vmov.f32	s0, s16
 800dabc:	eef0 0a68 	vmov.f32	s1, s17
 800dac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dac4:	f001 fe58 	bl	800f778 <__ulp>
 800dac8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dacc:	ec53 2b10 	vmov	r2, r3, d0
 800dad0:	f7f2 fd92 	bl	80005f8 <__aeabi_dmul>
 800dad4:	ec53 2b18 	vmov	r2, r3, d8
 800dad8:	f7f2 fbd8 	bl	800028c <__adddf3>
 800dadc:	4682      	mov	sl, r0
 800dade:	468b      	mov	fp, r1
 800dae0:	e78d      	b.n	800d9fe <_strtod_l+0xab6>
 800dae2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800dae6:	e7db      	b.n	800daa0 <_strtod_l+0xb58>
 800dae8:	a311      	add	r3, pc, #68	; (adr r3, 800db30 <_strtod_l+0xbe8>)
 800daea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daee:	f7f2 fff5 	bl	8000adc <__aeabi_dcmplt>
 800daf2:	e7b2      	b.n	800da5a <_strtod_l+0xb12>
 800daf4:	2300      	movs	r3, #0
 800daf6:	930a      	str	r3, [sp, #40]	; 0x28
 800daf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dafa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	f7ff ba6b 	b.w	800cfd8 <_strtod_l+0x90>
 800db02:	2a65      	cmp	r2, #101	; 0x65
 800db04:	f43f ab5f 	beq.w	800d1c6 <_strtod_l+0x27e>
 800db08:	2a45      	cmp	r2, #69	; 0x45
 800db0a:	f43f ab5c 	beq.w	800d1c6 <_strtod_l+0x27e>
 800db0e:	2301      	movs	r3, #1
 800db10:	f7ff bb94 	b.w	800d23c <_strtod_l+0x2f4>
 800db14:	f3af 8000 	nop.w
 800db18:	94a03595 	.word	0x94a03595
 800db1c:	3fdfffff 	.word	0x3fdfffff
 800db20:	35afe535 	.word	0x35afe535
 800db24:	3fe00000 	.word	0x3fe00000
 800db28:	ffc00000 	.word	0xffc00000
 800db2c:	41dfffff 	.word	0x41dfffff
 800db30:	94a03595 	.word	0x94a03595
 800db34:	3fcfffff 	.word	0x3fcfffff
 800db38:	3ff00000 	.word	0x3ff00000
 800db3c:	7ff00000 	.word	0x7ff00000
 800db40:	7fe00000 	.word	0x7fe00000
 800db44:	7c9fffff 	.word	0x7c9fffff
 800db48:	3fe00000 	.word	0x3fe00000
 800db4c:	bff00000 	.word	0xbff00000
 800db50:	7fefffff 	.word	0x7fefffff

0800db54 <strtod>:
 800db54:	460a      	mov	r2, r1
 800db56:	4601      	mov	r1, r0
 800db58:	4802      	ldr	r0, [pc, #8]	; (800db64 <strtod+0x10>)
 800db5a:	4b03      	ldr	r3, [pc, #12]	; (800db68 <strtod+0x14>)
 800db5c:	6800      	ldr	r0, [r0, #0]
 800db5e:	f7ff b9f3 	b.w	800cf48 <_strtod_l>
 800db62:	bf00      	nop
 800db64:	2000000c 	.word	0x2000000c
 800db68:	20000074 	.word	0x20000074

0800db6c <strtok>:
 800db6c:	4b16      	ldr	r3, [pc, #88]	; (800dbc8 <strtok+0x5c>)
 800db6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db70:	681e      	ldr	r6, [r3, #0]
 800db72:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800db74:	4605      	mov	r5, r0
 800db76:	b9fc      	cbnz	r4, 800dbb8 <strtok+0x4c>
 800db78:	2050      	movs	r0, #80	; 0x50
 800db7a:	9101      	str	r1, [sp, #4]
 800db7c:	f001 fa70 	bl	800f060 <malloc>
 800db80:	9901      	ldr	r1, [sp, #4]
 800db82:	65b0      	str	r0, [r6, #88]	; 0x58
 800db84:	4602      	mov	r2, r0
 800db86:	b920      	cbnz	r0, 800db92 <strtok+0x26>
 800db88:	4b10      	ldr	r3, [pc, #64]	; (800dbcc <strtok+0x60>)
 800db8a:	4811      	ldr	r0, [pc, #68]	; (800dbd0 <strtok+0x64>)
 800db8c:	2157      	movs	r1, #87	; 0x57
 800db8e:	f000 f849 	bl	800dc24 <__assert_func>
 800db92:	e9c0 4400 	strd	r4, r4, [r0]
 800db96:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800db9a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800db9e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800dba2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800dba6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800dbaa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800dbae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800dbb2:	6184      	str	r4, [r0, #24]
 800dbb4:	7704      	strb	r4, [r0, #28]
 800dbb6:	6244      	str	r4, [r0, #36]	; 0x24
 800dbb8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800dbba:	2301      	movs	r3, #1
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	b002      	add	sp, #8
 800dbc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dbc4:	f000 b806 	b.w	800dbd4 <__strtok_r>
 800dbc8:	2000000c 	.word	0x2000000c
 800dbcc:	080113f8 	.word	0x080113f8
 800dbd0:	0801140f 	.word	0x0801140f

0800dbd4 <__strtok_r>:
 800dbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd6:	b908      	cbnz	r0, 800dbdc <__strtok_r+0x8>
 800dbd8:	6810      	ldr	r0, [r2, #0]
 800dbda:	b188      	cbz	r0, 800dc00 <__strtok_r+0x2c>
 800dbdc:	4604      	mov	r4, r0
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800dbe4:	460f      	mov	r7, r1
 800dbe6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800dbea:	b91e      	cbnz	r6, 800dbf4 <__strtok_r+0x20>
 800dbec:	b965      	cbnz	r5, 800dc08 <__strtok_r+0x34>
 800dbee:	6015      	str	r5, [r2, #0]
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	e005      	b.n	800dc00 <__strtok_r+0x2c>
 800dbf4:	42b5      	cmp	r5, r6
 800dbf6:	d1f6      	bne.n	800dbe6 <__strtok_r+0x12>
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1f0      	bne.n	800dbde <__strtok_r+0xa>
 800dbfc:	6014      	str	r4, [r2, #0]
 800dbfe:	7003      	strb	r3, [r0, #0]
 800dc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc02:	461c      	mov	r4, r3
 800dc04:	e00c      	b.n	800dc20 <__strtok_r+0x4c>
 800dc06:	b915      	cbnz	r5, 800dc0e <__strtok_r+0x3a>
 800dc08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dc0c:	460e      	mov	r6, r1
 800dc0e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800dc12:	42ab      	cmp	r3, r5
 800dc14:	d1f7      	bne.n	800dc06 <__strtok_r+0x32>
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d0f3      	beq.n	800dc02 <__strtok_r+0x2e>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800dc20:	6014      	str	r4, [r2, #0]
 800dc22:	e7ed      	b.n	800dc00 <__strtok_r+0x2c>

0800dc24 <__assert_func>:
 800dc24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc26:	4614      	mov	r4, r2
 800dc28:	461a      	mov	r2, r3
 800dc2a:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <__assert_func+0x2c>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	4605      	mov	r5, r0
 800dc30:	68d8      	ldr	r0, [r3, #12]
 800dc32:	b14c      	cbz	r4, 800dc48 <__assert_func+0x24>
 800dc34:	4b07      	ldr	r3, [pc, #28]	; (800dc54 <__assert_func+0x30>)
 800dc36:	9100      	str	r1, [sp, #0]
 800dc38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc3c:	4906      	ldr	r1, [pc, #24]	; (800dc58 <__assert_func+0x34>)
 800dc3e:	462b      	mov	r3, r5
 800dc40:	f000 fe88 	bl	800e954 <fiprintf>
 800dc44:	f002 fb8e 	bl	8010364 <abort>
 800dc48:	4b04      	ldr	r3, [pc, #16]	; (800dc5c <__assert_func+0x38>)
 800dc4a:	461c      	mov	r4, r3
 800dc4c:	e7f3      	b.n	800dc36 <__assert_func+0x12>
 800dc4e:	bf00      	nop
 800dc50:	2000000c 	.word	0x2000000c
 800dc54:	0801146c 	.word	0x0801146c
 800dc58:	08011479 	.word	0x08011479
 800dc5c:	080114a7 	.word	0x080114a7

0800dc60 <quorem>:
 800dc60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc64:	6903      	ldr	r3, [r0, #16]
 800dc66:	690c      	ldr	r4, [r1, #16]
 800dc68:	42a3      	cmp	r3, r4
 800dc6a:	4607      	mov	r7, r0
 800dc6c:	f2c0 8081 	blt.w	800dd72 <quorem+0x112>
 800dc70:	3c01      	subs	r4, #1
 800dc72:	f101 0814 	add.w	r8, r1, #20
 800dc76:	f100 0514 	add.w	r5, r0, #20
 800dc7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc7e:	9301      	str	r3, [sp, #4]
 800dc80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc94:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc98:	d331      	bcc.n	800dcfe <quorem+0x9e>
 800dc9a:	f04f 0e00 	mov.w	lr, #0
 800dc9e:	4640      	mov	r0, r8
 800dca0:	46ac      	mov	ip, r5
 800dca2:	46f2      	mov	sl, lr
 800dca4:	f850 2b04 	ldr.w	r2, [r0], #4
 800dca8:	b293      	uxth	r3, r2
 800dcaa:	fb06 e303 	mla	r3, r6, r3, lr
 800dcae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	ebaa 0303 	sub.w	r3, sl, r3
 800dcb8:	f8dc a000 	ldr.w	sl, [ip]
 800dcbc:	0c12      	lsrs	r2, r2, #16
 800dcbe:	fa13 f38a 	uxtah	r3, r3, sl
 800dcc2:	fb06 e202 	mla	r2, r6, r2, lr
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	9b00      	ldr	r3, [sp, #0]
 800dcca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dcce:	b292      	uxth	r2, r2
 800dcd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dcd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800dcdc:	4581      	cmp	r9, r0
 800dcde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dce2:	f84c 3b04 	str.w	r3, [ip], #4
 800dce6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcea:	d2db      	bcs.n	800dca4 <quorem+0x44>
 800dcec:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcf0:	b92b      	cbnz	r3, 800dcfe <quorem+0x9e>
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	3b04      	subs	r3, #4
 800dcf6:	429d      	cmp	r5, r3
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	d32e      	bcc.n	800dd5a <quorem+0xfa>
 800dcfc:	613c      	str	r4, [r7, #16]
 800dcfe:	4638      	mov	r0, r7
 800dd00:	f001 fc94 	bl	800f62c <__mcmp>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	db24      	blt.n	800dd52 <quorem+0xf2>
 800dd08:	3601      	adds	r6, #1
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f04f 0c00 	mov.w	ip, #0
 800dd10:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd14:	f8d0 e000 	ldr.w	lr, [r0]
 800dd18:	b293      	uxth	r3, r2
 800dd1a:	ebac 0303 	sub.w	r3, ip, r3
 800dd1e:	0c12      	lsrs	r2, r2, #16
 800dd20:	fa13 f38e 	uxtah	r3, r3, lr
 800dd24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd32:	45c1      	cmp	r9, r8
 800dd34:	f840 3b04 	str.w	r3, [r0], #4
 800dd38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd3c:	d2e8      	bcs.n	800dd10 <quorem+0xb0>
 800dd3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd46:	b922      	cbnz	r2, 800dd52 <quorem+0xf2>
 800dd48:	3b04      	subs	r3, #4
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	d30a      	bcc.n	800dd66 <quorem+0x106>
 800dd50:	613c      	str	r4, [r7, #16]
 800dd52:	4630      	mov	r0, r6
 800dd54:	b003      	add	sp, #12
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5a:	6812      	ldr	r2, [r2, #0]
 800dd5c:	3b04      	subs	r3, #4
 800dd5e:	2a00      	cmp	r2, #0
 800dd60:	d1cc      	bne.n	800dcfc <quorem+0x9c>
 800dd62:	3c01      	subs	r4, #1
 800dd64:	e7c7      	b.n	800dcf6 <quorem+0x96>
 800dd66:	6812      	ldr	r2, [r2, #0]
 800dd68:	3b04      	subs	r3, #4
 800dd6a:	2a00      	cmp	r2, #0
 800dd6c:	d1f0      	bne.n	800dd50 <quorem+0xf0>
 800dd6e:	3c01      	subs	r4, #1
 800dd70:	e7eb      	b.n	800dd4a <quorem+0xea>
 800dd72:	2000      	movs	r0, #0
 800dd74:	e7ee      	b.n	800dd54 <quorem+0xf4>
	...

0800dd78 <_dtoa_r>:
 800dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	ed2d 8b04 	vpush	{d8-d9}
 800dd80:	ec57 6b10 	vmov	r6, r7, d0
 800dd84:	b093      	sub	sp, #76	; 0x4c
 800dd86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dd8c:	9106      	str	r1, [sp, #24]
 800dd8e:	ee10 aa10 	vmov	sl, s0
 800dd92:	4604      	mov	r4, r0
 800dd94:	9209      	str	r2, [sp, #36]	; 0x24
 800dd96:	930c      	str	r3, [sp, #48]	; 0x30
 800dd98:	46bb      	mov	fp, r7
 800dd9a:	b975      	cbnz	r5, 800ddba <_dtoa_r+0x42>
 800dd9c:	2010      	movs	r0, #16
 800dd9e:	f001 f95f 	bl	800f060 <malloc>
 800dda2:	4602      	mov	r2, r0
 800dda4:	6260      	str	r0, [r4, #36]	; 0x24
 800dda6:	b920      	cbnz	r0, 800ddb2 <_dtoa_r+0x3a>
 800dda8:	4ba7      	ldr	r3, [pc, #668]	; (800e048 <_dtoa_r+0x2d0>)
 800ddaa:	21ea      	movs	r1, #234	; 0xea
 800ddac:	48a7      	ldr	r0, [pc, #668]	; (800e04c <_dtoa_r+0x2d4>)
 800ddae:	f7ff ff39 	bl	800dc24 <__assert_func>
 800ddb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddb6:	6005      	str	r5, [r0, #0]
 800ddb8:	60c5      	str	r5, [r0, #12]
 800ddba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddbc:	6819      	ldr	r1, [r3, #0]
 800ddbe:	b151      	cbz	r1, 800ddd6 <_dtoa_r+0x5e>
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	604a      	str	r2, [r1, #4]
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	4093      	lsls	r3, r2
 800ddc8:	608b      	str	r3, [r1, #8]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f001 f9a2 	bl	800f114 <_Bfree>
 800ddd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	1e3b      	subs	r3, r7, #0
 800ddd8:	bfaa      	itet	ge
 800ddda:	2300      	movge	r3, #0
 800dddc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800dde0:	f8c8 3000 	strge.w	r3, [r8]
 800dde4:	4b9a      	ldr	r3, [pc, #616]	; (800e050 <_dtoa_r+0x2d8>)
 800dde6:	bfbc      	itt	lt
 800dde8:	2201      	movlt	r2, #1
 800ddea:	f8c8 2000 	strlt.w	r2, [r8]
 800ddee:	ea33 030b 	bics.w	r3, r3, fp
 800ddf2:	d11b      	bne.n	800de2c <_dtoa_r+0xb4>
 800ddf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddf6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ddfa:	6013      	str	r3, [r2, #0]
 800ddfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de00:	4333      	orrs	r3, r6
 800de02:	f000 8592 	beq.w	800e92a <_dtoa_r+0xbb2>
 800de06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de08:	b963      	cbnz	r3, 800de24 <_dtoa_r+0xac>
 800de0a:	4b92      	ldr	r3, [pc, #584]	; (800e054 <_dtoa_r+0x2dc>)
 800de0c:	e022      	b.n	800de54 <_dtoa_r+0xdc>
 800de0e:	4b92      	ldr	r3, [pc, #584]	; (800e058 <_dtoa_r+0x2e0>)
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	3308      	adds	r3, #8
 800de14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de16:	6013      	str	r3, [r2, #0]
 800de18:	9801      	ldr	r0, [sp, #4]
 800de1a:	b013      	add	sp, #76	; 0x4c
 800de1c:	ecbd 8b04 	vpop	{d8-d9}
 800de20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de24:	4b8b      	ldr	r3, [pc, #556]	; (800e054 <_dtoa_r+0x2dc>)
 800de26:	9301      	str	r3, [sp, #4]
 800de28:	3303      	adds	r3, #3
 800de2a:	e7f3      	b.n	800de14 <_dtoa_r+0x9c>
 800de2c:	2200      	movs	r2, #0
 800de2e:	2300      	movs	r3, #0
 800de30:	4650      	mov	r0, sl
 800de32:	4659      	mov	r1, fp
 800de34:	f7f2 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 800de38:	ec4b ab19 	vmov	d9, sl, fp
 800de3c:	4680      	mov	r8, r0
 800de3e:	b158      	cbz	r0, 800de58 <_dtoa_r+0xe0>
 800de40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de42:	2301      	movs	r3, #1
 800de44:	6013      	str	r3, [r2, #0]
 800de46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f000 856b 	beq.w	800e924 <_dtoa_r+0xbac>
 800de4e:	4883      	ldr	r0, [pc, #524]	; (800e05c <_dtoa_r+0x2e4>)
 800de50:	6018      	str	r0, [r3, #0]
 800de52:	1e43      	subs	r3, r0, #1
 800de54:	9301      	str	r3, [sp, #4]
 800de56:	e7df      	b.n	800de18 <_dtoa_r+0xa0>
 800de58:	ec4b ab10 	vmov	d0, sl, fp
 800de5c:	aa10      	add	r2, sp, #64	; 0x40
 800de5e:	a911      	add	r1, sp, #68	; 0x44
 800de60:	4620      	mov	r0, r4
 800de62:	f001 fd05 	bl	800f870 <__d2b>
 800de66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800de6a:	ee08 0a10 	vmov	s16, r0
 800de6e:	2d00      	cmp	r5, #0
 800de70:	f000 8084 	beq.w	800df7c <_dtoa_r+0x204>
 800de74:	ee19 3a90 	vmov	r3, s19
 800de78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800de80:	4656      	mov	r6, sl
 800de82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800de86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800de8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800de8e:	4b74      	ldr	r3, [pc, #464]	; (800e060 <_dtoa_r+0x2e8>)
 800de90:	2200      	movs	r2, #0
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	f7f2 f9f7 	bl	8000288 <__aeabi_dsub>
 800de9a:	a365      	add	r3, pc, #404	; (adr r3, 800e030 <_dtoa_r+0x2b8>)
 800de9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea0:	f7f2 fbaa 	bl	80005f8 <__aeabi_dmul>
 800dea4:	a364      	add	r3, pc, #400	; (adr r3, 800e038 <_dtoa_r+0x2c0>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	f7f2 f9ef 	bl	800028c <__adddf3>
 800deae:	4606      	mov	r6, r0
 800deb0:	4628      	mov	r0, r5
 800deb2:	460f      	mov	r7, r1
 800deb4:	f7f2 fb36 	bl	8000524 <__aeabi_i2d>
 800deb8:	a361      	add	r3, pc, #388	; (adr r3, 800e040 <_dtoa_r+0x2c8>)
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	f7f2 fb9b 	bl	80005f8 <__aeabi_dmul>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	4630      	mov	r0, r6
 800dec8:	4639      	mov	r1, r7
 800deca:	f7f2 f9df 	bl	800028c <__adddf3>
 800dece:	4606      	mov	r6, r0
 800ded0:	460f      	mov	r7, r1
 800ded2:	f7f2 fe41 	bl	8000b58 <__aeabi_d2iz>
 800ded6:	2200      	movs	r2, #0
 800ded8:	9000      	str	r0, [sp, #0]
 800deda:	2300      	movs	r3, #0
 800dedc:	4630      	mov	r0, r6
 800dede:	4639      	mov	r1, r7
 800dee0:	f7f2 fdfc 	bl	8000adc <__aeabi_dcmplt>
 800dee4:	b150      	cbz	r0, 800defc <_dtoa_r+0x184>
 800dee6:	9800      	ldr	r0, [sp, #0]
 800dee8:	f7f2 fb1c 	bl	8000524 <__aeabi_i2d>
 800deec:	4632      	mov	r2, r6
 800deee:	463b      	mov	r3, r7
 800def0:	f7f2 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 800def4:	b910      	cbnz	r0, 800defc <_dtoa_r+0x184>
 800def6:	9b00      	ldr	r3, [sp, #0]
 800def8:	3b01      	subs	r3, #1
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	9b00      	ldr	r3, [sp, #0]
 800defe:	2b16      	cmp	r3, #22
 800df00:	d85a      	bhi.n	800dfb8 <_dtoa_r+0x240>
 800df02:	9a00      	ldr	r2, [sp, #0]
 800df04:	4b57      	ldr	r3, [pc, #348]	; (800e064 <_dtoa_r+0x2ec>)
 800df06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	ec51 0b19 	vmov	r0, r1, d9
 800df12:	f7f2 fde3 	bl	8000adc <__aeabi_dcmplt>
 800df16:	2800      	cmp	r0, #0
 800df18:	d050      	beq.n	800dfbc <_dtoa_r+0x244>
 800df1a:	9b00      	ldr	r3, [sp, #0]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	9300      	str	r3, [sp, #0]
 800df20:	2300      	movs	r3, #0
 800df22:	930b      	str	r3, [sp, #44]	; 0x2c
 800df24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df26:	1b5d      	subs	r5, r3, r5
 800df28:	1e6b      	subs	r3, r5, #1
 800df2a:	9305      	str	r3, [sp, #20]
 800df2c:	bf45      	ittet	mi
 800df2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800df32:	9304      	strmi	r3, [sp, #16]
 800df34:	2300      	movpl	r3, #0
 800df36:	2300      	movmi	r3, #0
 800df38:	bf4c      	ite	mi
 800df3a:	9305      	strmi	r3, [sp, #20]
 800df3c:	9304      	strpl	r3, [sp, #16]
 800df3e:	9b00      	ldr	r3, [sp, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	db3d      	blt.n	800dfc0 <_dtoa_r+0x248>
 800df44:	9b05      	ldr	r3, [sp, #20]
 800df46:	9a00      	ldr	r2, [sp, #0]
 800df48:	920a      	str	r2, [sp, #40]	; 0x28
 800df4a:	4413      	add	r3, r2
 800df4c:	9305      	str	r3, [sp, #20]
 800df4e:	2300      	movs	r3, #0
 800df50:	9307      	str	r3, [sp, #28]
 800df52:	9b06      	ldr	r3, [sp, #24]
 800df54:	2b09      	cmp	r3, #9
 800df56:	f200 8089 	bhi.w	800e06c <_dtoa_r+0x2f4>
 800df5a:	2b05      	cmp	r3, #5
 800df5c:	bfc4      	itt	gt
 800df5e:	3b04      	subgt	r3, #4
 800df60:	9306      	strgt	r3, [sp, #24]
 800df62:	9b06      	ldr	r3, [sp, #24]
 800df64:	f1a3 0302 	sub.w	r3, r3, #2
 800df68:	bfcc      	ite	gt
 800df6a:	2500      	movgt	r5, #0
 800df6c:	2501      	movle	r5, #1
 800df6e:	2b03      	cmp	r3, #3
 800df70:	f200 8087 	bhi.w	800e082 <_dtoa_r+0x30a>
 800df74:	e8df f003 	tbb	[pc, r3]
 800df78:	59383a2d 	.word	0x59383a2d
 800df7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800df80:	441d      	add	r5, r3
 800df82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800df86:	2b20      	cmp	r3, #32
 800df88:	bfc1      	itttt	gt
 800df8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800df8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800df92:	fa0b f303 	lslgt.w	r3, fp, r3
 800df96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800df9a:	bfda      	itte	le
 800df9c:	f1c3 0320 	rsble	r3, r3, #32
 800dfa0:	fa06 f003 	lslle.w	r0, r6, r3
 800dfa4:	4318      	orrgt	r0, r3
 800dfa6:	f7f2 faad 	bl	8000504 <__aeabi_ui2d>
 800dfaa:	2301      	movs	r3, #1
 800dfac:	4606      	mov	r6, r0
 800dfae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dfb2:	3d01      	subs	r5, #1
 800dfb4:	930e      	str	r3, [sp, #56]	; 0x38
 800dfb6:	e76a      	b.n	800de8e <_dtoa_r+0x116>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e7b2      	b.n	800df22 <_dtoa_r+0x1aa>
 800dfbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800dfbe:	e7b1      	b.n	800df24 <_dtoa_r+0x1ac>
 800dfc0:	9b04      	ldr	r3, [sp, #16]
 800dfc2:	9a00      	ldr	r2, [sp, #0]
 800dfc4:	1a9b      	subs	r3, r3, r2
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	4253      	negs	r3, r2
 800dfca:	9307      	str	r3, [sp, #28]
 800dfcc:	2300      	movs	r3, #0
 800dfce:	930a      	str	r3, [sp, #40]	; 0x28
 800dfd0:	e7bf      	b.n	800df52 <_dtoa_r+0x1da>
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	9308      	str	r3, [sp, #32]
 800dfd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	dc55      	bgt.n	800e088 <_dtoa_r+0x310>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	9209      	str	r2, [sp, #36]	; 0x24
 800dfe6:	e00c      	b.n	800e002 <_dtoa_r+0x28a>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e7f3      	b.n	800dfd4 <_dtoa_r+0x25c>
 800dfec:	2300      	movs	r3, #0
 800dfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff0:	9308      	str	r3, [sp, #32]
 800dff2:	9b00      	ldr	r3, [sp, #0]
 800dff4:	4413      	add	r3, r2
 800dff6:	9302      	str	r3, [sp, #8]
 800dff8:	3301      	adds	r3, #1
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	bfb8      	it	lt
 800e000:	2301      	movlt	r3, #1
 800e002:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e004:	2200      	movs	r2, #0
 800e006:	6042      	str	r2, [r0, #4]
 800e008:	2204      	movs	r2, #4
 800e00a:	f102 0614 	add.w	r6, r2, #20
 800e00e:	429e      	cmp	r6, r3
 800e010:	6841      	ldr	r1, [r0, #4]
 800e012:	d93d      	bls.n	800e090 <_dtoa_r+0x318>
 800e014:	4620      	mov	r0, r4
 800e016:	f001 f83d 	bl	800f094 <_Balloc>
 800e01a:	9001      	str	r0, [sp, #4]
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d13b      	bne.n	800e098 <_dtoa_r+0x320>
 800e020:	4b11      	ldr	r3, [pc, #68]	; (800e068 <_dtoa_r+0x2f0>)
 800e022:	4602      	mov	r2, r0
 800e024:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e028:	e6c0      	b.n	800ddac <_dtoa_r+0x34>
 800e02a:	2301      	movs	r3, #1
 800e02c:	e7df      	b.n	800dfee <_dtoa_r+0x276>
 800e02e:	bf00      	nop
 800e030:	636f4361 	.word	0x636f4361
 800e034:	3fd287a7 	.word	0x3fd287a7
 800e038:	8b60c8b3 	.word	0x8b60c8b3
 800e03c:	3fc68a28 	.word	0x3fc68a28
 800e040:	509f79fb 	.word	0x509f79fb
 800e044:	3fd34413 	.word	0x3fd34413
 800e048:	080113f8 	.word	0x080113f8
 800e04c:	080114b5 	.word	0x080114b5
 800e050:	7ff00000 	.word	0x7ff00000
 800e054:	080114b1 	.word	0x080114b1
 800e058:	080114a8 	.word	0x080114a8
 800e05c:	08011385 	.word	0x08011385
 800e060:	3ff80000 	.word	0x3ff80000
 800e064:	08011620 	.word	0x08011620
 800e068:	08011510 	.word	0x08011510
 800e06c:	2501      	movs	r5, #1
 800e06e:	2300      	movs	r3, #0
 800e070:	9306      	str	r3, [sp, #24]
 800e072:	9508      	str	r5, [sp, #32]
 800e074:	f04f 33ff 	mov.w	r3, #4294967295
 800e078:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e07c:	2200      	movs	r2, #0
 800e07e:	2312      	movs	r3, #18
 800e080:	e7b0      	b.n	800dfe4 <_dtoa_r+0x26c>
 800e082:	2301      	movs	r3, #1
 800e084:	9308      	str	r3, [sp, #32]
 800e086:	e7f5      	b.n	800e074 <_dtoa_r+0x2fc>
 800e088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e08a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e08e:	e7b8      	b.n	800e002 <_dtoa_r+0x28a>
 800e090:	3101      	adds	r1, #1
 800e092:	6041      	str	r1, [r0, #4]
 800e094:	0052      	lsls	r2, r2, #1
 800e096:	e7b8      	b.n	800e00a <_dtoa_r+0x292>
 800e098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e09a:	9a01      	ldr	r2, [sp, #4]
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	9b03      	ldr	r3, [sp, #12]
 800e0a0:	2b0e      	cmp	r3, #14
 800e0a2:	f200 809d 	bhi.w	800e1e0 <_dtoa_r+0x468>
 800e0a6:	2d00      	cmp	r5, #0
 800e0a8:	f000 809a 	beq.w	800e1e0 <_dtoa_r+0x468>
 800e0ac:	9b00      	ldr	r3, [sp, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	dd32      	ble.n	800e118 <_dtoa_r+0x3a0>
 800e0b2:	4ab7      	ldr	r2, [pc, #732]	; (800e390 <_dtoa_r+0x618>)
 800e0b4:	f003 030f 	and.w	r3, r3, #15
 800e0b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0c0:	9b00      	ldr	r3, [sp, #0]
 800e0c2:	05d8      	lsls	r0, r3, #23
 800e0c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e0c8:	d516      	bpl.n	800e0f8 <_dtoa_r+0x380>
 800e0ca:	4bb2      	ldr	r3, [pc, #712]	; (800e394 <_dtoa_r+0x61c>)
 800e0cc:	ec51 0b19 	vmov	r0, r1, d9
 800e0d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e0d4:	f7f2 fbba 	bl	800084c <__aeabi_ddiv>
 800e0d8:	f007 070f 	and.w	r7, r7, #15
 800e0dc:	4682      	mov	sl, r0
 800e0de:	468b      	mov	fp, r1
 800e0e0:	2503      	movs	r5, #3
 800e0e2:	4eac      	ldr	r6, [pc, #688]	; (800e394 <_dtoa_r+0x61c>)
 800e0e4:	b957      	cbnz	r7, 800e0fc <_dtoa_r+0x384>
 800e0e6:	4642      	mov	r2, r8
 800e0e8:	464b      	mov	r3, r9
 800e0ea:	4650      	mov	r0, sl
 800e0ec:	4659      	mov	r1, fp
 800e0ee:	f7f2 fbad 	bl	800084c <__aeabi_ddiv>
 800e0f2:	4682      	mov	sl, r0
 800e0f4:	468b      	mov	fp, r1
 800e0f6:	e028      	b.n	800e14a <_dtoa_r+0x3d2>
 800e0f8:	2502      	movs	r5, #2
 800e0fa:	e7f2      	b.n	800e0e2 <_dtoa_r+0x36a>
 800e0fc:	07f9      	lsls	r1, r7, #31
 800e0fe:	d508      	bpl.n	800e112 <_dtoa_r+0x39a>
 800e100:	4640      	mov	r0, r8
 800e102:	4649      	mov	r1, r9
 800e104:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e108:	f7f2 fa76 	bl	80005f8 <__aeabi_dmul>
 800e10c:	3501      	adds	r5, #1
 800e10e:	4680      	mov	r8, r0
 800e110:	4689      	mov	r9, r1
 800e112:	107f      	asrs	r7, r7, #1
 800e114:	3608      	adds	r6, #8
 800e116:	e7e5      	b.n	800e0e4 <_dtoa_r+0x36c>
 800e118:	f000 809b 	beq.w	800e252 <_dtoa_r+0x4da>
 800e11c:	9b00      	ldr	r3, [sp, #0]
 800e11e:	4f9d      	ldr	r7, [pc, #628]	; (800e394 <_dtoa_r+0x61c>)
 800e120:	425e      	negs	r6, r3
 800e122:	4b9b      	ldr	r3, [pc, #620]	; (800e390 <_dtoa_r+0x618>)
 800e124:	f006 020f 	and.w	r2, r6, #15
 800e128:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e130:	ec51 0b19 	vmov	r0, r1, d9
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	1136      	asrs	r6, r6, #4
 800e13a:	4682      	mov	sl, r0
 800e13c:	468b      	mov	fp, r1
 800e13e:	2300      	movs	r3, #0
 800e140:	2502      	movs	r5, #2
 800e142:	2e00      	cmp	r6, #0
 800e144:	d17a      	bne.n	800e23c <_dtoa_r+0x4c4>
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1d3      	bne.n	800e0f2 <_dtoa_r+0x37a>
 800e14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 8082 	beq.w	800e256 <_dtoa_r+0x4de>
 800e152:	4b91      	ldr	r3, [pc, #580]	; (800e398 <_dtoa_r+0x620>)
 800e154:	2200      	movs	r2, #0
 800e156:	4650      	mov	r0, sl
 800e158:	4659      	mov	r1, fp
 800e15a:	f7f2 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800e15e:	2800      	cmp	r0, #0
 800e160:	d079      	beq.n	800e256 <_dtoa_r+0x4de>
 800e162:	9b03      	ldr	r3, [sp, #12]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d076      	beq.n	800e256 <_dtoa_r+0x4de>
 800e168:	9b02      	ldr	r3, [sp, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	dd36      	ble.n	800e1dc <_dtoa_r+0x464>
 800e16e:	9b00      	ldr	r3, [sp, #0]
 800e170:	4650      	mov	r0, sl
 800e172:	4659      	mov	r1, fp
 800e174:	1e5f      	subs	r7, r3, #1
 800e176:	2200      	movs	r2, #0
 800e178:	4b88      	ldr	r3, [pc, #544]	; (800e39c <_dtoa_r+0x624>)
 800e17a:	f7f2 fa3d 	bl	80005f8 <__aeabi_dmul>
 800e17e:	9e02      	ldr	r6, [sp, #8]
 800e180:	4682      	mov	sl, r0
 800e182:	468b      	mov	fp, r1
 800e184:	3501      	adds	r5, #1
 800e186:	4628      	mov	r0, r5
 800e188:	f7f2 f9cc 	bl	8000524 <__aeabi_i2d>
 800e18c:	4652      	mov	r2, sl
 800e18e:	465b      	mov	r3, fp
 800e190:	f7f2 fa32 	bl	80005f8 <__aeabi_dmul>
 800e194:	4b82      	ldr	r3, [pc, #520]	; (800e3a0 <_dtoa_r+0x628>)
 800e196:	2200      	movs	r2, #0
 800e198:	f7f2 f878 	bl	800028c <__adddf3>
 800e19c:	46d0      	mov	r8, sl
 800e19e:	46d9      	mov	r9, fp
 800e1a0:	4682      	mov	sl, r0
 800e1a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e1a6:	2e00      	cmp	r6, #0
 800e1a8:	d158      	bne.n	800e25c <_dtoa_r+0x4e4>
 800e1aa:	4b7e      	ldr	r3, [pc, #504]	; (800e3a4 <_dtoa_r+0x62c>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	4640      	mov	r0, r8
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	f7f2 f869 	bl	8000288 <__aeabi_dsub>
 800e1b6:	4652      	mov	r2, sl
 800e1b8:	465b      	mov	r3, fp
 800e1ba:	4680      	mov	r8, r0
 800e1bc:	4689      	mov	r9, r1
 800e1be:	f7f2 fcab 	bl	8000b18 <__aeabi_dcmpgt>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	f040 8295 	bne.w	800e6f2 <_dtoa_r+0x97a>
 800e1c8:	4652      	mov	r2, sl
 800e1ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	f7f2 fc83 	bl	8000adc <__aeabi_dcmplt>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	f040 8289 	bne.w	800e6ee <_dtoa_r+0x976>
 800e1dc:	ec5b ab19 	vmov	sl, fp, d9
 800e1e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f2c0 8148 	blt.w	800e478 <_dtoa_r+0x700>
 800e1e8:	9a00      	ldr	r2, [sp, #0]
 800e1ea:	2a0e      	cmp	r2, #14
 800e1ec:	f300 8144 	bgt.w	800e478 <_dtoa_r+0x700>
 800e1f0:	4b67      	ldr	r3, [pc, #412]	; (800e390 <_dtoa_r+0x618>)
 800e1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f280 80d5 	bge.w	800e3ac <_dtoa_r+0x634>
 800e202:	9b03      	ldr	r3, [sp, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f300 80d1 	bgt.w	800e3ac <_dtoa_r+0x634>
 800e20a:	f040 826f 	bne.w	800e6ec <_dtoa_r+0x974>
 800e20e:	4b65      	ldr	r3, [pc, #404]	; (800e3a4 <_dtoa_r+0x62c>)
 800e210:	2200      	movs	r2, #0
 800e212:	4640      	mov	r0, r8
 800e214:	4649      	mov	r1, r9
 800e216:	f7f2 f9ef 	bl	80005f8 <__aeabi_dmul>
 800e21a:	4652      	mov	r2, sl
 800e21c:	465b      	mov	r3, fp
 800e21e:	f7f2 fc71 	bl	8000b04 <__aeabi_dcmpge>
 800e222:	9e03      	ldr	r6, [sp, #12]
 800e224:	4637      	mov	r7, r6
 800e226:	2800      	cmp	r0, #0
 800e228:	f040 8245 	bne.w	800e6b6 <_dtoa_r+0x93e>
 800e22c:	9d01      	ldr	r5, [sp, #4]
 800e22e:	2331      	movs	r3, #49	; 0x31
 800e230:	f805 3b01 	strb.w	r3, [r5], #1
 800e234:	9b00      	ldr	r3, [sp, #0]
 800e236:	3301      	adds	r3, #1
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	e240      	b.n	800e6be <_dtoa_r+0x946>
 800e23c:	07f2      	lsls	r2, r6, #31
 800e23e:	d505      	bpl.n	800e24c <_dtoa_r+0x4d4>
 800e240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e244:	f7f2 f9d8 	bl	80005f8 <__aeabi_dmul>
 800e248:	3501      	adds	r5, #1
 800e24a:	2301      	movs	r3, #1
 800e24c:	1076      	asrs	r6, r6, #1
 800e24e:	3708      	adds	r7, #8
 800e250:	e777      	b.n	800e142 <_dtoa_r+0x3ca>
 800e252:	2502      	movs	r5, #2
 800e254:	e779      	b.n	800e14a <_dtoa_r+0x3d2>
 800e256:	9f00      	ldr	r7, [sp, #0]
 800e258:	9e03      	ldr	r6, [sp, #12]
 800e25a:	e794      	b.n	800e186 <_dtoa_r+0x40e>
 800e25c:	9901      	ldr	r1, [sp, #4]
 800e25e:	4b4c      	ldr	r3, [pc, #304]	; (800e390 <_dtoa_r+0x618>)
 800e260:	4431      	add	r1, r6
 800e262:	910d      	str	r1, [sp, #52]	; 0x34
 800e264:	9908      	ldr	r1, [sp, #32]
 800e266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e26a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e26e:	2900      	cmp	r1, #0
 800e270:	d043      	beq.n	800e2fa <_dtoa_r+0x582>
 800e272:	494d      	ldr	r1, [pc, #308]	; (800e3a8 <_dtoa_r+0x630>)
 800e274:	2000      	movs	r0, #0
 800e276:	f7f2 fae9 	bl	800084c <__aeabi_ddiv>
 800e27a:	4652      	mov	r2, sl
 800e27c:	465b      	mov	r3, fp
 800e27e:	f7f2 f803 	bl	8000288 <__aeabi_dsub>
 800e282:	9d01      	ldr	r5, [sp, #4]
 800e284:	4682      	mov	sl, r0
 800e286:	468b      	mov	fp, r1
 800e288:	4649      	mov	r1, r9
 800e28a:	4640      	mov	r0, r8
 800e28c:	f7f2 fc64 	bl	8000b58 <__aeabi_d2iz>
 800e290:	4606      	mov	r6, r0
 800e292:	f7f2 f947 	bl	8000524 <__aeabi_i2d>
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	4640      	mov	r0, r8
 800e29c:	4649      	mov	r1, r9
 800e29e:	f7f1 fff3 	bl	8000288 <__aeabi_dsub>
 800e2a2:	3630      	adds	r6, #48	; 0x30
 800e2a4:	f805 6b01 	strb.w	r6, [r5], #1
 800e2a8:	4652      	mov	r2, sl
 800e2aa:	465b      	mov	r3, fp
 800e2ac:	4680      	mov	r8, r0
 800e2ae:	4689      	mov	r9, r1
 800e2b0:	f7f2 fc14 	bl	8000adc <__aeabi_dcmplt>
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	d163      	bne.n	800e380 <_dtoa_r+0x608>
 800e2b8:	4642      	mov	r2, r8
 800e2ba:	464b      	mov	r3, r9
 800e2bc:	4936      	ldr	r1, [pc, #216]	; (800e398 <_dtoa_r+0x620>)
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f7f1 ffe2 	bl	8000288 <__aeabi_dsub>
 800e2c4:	4652      	mov	r2, sl
 800e2c6:	465b      	mov	r3, fp
 800e2c8:	f7f2 fc08 	bl	8000adc <__aeabi_dcmplt>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	f040 80b5 	bne.w	800e43c <_dtoa_r+0x6c4>
 800e2d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2d4:	429d      	cmp	r5, r3
 800e2d6:	d081      	beq.n	800e1dc <_dtoa_r+0x464>
 800e2d8:	4b30      	ldr	r3, [pc, #192]	; (800e39c <_dtoa_r+0x624>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	4650      	mov	r0, sl
 800e2de:	4659      	mov	r1, fp
 800e2e0:	f7f2 f98a 	bl	80005f8 <__aeabi_dmul>
 800e2e4:	4b2d      	ldr	r3, [pc, #180]	; (800e39c <_dtoa_r+0x624>)
 800e2e6:	4682      	mov	sl, r0
 800e2e8:	468b      	mov	fp, r1
 800e2ea:	4640      	mov	r0, r8
 800e2ec:	4649      	mov	r1, r9
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f7f2 f982 	bl	80005f8 <__aeabi_dmul>
 800e2f4:	4680      	mov	r8, r0
 800e2f6:	4689      	mov	r9, r1
 800e2f8:	e7c6      	b.n	800e288 <_dtoa_r+0x510>
 800e2fa:	4650      	mov	r0, sl
 800e2fc:	4659      	mov	r1, fp
 800e2fe:	f7f2 f97b 	bl	80005f8 <__aeabi_dmul>
 800e302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e304:	9d01      	ldr	r5, [sp, #4]
 800e306:	930f      	str	r3, [sp, #60]	; 0x3c
 800e308:	4682      	mov	sl, r0
 800e30a:	468b      	mov	fp, r1
 800e30c:	4649      	mov	r1, r9
 800e30e:	4640      	mov	r0, r8
 800e310:	f7f2 fc22 	bl	8000b58 <__aeabi_d2iz>
 800e314:	4606      	mov	r6, r0
 800e316:	f7f2 f905 	bl	8000524 <__aeabi_i2d>
 800e31a:	3630      	adds	r6, #48	; 0x30
 800e31c:	4602      	mov	r2, r0
 800e31e:	460b      	mov	r3, r1
 800e320:	4640      	mov	r0, r8
 800e322:	4649      	mov	r1, r9
 800e324:	f7f1 ffb0 	bl	8000288 <__aeabi_dsub>
 800e328:	f805 6b01 	strb.w	r6, [r5], #1
 800e32c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e32e:	429d      	cmp	r5, r3
 800e330:	4680      	mov	r8, r0
 800e332:	4689      	mov	r9, r1
 800e334:	f04f 0200 	mov.w	r2, #0
 800e338:	d124      	bne.n	800e384 <_dtoa_r+0x60c>
 800e33a:	4b1b      	ldr	r3, [pc, #108]	; (800e3a8 <_dtoa_r+0x630>)
 800e33c:	4650      	mov	r0, sl
 800e33e:	4659      	mov	r1, fp
 800e340:	f7f1 ffa4 	bl	800028c <__adddf3>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4640      	mov	r0, r8
 800e34a:	4649      	mov	r1, r9
 800e34c:	f7f2 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 800e350:	2800      	cmp	r0, #0
 800e352:	d173      	bne.n	800e43c <_dtoa_r+0x6c4>
 800e354:	4652      	mov	r2, sl
 800e356:	465b      	mov	r3, fp
 800e358:	4913      	ldr	r1, [pc, #76]	; (800e3a8 <_dtoa_r+0x630>)
 800e35a:	2000      	movs	r0, #0
 800e35c:	f7f1 ff94 	bl	8000288 <__aeabi_dsub>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4640      	mov	r0, r8
 800e366:	4649      	mov	r1, r9
 800e368:	f7f2 fbb8 	bl	8000adc <__aeabi_dcmplt>
 800e36c:	2800      	cmp	r0, #0
 800e36e:	f43f af35 	beq.w	800e1dc <_dtoa_r+0x464>
 800e372:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e374:	1e6b      	subs	r3, r5, #1
 800e376:	930f      	str	r3, [sp, #60]	; 0x3c
 800e378:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e37c:	2b30      	cmp	r3, #48	; 0x30
 800e37e:	d0f8      	beq.n	800e372 <_dtoa_r+0x5fa>
 800e380:	9700      	str	r7, [sp, #0]
 800e382:	e049      	b.n	800e418 <_dtoa_r+0x6a0>
 800e384:	4b05      	ldr	r3, [pc, #20]	; (800e39c <_dtoa_r+0x624>)
 800e386:	f7f2 f937 	bl	80005f8 <__aeabi_dmul>
 800e38a:	4680      	mov	r8, r0
 800e38c:	4689      	mov	r9, r1
 800e38e:	e7bd      	b.n	800e30c <_dtoa_r+0x594>
 800e390:	08011620 	.word	0x08011620
 800e394:	080115f8 	.word	0x080115f8
 800e398:	3ff00000 	.word	0x3ff00000
 800e39c:	40240000 	.word	0x40240000
 800e3a0:	401c0000 	.word	0x401c0000
 800e3a4:	40140000 	.word	0x40140000
 800e3a8:	3fe00000 	.word	0x3fe00000
 800e3ac:	9d01      	ldr	r5, [sp, #4]
 800e3ae:	4656      	mov	r6, sl
 800e3b0:	465f      	mov	r7, fp
 800e3b2:	4642      	mov	r2, r8
 800e3b4:	464b      	mov	r3, r9
 800e3b6:	4630      	mov	r0, r6
 800e3b8:	4639      	mov	r1, r7
 800e3ba:	f7f2 fa47 	bl	800084c <__aeabi_ddiv>
 800e3be:	f7f2 fbcb 	bl	8000b58 <__aeabi_d2iz>
 800e3c2:	4682      	mov	sl, r0
 800e3c4:	f7f2 f8ae 	bl	8000524 <__aeabi_i2d>
 800e3c8:	4642      	mov	r2, r8
 800e3ca:	464b      	mov	r3, r9
 800e3cc:	f7f2 f914 	bl	80005f8 <__aeabi_dmul>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4630      	mov	r0, r6
 800e3d6:	4639      	mov	r1, r7
 800e3d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e3dc:	f7f1 ff54 	bl	8000288 <__aeabi_dsub>
 800e3e0:	f805 6b01 	strb.w	r6, [r5], #1
 800e3e4:	9e01      	ldr	r6, [sp, #4]
 800e3e6:	9f03      	ldr	r7, [sp, #12]
 800e3e8:	1bae      	subs	r6, r5, r6
 800e3ea:	42b7      	cmp	r7, r6
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	d135      	bne.n	800e45e <_dtoa_r+0x6e6>
 800e3f2:	f7f1 ff4b 	bl	800028c <__adddf3>
 800e3f6:	4642      	mov	r2, r8
 800e3f8:	464b      	mov	r3, r9
 800e3fa:	4606      	mov	r6, r0
 800e3fc:	460f      	mov	r7, r1
 800e3fe:	f7f2 fb8b 	bl	8000b18 <__aeabi_dcmpgt>
 800e402:	b9d0      	cbnz	r0, 800e43a <_dtoa_r+0x6c2>
 800e404:	4642      	mov	r2, r8
 800e406:	464b      	mov	r3, r9
 800e408:	4630      	mov	r0, r6
 800e40a:	4639      	mov	r1, r7
 800e40c:	f7f2 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e410:	b110      	cbz	r0, 800e418 <_dtoa_r+0x6a0>
 800e412:	f01a 0f01 	tst.w	sl, #1
 800e416:	d110      	bne.n	800e43a <_dtoa_r+0x6c2>
 800e418:	4620      	mov	r0, r4
 800e41a:	ee18 1a10 	vmov	r1, s16
 800e41e:	f000 fe79 	bl	800f114 <_Bfree>
 800e422:	2300      	movs	r3, #0
 800e424:	9800      	ldr	r0, [sp, #0]
 800e426:	702b      	strb	r3, [r5, #0]
 800e428:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e42a:	3001      	adds	r0, #1
 800e42c:	6018      	str	r0, [r3, #0]
 800e42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e430:	2b00      	cmp	r3, #0
 800e432:	f43f acf1 	beq.w	800de18 <_dtoa_r+0xa0>
 800e436:	601d      	str	r5, [r3, #0]
 800e438:	e4ee      	b.n	800de18 <_dtoa_r+0xa0>
 800e43a:	9f00      	ldr	r7, [sp, #0]
 800e43c:	462b      	mov	r3, r5
 800e43e:	461d      	mov	r5, r3
 800e440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e444:	2a39      	cmp	r2, #57	; 0x39
 800e446:	d106      	bne.n	800e456 <_dtoa_r+0x6de>
 800e448:	9a01      	ldr	r2, [sp, #4]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d1f7      	bne.n	800e43e <_dtoa_r+0x6c6>
 800e44e:	9901      	ldr	r1, [sp, #4]
 800e450:	2230      	movs	r2, #48	; 0x30
 800e452:	3701      	adds	r7, #1
 800e454:	700a      	strb	r2, [r1, #0]
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	3201      	adds	r2, #1
 800e45a:	701a      	strb	r2, [r3, #0]
 800e45c:	e790      	b.n	800e380 <_dtoa_r+0x608>
 800e45e:	4ba6      	ldr	r3, [pc, #664]	; (800e6f8 <_dtoa_r+0x980>)
 800e460:	2200      	movs	r2, #0
 800e462:	f7f2 f8c9 	bl	80005f8 <__aeabi_dmul>
 800e466:	2200      	movs	r2, #0
 800e468:	2300      	movs	r3, #0
 800e46a:	4606      	mov	r6, r0
 800e46c:	460f      	mov	r7, r1
 800e46e:	f7f2 fb2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e472:	2800      	cmp	r0, #0
 800e474:	d09d      	beq.n	800e3b2 <_dtoa_r+0x63a>
 800e476:	e7cf      	b.n	800e418 <_dtoa_r+0x6a0>
 800e478:	9a08      	ldr	r2, [sp, #32]
 800e47a:	2a00      	cmp	r2, #0
 800e47c:	f000 80d7 	beq.w	800e62e <_dtoa_r+0x8b6>
 800e480:	9a06      	ldr	r2, [sp, #24]
 800e482:	2a01      	cmp	r2, #1
 800e484:	f300 80ba 	bgt.w	800e5fc <_dtoa_r+0x884>
 800e488:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e48a:	2a00      	cmp	r2, #0
 800e48c:	f000 80b2 	beq.w	800e5f4 <_dtoa_r+0x87c>
 800e490:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e494:	9e07      	ldr	r6, [sp, #28]
 800e496:	9d04      	ldr	r5, [sp, #16]
 800e498:	9a04      	ldr	r2, [sp, #16]
 800e49a:	441a      	add	r2, r3
 800e49c:	9204      	str	r2, [sp, #16]
 800e49e:	9a05      	ldr	r2, [sp, #20]
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	441a      	add	r2, r3
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	9205      	str	r2, [sp, #20]
 800e4a8:	f000 ff36 	bl	800f318 <__i2b>
 800e4ac:	4607      	mov	r7, r0
 800e4ae:	2d00      	cmp	r5, #0
 800e4b0:	dd0c      	ble.n	800e4cc <_dtoa_r+0x754>
 800e4b2:	9b05      	ldr	r3, [sp, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	dd09      	ble.n	800e4cc <_dtoa_r+0x754>
 800e4b8:	42ab      	cmp	r3, r5
 800e4ba:	9a04      	ldr	r2, [sp, #16]
 800e4bc:	bfa8      	it	ge
 800e4be:	462b      	movge	r3, r5
 800e4c0:	1ad2      	subs	r2, r2, r3
 800e4c2:	9204      	str	r2, [sp, #16]
 800e4c4:	9a05      	ldr	r2, [sp, #20]
 800e4c6:	1aed      	subs	r5, r5, r3
 800e4c8:	1ad3      	subs	r3, r2, r3
 800e4ca:	9305      	str	r3, [sp, #20]
 800e4cc:	9b07      	ldr	r3, [sp, #28]
 800e4ce:	b31b      	cbz	r3, 800e518 <_dtoa_r+0x7a0>
 800e4d0:	9b08      	ldr	r3, [sp, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	f000 80af 	beq.w	800e636 <_dtoa_r+0x8be>
 800e4d8:	2e00      	cmp	r6, #0
 800e4da:	dd13      	ble.n	800e504 <_dtoa_r+0x78c>
 800e4dc:	4639      	mov	r1, r7
 800e4de:	4632      	mov	r2, r6
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f000 ffd9 	bl	800f498 <__pow5mult>
 800e4e6:	ee18 2a10 	vmov	r2, s16
 800e4ea:	4601      	mov	r1, r0
 800e4ec:	4607      	mov	r7, r0
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	f000 ff28 	bl	800f344 <__multiply>
 800e4f4:	ee18 1a10 	vmov	r1, s16
 800e4f8:	4680      	mov	r8, r0
 800e4fa:	4620      	mov	r0, r4
 800e4fc:	f000 fe0a 	bl	800f114 <_Bfree>
 800e500:	ee08 8a10 	vmov	s16, r8
 800e504:	9b07      	ldr	r3, [sp, #28]
 800e506:	1b9a      	subs	r2, r3, r6
 800e508:	d006      	beq.n	800e518 <_dtoa_r+0x7a0>
 800e50a:	ee18 1a10 	vmov	r1, s16
 800e50e:	4620      	mov	r0, r4
 800e510:	f000 ffc2 	bl	800f498 <__pow5mult>
 800e514:	ee08 0a10 	vmov	s16, r0
 800e518:	2101      	movs	r1, #1
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 fefc 	bl	800f318 <__i2b>
 800e520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e522:	2b00      	cmp	r3, #0
 800e524:	4606      	mov	r6, r0
 800e526:	f340 8088 	ble.w	800e63a <_dtoa_r+0x8c2>
 800e52a:	461a      	mov	r2, r3
 800e52c:	4601      	mov	r1, r0
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 ffb2 	bl	800f498 <__pow5mult>
 800e534:	9b06      	ldr	r3, [sp, #24]
 800e536:	2b01      	cmp	r3, #1
 800e538:	4606      	mov	r6, r0
 800e53a:	f340 8081 	ble.w	800e640 <_dtoa_r+0x8c8>
 800e53e:	f04f 0800 	mov.w	r8, #0
 800e542:	6933      	ldr	r3, [r6, #16]
 800e544:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e548:	6918      	ldr	r0, [r3, #16]
 800e54a:	f000 fe95 	bl	800f278 <__hi0bits>
 800e54e:	f1c0 0020 	rsb	r0, r0, #32
 800e552:	9b05      	ldr	r3, [sp, #20]
 800e554:	4418      	add	r0, r3
 800e556:	f010 001f 	ands.w	r0, r0, #31
 800e55a:	f000 8092 	beq.w	800e682 <_dtoa_r+0x90a>
 800e55e:	f1c0 0320 	rsb	r3, r0, #32
 800e562:	2b04      	cmp	r3, #4
 800e564:	f340 808a 	ble.w	800e67c <_dtoa_r+0x904>
 800e568:	f1c0 001c 	rsb	r0, r0, #28
 800e56c:	9b04      	ldr	r3, [sp, #16]
 800e56e:	4403      	add	r3, r0
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	9b05      	ldr	r3, [sp, #20]
 800e574:	4403      	add	r3, r0
 800e576:	4405      	add	r5, r0
 800e578:	9305      	str	r3, [sp, #20]
 800e57a:	9b04      	ldr	r3, [sp, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	dd07      	ble.n	800e590 <_dtoa_r+0x818>
 800e580:	ee18 1a10 	vmov	r1, s16
 800e584:	461a      	mov	r2, r3
 800e586:	4620      	mov	r0, r4
 800e588:	f000 ffe0 	bl	800f54c <__lshift>
 800e58c:	ee08 0a10 	vmov	s16, r0
 800e590:	9b05      	ldr	r3, [sp, #20]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dd05      	ble.n	800e5a2 <_dtoa_r+0x82a>
 800e596:	4631      	mov	r1, r6
 800e598:	461a      	mov	r2, r3
 800e59a:	4620      	mov	r0, r4
 800e59c:	f000 ffd6 	bl	800f54c <__lshift>
 800e5a0:	4606      	mov	r6, r0
 800e5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d06e      	beq.n	800e686 <_dtoa_r+0x90e>
 800e5a8:	ee18 0a10 	vmov	r0, s16
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	f001 f83d 	bl	800f62c <__mcmp>
 800e5b2:	2800      	cmp	r0, #0
 800e5b4:	da67      	bge.n	800e686 <_dtoa_r+0x90e>
 800e5b6:	9b00      	ldr	r3, [sp, #0]
 800e5b8:	3b01      	subs	r3, #1
 800e5ba:	ee18 1a10 	vmov	r1, s16
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	220a      	movs	r2, #10
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f000 fdc7 	bl	800f158 <__multadd>
 800e5ca:	9b08      	ldr	r3, [sp, #32]
 800e5cc:	ee08 0a10 	vmov	s16, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 81b1 	beq.w	800e938 <_dtoa_r+0xbc0>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	4639      	mov	r1, r7
 800e5da:	220a      	movs	r2, #10
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f000 fdbb 	bl	800f158 <__multadd>
 800e5e2:	9b02      	ldr	r3, [sp, #8]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	4607      	mov	r7, r0
 800e5e8:	f300 808e 	bgt.w	800e708 <_dtoa_r+0x990>
 800e5ec:	9b06      	ldr	r3, [sp, #24]
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	dc51      	bgt.n	800e696 <_dtoa_r+0x91e>
 800e5f2:	e089      	b.n	800e708 <_dtoa_r+0x990>
 800e5f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e5fa:	e74b      	b.n	800e494 <_dtoa_r+0x71c>
 800e5fc:	9b03      	ldr	r3, [sp, #12]
 800e5fe:	1e5e      	subs	r6, r3, #1
 800e600:	9b07      	ldr	r3, [sp, #28]
 800e602:	42b3      	cmp	r3, r6
 800e604:	bfbf      	itttt	lt
 800e606:	9b07      	ldrlt	r3, [sp, #28]
 800e608:	9607      	strlt	r6, [sp, #28]
 800e60a:	1af2      	sublt	r2, r6, r3
 800e60c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e60e:	bfb6      	itet	lt
 800e610:	189b      	addlt	r3, r3, r2
 800e612:	1b9e      	subge	r6, r3, r6
 800e614:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e616:	9b03      	ldr	r3, [sp, #12]
 800e618:	bfb8      	it	lt
 800e61a:	2600      	movlt	r6, #0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	bfb7      	itett	lt
 800e620:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e624:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e628:	1a9d      	sublt	r5, r3, r2
 800e62a:	2300      	movlt	r3, #0
 800e62c:	e734      	b.n	800e498 <_dtoa_r+0x720>
 800e62e:	9e07      	ldr	r6, [sp, #28]
 800e630:	9d04      	ldr	r5, [sp, #16]
 800e632:	9f08      	ldr	r7, [sp, #32]
 800e634:	e73b      	b.n	800e4ae <_dtoa_r+0x736>
 800e636:	9a07      	ldr	r2, [sp, #28]
 800e638:	e767      	b.n	800e50a <_dtoa_r+0x792>
 800e63a:	9b06      	ldr	r3, [sp, #24]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	dc18      	bgt.n	800e672 <_dtoa_r+0x8fa>
 800e640:	f1ba 0f00 	cmp.w	sl, #0
 800e644:	d115      	bne.n	800e672 <_dtoa_r+0x8fa>
 800e646:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e64a:	b993      	cbnz	r3, 800e672 <_dtoa_r+0x8fa>
 800e64c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e650:	0d1b      	lsrs	r3, r3, #20
 800e652:	051b      	lsls	r3, r3, #20
 800e654:	b183      	cbz	r3, 800e678 <_dtoa_r+0x900>
 800e656:	9b04      	ldr	r3, [sp, #16]
 800e658:	3301      	adds	r3, #1
 800e65a:	9304      	str	r3, [sp, #16]
 800e65c:	9b05      	ldr	r3, [sp, #20]
 800e65e:	3301      	adds	r3, #1
 800e660:	9305      	str	r3, [sp, #20]
 800e662:	f04f 0801 	mov.w	r8, #1
 800e666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f47f af6a 	bne.w	800e542 <_dtoa_r+0x7ca>
 800e66e:	2001      	movs	r0, #1
 800e670:	e76f      	b.n	800e552 <_dtoa_r+0x7da>
 800e672:	f04f 0800 	mov.w	r8, #0
 800e676:	e7f6      	b.n	800e666 <_dtoa_r+0x8ee>
 800e678:	4698      	mov	r8, r3
 800e67a:	e7f4      	b.n	800e666 <_dtoa_r+0x8ee>
 800e67c:	f43f af7d 	beq.w	800e57a <_dtoa_r+0x802>
 800e680:	4618      	mov	r0, r3
 800e682:	301c      	adds	r0, #28
 800e684:	e772      	b.n	800e56c <_dtoa_r+0x7f4>
 800e686:	9b03      	ldr	r3, [sp, #12]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	dc37      	bgt.n	800e6fc <_dtoa_r+0x984>
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	2b02      	cmp	r3, #2
 800e690:	dd34      	ble.n	800e6fc <_dtoa_r+0x984>
 800e692:	9b03      	ldr	r3, [sp, #12]
 800e694:	9302      	str	r3, [sp, #8]
 800e696:	9b02      	ldr	r3, [sp, #8]
 800e698:	b96b      	cbnz	r3, 800e6b6 <_dtoa_r+0x93e>
 800e69a:	4631      	mov	r1, r6
 800e69c:	2205      	movs	r2, #5
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f000 fd5a 	bl	800f158 <__multadd>
 800e6a4:	4601      	mov	r1, r0
 800e6a6:	4606      	mov	r6, r0
 800e6a8:	ee18 0a10 	vmov	r0, s16
 800e6ac:	f000 ffbe 	bl	800f62c <__mcmp>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	f73f adbb 	bgt.w	800e22c <_dtoa_r+0x4b4>
 800e6b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b8:	9d01      	ldr	r5, [sp, #4]
 800e6ba:	43db      	mvns	r3, r3
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	f04f 0800 	mov.w	r8, #0
 800e6c2:	4631      	mov	r1, r6
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f000 fd25 	bl	800f114 <_Bfree>
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	f43f aea4 	beq.w	800e418 <_dtoa_r+0x6a0>
 800e6d0:	f1b8 0f00 	cmp.w	r8, #0
 800e6d4:	d005      	beq.n	800e6e2 <_dtoa_r+0x96a>
 800e6d6:	45b8      	cmp	r8, r7
 800e6d8:	d003      	beq.n	800e6e2 <_dtoa_r+0x96a>
 800e6da:	4641      	mov	r1, r8
 800e6dc:	4620      	mov	r0, r4
 800e6de:	f000 fd19 	bl	800f114 <_Bfree>
 800e6e2:	4639      	mov	r1, r7
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	f000 fd15 	bl	800f114 <_Bfree>
 800e6ea:	e695      	b.n	800e418 <_dtoa_r+0x6a0>
 800e6ec:	2600      	movs	r6, #0
 800e6ee:	4637      	mov	r7, r6
 800e6f0:	e7e1      	b.n	800e6b6 <_dtoa_r+0x93e>
 800e6f2:	9700      	str	r7, [sp, #0]
 800e6f4:	4637      	mov	r7, r6
 800e6f6:	e599      	b.n	800e22c <_dtoa_r+0x4b4>
 800e6f8:	40240000 	.word	0x40240000
 800e6fc:	9b08      	ldr	r3, [sp, #32]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f000 80ca 	beq.w	800e898 <_dtoa_r+0xb20>
 800e704:	9b03      	ldr	r3, [sp, #12]
 800e706:	9302      	str	r3, [sp, #8]
 800e708:	2d00      	cmp	r5, #0
 800e70a:	dd05      	ble.n	800e718 <_dtoa_r+0x9a0>
 800e70c:	4639      	mov	r1, r7
 800e70e:	462a      	mov	r2, r5
 800e710:	4620      	mov	r0, r4
 800e712:	f000 ff1b 	bl	800f54c <__lshift>
 800e716:	4607      	mov	r7, r0
 800e718:	f1b8 0f00 	cmp.w	r8, #0
 800e71c:	d05b      	beq.n	800e7d6 <_dtoa_r+0xa5e>
 800e71e:	6879      	ldr	r1, [r7, #4]
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fcb7 	bl	800f094 <_Balloc>
 800e726:	4605      	mov	r5, r0
 800e728:	b928      	cbnz	r0, 800e736 <_dtoa_r+0x9be>
 800e72a:	4b87      	ldr	r3, [pc, #540]	; (800e948 <_dtoa_r+0xbd0>)
 800e72c:	4602      	mov	r2, r0
 800e72e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e732:	f7ff bb3b 	b.w	800ddac <_dtoa_r+0x34>
 800e736:	693a      	ldr	r2, [r7, #16]
 800e738:	3202      	adds	r2, #2
 800e73a:	0092      	lsls	r2, r2, #2
 800e73c:	f107 010c 	add.w	r1, r7, #12
 800e740:	300c      	adds	r0, #12
 800e742:	f7fd ff35 	bl	800c5b0 <memcpy>
 800e746:	2201      	movs	r2, #1
 800e748:	4629      	mov	r1, r5
 800e74a:	4620      	mov	r0, r4
 800e74c:	f000 fefe 	bl	800f54c <__lshift>
 800e750:	9b01      	ldr	r3, [sp, #4]
 800e752:	f103 0901 	add.w	r9, r3, #1
 800e756:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e75a:	4413      	add	r3, r2
 800e75c:	9305      	str	r3, [sp, #20]
 800e75e:	f00a 0301 	and.w	r3, sl, #1
 800e762:	46b8      	mov	r8, r7
 800e764:	9304      	str	r3, [sp, #16]
 800e766:	4607      	mov	r7, r0
 800e768:	4631      	mov	r1, r6
 800e76a:	ee18 0a10 	vmov	r0, s16
 800e76e:	f7ff fa77 	bl	800dc60 <quorem>
 800e772:	4641      	mov	r1, r8
 800e774:	9002      	str	r0, [sp, #8]
 800e776:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e77a:	ee18 0a10 	vmov	r0, s16
 800e77e:	f000 ff55 	bl	800f62c <__mcmp>
 800e782:	463a      	mov	r2, r7
 800e784:	9003      	str	r0, [sp, #12]
 800e786:	4631      	mov	r1, r6
 800e788:	4620      	mov	r0, r4
 800e78a:	f000 ff6b 	bl	800f664 <__mdiff>
 800e78e:	68c2      	ldr	r2, [r0, #12]
 800e790:	f109 3bff 	add.w	fp, r9, #4294967295
 800e794:	4605      	mov	r5, r0
 800e796:	bb02      	cbnz	r2, 800e7da <_dtoa_r+0xa62>
 800e798:	4601      	mov	r1, r0
 800e79a:	ee18 0a10 	vmov	r0, s16
 800e79e:	f000 ff45 	bl	800f62c <__mcmp>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	9207      	str	r2, [sp, #28]
 800e7aa:	f000 fcb3 	bl	800f114 <_Bfree>
 800e7ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e7b2:	ea43 0102 	orr.w	r1, r3, r2
 800e7b6:	9b04      	ldr	r3, [sp, #16]
 800e7b8:	430b      	orrs	r3, r1
 800e7ba:	464d      	mov	r5, r9
 800e7bc:	d10f      	bne.n	800e7de <_dtoa_r+0xa66>
 800e7be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e7c2:	d02a      	beq.n	800e81a <_dtoa_r+0xaa2>
 800e7c4:	9b03      	ldr	r3, [sp, #12]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	dd02      	ble.n	800e7d0 <_dtoa_r+0xa58>
 800e7ca:	9b02      	ldr	r3, [sp, #8]
 800e7cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e7d0:	f88b a000 	strb.w	sl, [fp]
 800e7d4:	e775      	b.n	800e6c2 <_dtoa_r+0x94a>
 800e7d6:	4638      	mov	r0, r7
 800e7d8:	e7ba      	b.n	800e750 <_dtoa_r+0x9d8>
 800e7da:	2201      	movs	r2, #1
 800e7dc:	e7e2      	b.n	800e7a4 <_dtoa_r+0xa2c>
 800e7de:	9b03      	ldr	r3, [sp, #12]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	db04      	blt.n	800e7ee <_dtoa_r+0xa76>
 800e7e4:	9906      	ldr	r1, [sp, #24]
 800e7e6:	430b      	orrs	r3, r1
 800e7e8:	9904      	ldr	r1, [sp, #16]
 800e7ea:	430b      	orrs	r3, r1
 800e7ec:	d122      	bne.n	800e834 <_dtoa_r+0xabc>
 800e7ee:	2a00      	cmp	r2, #0
 800e7f0:	ddee      	ble.n	800e7d0 <_dtoa_r+0xa58>
 800e7f2:	ee18 1a10 	vmov	r1, s16
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f000 fea7 	bl	800f54c <__lshift>
 800e7fe:	4631      	mov	r1, r6
 800e800:	ee08 0a10 	vmov	s16, r0
 800e804:	f000 ff12 	bl	800f62c <__mcmp>
 800e808:	2800      	cmp	r0, #0
 800e80a:	dc03      	bgt.n	800e814 <_dtoa_r+0xa9c>
 800e80c:	d1e0      	bne.n	800e7d0 <_dtoa_r+0xa58>
 800e80e:	f01a 0f01 	tst.w	sl, #1
 800e812:	d0dd      	beq.n	800e7d0 <_dtoa_r+0xa58>
 800e814:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e818:	d1d7      	bne.n	800e7ca <_dtoa_r+0xa52>
 800e81a:	2339      	movs	r3, #57	; 0x39
 800e81c:	f88b 3000 	strb.w	r3, [fp]
 800e820:	462b      	mov	r3, r5
 800e822:	461d      	mov	r5, r3
 800e824:	3b01      	subs	r3, #1
 800e826:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e82a:	2a39      	cmp	r2, #57	; 0x39
 800e82c:	d071      	beq.n	800e912 <_dtoa_r+0xb9a>
 800e82e:	3201      	adds	r2, #1
 800e830:	701a      	strb	r2, [r3, #0]
 800e832:	e746      	b.n	800e6c2 <_dtoa_r+0x94a>
 800e834:	2a00      	cmp	r2, #0
 800e836:	dd07      	ble.n	800e848 <_dtoa_r+0xad0>
 800e838:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e83c:	d0ed      	beq.n	800e81a <_dtoa_r+0xaa2>
 800e83e:	f10a 0301 	add.w	r3, sl, #1
 800e842:	f88b 3000 	strb.w	r3, [fp]
 800e846:	e73c      	b.n	800e6c2 <_dtoa_r+0x94a>
 800e848:	9b05      	ldr	r3, [sp, #20]
 800e84a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e84e:	4599      	cmp	r9, r3
 800e850:	d047      	beq.n	800e8e2 <_dtoa_r+0xb6a>
 800e852:	ee18 1a10 	vmov	r1, s16
 800e856:	2300      	movs	r3, #0
 800e858:	220a      	movs	r2, #10
 800e85a:	4620      	mov	r0, r4
 800e85c:	f000 fc7c 	bl	800f158 <__multadd>
 800e860:	45b8      	cmp	r8, r7
 800e862:	ee08 0a10 	vmov	s16, r0
 800e866:	f04f 0300 	mov.w	r3, #0
 800e86a:	f04f 020a 	mov.w	r2, #10
 800e86e:	4641      	mov	r1, r8
 800e870:	4620      	mov	r0, r4
 800e872:	d106      	bne.n	800e882 <_dtoa_r+0xb0a>
 800e874:	f000 fc70 	bl	800f158 <__multadd>
 800e878:	4680      	mov	r8, r0
 800e87a:	4607      	mov	r7, r0
 800e87c:	f109 0901 	add.w	r9, r9, #1
 800e880:	e772      	b.n	800e768 <_dtoa_r+0x9f0>
 800e882:	f000 fc69 	bl	800f158 <__multadd>
 800e886:	4639      	mov	r1, r7
 800e888:	4680      	mov	r8, r0
 800e88a:	2300      	movs	r3, #0
 800e88c:	220a      	movs	r2, #10
 800e88e:	4620      	mov	r0, r4
 800e890:	f000 fc62 	bl	800f158 <__multadd>
 800e894:	4607      	mov	r7, r0
 800e896:	e7f1      	b.n	800e87c <_dtoa_r+0xb04>
 800e898:	9b03      	ldr	r3, [sp, #12]
 800e89a:	9302      	str	r3, [sp, #8]
 800e89c:	9d01      	ldr	r5, [sp, #4]
 800e89e:	ee18 0a10 	vmov	r0, s16
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	f7ff f9dc 	bl	800dc60 <quorem>
 800e8a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8ac:	9b01      	ldr	r3, [sp, #4]
 800e8ae:	f805 ab01 	strb.w	sl, [r5], #1
 800e8b2:	1aea      	subs	r2, r5, r3
 800e8b4:	9b02      	ldr	r3, [sp, #8]
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	dd09      	ble.n	800e8ce <_dtoa_r+0xb56>
 800e8ba:	ee18 1a10 	vmov	r1, s16
 800e8be:	2300      	movs	r3, #0
 800e8c0:	220a      	movs	r2, #10
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	f000 fc48 	bl	800f158 <__multadd>
 800e8c8:	ee08 0a10 	vmov	s16, r0
 800e8cc:	e7e7      	b.n	800e89e <_dtoa_r+0xb26>
 800e8ce:	9b02      	ldr	r3, [sp, #8]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	bfc8      	it	gt
 800e8d4:	461d      	movgt	r5, r3
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	bfd8      	it	le
 800e8da:	2501      	movle	r5, #1
 800e8dc:	441d      	add	r5, r3
 800e8de:	f04f 0800 	mov.w	r8, #0
 800e8e2:	ee18 1a10 	vmov	r1, s16
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	f000 fe2f 	bl	800f54c <__lshift>
 800e8ee:	4631      	mov	r1, r6
 800e8f0:	ee08 0a10 	vmov	s16, r0
 800e8f4:	f000 fe9a 	bl	800f62c <__mcmp>
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	dc91      	bgt.n	800e820 <_dtoa_r+0xaa8>
 800e8fc:	d102      	bne.n	800e904 <_dtoa_r+0xb8c>
 800e8fe:	f01a 0f01 	tst.w	sl, #1
 800e902:	d18d      	bne.n	800e820 <_dtoa_r+0xaa8>
 800e904:	462b      	mov	r3, r5
 800e906:	461d      	mov	r5, r3
 800e908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e90c:	2a30      	cmp	r2, #48	; 0x30
 800e90e:	d0fa      	beq.n	800e906 <_dtoa_r+0xb8e>
 800e910:	e6d7      	b.n	800e6c2 <_dtoa_r+0x94a>
 800e912:	9a01      	ldr	r2, [sp, #4]
 800e914:	429a      	cmp	r2, r3
 800e916:	d184      	bne.n	800e822 <_dtoa_r+0xaaa>
 800e918:	9b00      	ldr	r3, [sp, #0]
 800e91a:	3301      	adds	r3, #1
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	2331      	movs	r3, #49	; 0x31
 800e920:	7013      	strb	r3, [r2, #0]
 800e922:	e6ce      	b.n	800e6c2 <_dtoa_r+0x94a>
 800e924:	4b09      	ldr	r3, [pc, #36]	; (800e94c <_dtoa_r+0xbd4>)
 800e926:	f7ff ba95 	b.w	800de54 <_dtoa_r+0xdc>
 800e92a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f47f aa6e 	bne.w	800de0e <_dtoa_r+0x96>
 800e932:	4b07      	ldr	r3, [pc, #28]	; (800e950 <_dtoa_r+0xbd8>)
 800e934:	f7ff ba8e 	b.w	800de54 <_dtoa_r+0xdc>
 800e938:	9b02      	ldr	r3, [sp, #8]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dcae      	bgt.n	800e89c <_dtoa_r+0xb24>
 800e93e:	9b06      	ldr	r3, [sp, #24]
 800e940:	2b02      	cmp	r3, #2
 800e942:	f73f aea8 	bgt.w	800e696 <_dtoa_r+0x91e>
 800e946:	e7a9      	b.n	800e89c <_dtoa_r+0xb24>
 800e948:	08011510 	.word	0x08011510
 800e94c:	08011384 	.word	0x08011384
 800e950:	080114a8 	.word	0x080114a8

0800e954 <fiprintf>:
 800e954:	b40e      	push	{r1, r2, r3}
 800e956:	b503      	push	{r0, r1, lr}
 800e958:	4601      	mov	r1, r0
 800e95a:	ab03      	add	r3, sp, #12
 800e95c:	4805      	ldr	r0, [pc, #20]	; (800e974 <fiprintf+0x20>)
 800e95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e962:	6800      	ldr	r0, [r0, #0]
 800e964:	9301      	str	r3, [sp, #4]
 800e966:	f001 fad3 	bl	800ff10 <_vfiprintf_r>
 800e96a:	b002      	add	sp, #8
 800e96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e970:	b003      	add	sp, #12
 800e972:	4770      	bx	lr
 800e974:	2000000c 	.word	0x2000000c

0800e978 <rshift>:
 800e978:	6903      	ldr	r3, [r0, #16]
 800e97a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e97e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e982:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e986:	f100 0414 	add.w	r4, r0, #20
 800e98a:	dd45      	ble.n	800ea18 <rshift+0xa0>
 800e98c:	f011 011f 	ands.w	r1, r1, #31
 800e990:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e994:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e998:	d10c      	bne.n	800e9b4 <rshift+0x3c>
 800e99a:	f100 0710 	add.w	r7, r0, #16
 800e99e:	4629      	mov	r1, r5
 800e9a0:	42b1      	cmp	r1, r6
 800e9a2:	d334      	bcc.n	800ea0e <rshift+0x96>
 800e9a4:	1a9b      	subs	r3, r3, r2
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	1eea      	subs	r2, r5, #3
 800e9aa:	4296      	cmp	r6, r2
 800e9ac:	bf38      	it	cc
 800e9ae:	2300      	movcc	r3, #0
 800e9b0:	4423      	add	r3, r4
 800e9b2:	e015      	b.n	800e9e0 <rshift+0x68>
 800e9b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e9b8:	f1c1 0820 	rsb	r8, r1, #32
 800e9bc:	40cf      	lsrs	r7, r1
 800e9be:	f105 0e04 	add.w	lr, r5, #4
 800e9c2:	46a1      	mov	r9, r4
 800e9c4:	4576      	cmp	r6, lr
 800e9c6:	46f4      	mov	ip, lr
 800e9c8:	d815      	bhi.n	800e9f6 <rshift+0x7e>
 800e9ca:	1a9a      	subs	r2, r3, r2
 800e9cc:	0092      	lsls	r2, r2, #2
 800e9ce:	3a04      	subs	r2, #4
 800e9d0:	3501      	adds	r5, #1
 800e9d2:	42ae      	cmp	r6, r5
 800e9d4:	bf38      	it	cc
 800e9d6:	2200      	movcc	r2, #0
 800e9d8:	18a3      	adds	r3, r4, r2
 800e9da:	50a7      	str	r7, [r4, r2]
 800e9dc:	b107      	cbz	r7, 800e9e0 <rshift+0x68>
 800e9de:	3304      	adds	r3, #4
 800e9e0:	1b1a      	subs	r2, r3, r4
 800e9e2:	42a3      	cmp	r3, r4
 800e9e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9e8:	bf08      	it	eq
 800e9ea:	2300      	moveq	r3, #0
 800e9ec:	6102      	str	r2, [r0, #16]
 800e9ee:	bf08      	it	eq
 800e9f0:	6143      	streq	r3, [r0, #20]
 800e9f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9f6:	f8dc c000 	ldr.w	ip, [ip]
 800e9fa:	fa0c fc08 	lsl.w	ip, ip, r8
 800e9fe:	ea4c 0707 	orr.w	r7, ip, r7
 800ea02:	f849 7b04 	str.w	r7, [r9], #4
 800ea06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ea0a:	40cf      	lsrs	r7, r1
 800ea0c:	e7da      	b.n	800e9c4 <rshift+0x4c>
 800ea0e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ea12:	f847 cf04 	str.w	ip, [r7, #4]!
 800ea16:	e7c3      	b.n	800e9a0 <rshift+0x28>
 800ea18:	4623      	mov	r3, r4
 800ea1a:	e7e1      	b.n	800e9e0 <rshift+0x68>

0800ea1c <__hexdig_fun>:
 800ea1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ea20:	2b09      	cmp	r3, #9
 800ea22:	d802      	bhi.n	800ea2a <__hexdig_fun+0xe>
 800ea24:	3820      	subs	r0, #32
 800ea26:	b2c0      	uxtb	r0, r0
 800ea28:	4770      	bx	lr
 800ea2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ea2e:	2b05      	cmp	r3, #5
 800ea30:	d801      	bhi.n	800ea36 <__hexdig_fun+0x1a>
 800ea32:	3847      	subs	r0, #71	; 0x47
 800ea34:	e7f7      	b.n	800ea26 <__hexdig_fun+0xa>
 800ea36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ea3a:	2b05      	cmp	r3, #5
 800ea3c:	d801      	bhi.n	800ea42 <__hexdig_fun+0x26>
 800ea3e:	3827      	subs	r0, #39	; 0x27
 800ea40:	e7f1      	b.n	800ea26 <__hexdig_fun+0xa>
 800ea42:	2000      	movs	r0, #0
 800ea44:	4770      	bx	lr
	...

0800ea48 <__gethex>:
 800ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4c:	ed2d 8b02 	vpush	{d8}
 800ea50:	b089      	sub	sp, #36	; 0x24
 800ea52:	ee08 0a10 	vmov	s16, r0
 800ea56:	9304      	str	r3, [sp, #16]
 800ea58:	4bb4      	ldr	r3, [pc, #720]	; (800ed2c <__gethex+0x2e4>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	4618      	mov	r0, r3
 800ea60:	468b      	mov	fp, r1
 800ea62:	4690      	mov	r8, r2
 800ea64:	f7f1 fbb4 	bl	80001d0 <strlen>
 800ea68:	9b01      	ldr	r3, [sp, #4]
 800ea6a:	f8db 2000 	ldr.w	r2, [fp]
 800ea6e:	4403      	add	r3, r0
 800ea70:	4682      	mov	sl, r0
 800ea72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ea76:	9305      	str	r3, [sp, #20]
 800ea78:	1c93      	adds	r3, r2, #2
 800ea7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ea7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ea82:	32fe      	adds	r2, #254	; 0xfe
 800ea84:	18d1      	adds	r1, r2, r3
 800ea86:	461f      	mov	r7, r3
 800ea88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea8c:	9100      	str	r1, [sp, #0]
 800ea8e:	2830      	cmp	r0, #48	; 0x30
 800ea90:	d0f8      	beq.n	800ea84 <__gethex+0x3c>
 800ea92:	f7ff ffc3 	bl	800ea1c <__hexdig_fun>
 800ea96:	4604      	mov	r4, r0
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d13a      	bne.n	800eb12 <__gethex+0xca>
 800ea9c:	9901      	ldr	r1, [sp, #4]
 800ea9e:	4652      	mov	r2, sl
 800eaa0:	4638      	mov	r0, r7
 800eaa2:	f001 fb7d 	bl	80101a0 <strncmp>
 800eaa6:	4605      	mov	r5, r0
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	d168      	bne.n	800eb7e <__gethex+0x136>
 800eaac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eab0:	eb07 060a 	add.w	r6, r7, sl
 800eab4:	f7ff ffb2 	bl	800ea1c <__hexdig_fun>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d062      	beq.n	800eb82 <__gethex+0x13a>
 800eabc:	4633      	mov	r3, r6
 800eabe:	7818      	ldrb	r0, [r3, #0]
 800eac0:	2830      	cmp	r0, #48	; 0x30
 800eac2:	461f      	mov	r7, r3
 800eac4:	f103 0301 	add.w	r3, r3, #1
 800eac8:	d0f9      	beq.n	800eabe <__gethex+0x76>
 800eaca:	f7ff ffa7 	bl	800ea1c <__hexdig_fun>
 800eace:	2301      	movs	r3, #1
 800ead0:	fab0 f480 	clz	r4, r0
 800ead4:	0964      	lsrs	r4, r4, #5
 800ead6:	4635      	mov	r5, r6
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	463a      	mov	r2, r7
 800eadc:	4616      	mov	r6, r2
 800eade:	3201      	adds	r2, #1
 800eae0:	7830      	ldrb	r0, [r6, #0]
 800eae2:	f7ff ff9b 	bl	800ea1c <__hexdig_fun>
 800eae6:	2800      	cmp	r0, #0
 800eae8:	d1f8      	bne.n	800eadc <__gethex+0x94>
 800eaea:	9901      	ldr	r1, [sp, #4]
 800eaec:	4652      	mov	r2, sl
 800eaee:	4630      	mov	r0, r6
 800eaf0:	f001 fb56 	bl	80101a0 <strncmp>
 800eaf4:	b980      	cbnz	r0, 800eb18 <__gethex+0xd0>
 800eaf6:	b94d      	cbnz	r5, 800eb0c <__gethex+0xc4>
 800eaf8:	eb06 050a 	add.w	r5, r6, sl
 800eafc:	462a      	mov	r2, r5
 800eafe:	4616      	mov	r6, r2
 800eb00:	3201      	adds	r2, #1
 800eb02:	7830      	ldrb	r0, [r6, #0]
 800eb04:	f7ff ff8a 	bl	800ea1c <__hexdig_fun>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d1f8      	bne.n	800eafe <__gethex+0xb6>
 800eb0c:	1bad      	subs	r5, r5, r6
 800eb0e:	00ad      	lsls	r5, r5, #2
 800eb10:	e004      	b.n	800eb1c <__gethex+0xd4>
 800eb12:	2400      	movs	r4, #0
 800eb14:	4625      	mov	r5, r4
 800eb16:	e7e0      	b.n	800eada <__gethex+0x92>
 800eb18:	2d00      	cmp	r5, #0
 800eb1a:	d1f7      	bne.n	800eb0c <__gethex+0xc4>
 800eb1c:	7833      	ldrb	r3, [r6, #0]
 800eb1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eb22:	2b50      	cmp	r3, #80	; 0x50
 800eb24:	d13b      	bne.n	800eb9e <__gethex+0x156>
 800eb26:	7873      	ldrb	r3, [r6, #1]
 800eb28:	2b2b      	cmp	r3, #43	; 0x2b
 800eb2a:	d02c      	beq.n	800eb86 <__gethex+0x13e>
 800eb2c:	2b2d      	cmp	r3, #45	; 0x2d
 800eb2e:	d02e      	beq.n	800eb8e <__gethex+0x146>
 800eb30:	1c71      	adds	r1, r6, #1
 800eb32:	f04f 0900 	mov.w	r9, #0
 800eb36:	7808      	ldrb	r0, [r1, #0]
 800eb38:	f7ff ff70 	bl	800ea1c <__hexdig_fun>
 800eb3c:	1e43      	subs	r3, r0, #1
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b18      	cmp	r3, #24
 800eb42:	d82c      	bhi.n	800eb9e <__gethex+0x156>
 800eb44:	f1a0 0210 	sub.w	r2, r0, #16
 800eb48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eb4c:	f7ff ff66 	bl	800ea1c <__hexdig_fun>
 800eb50:	1e43      	subs	r3, r0, #1
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	2b18      	cmp	r3, #24
 800eb56:	d91d      	bls.n	800eb94 <__gethex+0x14c>
 800eb58:	f1b9 0f00 	cmp.w	r9, #0
 800eb5c:	d000      	beq.n	800eb60 <__gethex+0x118>
 800eb5e:	4252      	negs	r2, r2
 800eb60:	4415      	add	r5, r2
 800eb62:	f8cb 1000 	str.w	r1, [fp]
 800eb66:	b1e4      	cbz	r4, 800eba2 <__gethex+0x15a>
 800eb68:	9b00      	ldr	r3, [sp, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	bf14      	ite	ne
 800eb6e:	2700      	movne	r7, #0
 800eb70:	2706      	moveq	r7, #6
 800eb72:	4638      	mov	r0, r7
 800eb74:	b009      	add	sp, #36	; 0x24
 800eb76:	ecbd 8b02 	vpop	{d8}
 800eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb7e:	463e      	mov	r6, r7
 800eb80:	4625      	mov	r5, r4
 800eb82:	2401      	movs	r4, #1
 800eb84:	e7ca      	b.n	800eb1c <__gethex+0xd4>
 800eb86:	f04f 0900 	mov.w	r9, #0
 800eb8a:	1cb1      	adds	r1, r6, #2
 800eb8c:	e7d3      	b.n	800eb36 <__gethex+0xee>
 800eb8e:	f04f 0901 	mov.w	r9, #1
 800eb92:	e7fa      	b.n	800eb8a <__gethex+0x142>
 800eb94:	230a      	movs	r3, #10
 800eb96:	fb03 0202 	mla	r2, r3, r2, r0
 800eb9a:	3a10      	subs	r2, #16
 800eb9c:	e7d4      	b.n	800eb48 <__gethex+0x100>
 800eb9e:	4631      	mov	r1, r6
 800eba0:	e7df      	b.n	800eb62 <__gethex+0x11a>
 800eba2:	1bf3      	subs	r3, r6, r7
 800eba4:	3b01      	subs	r3, #1
 800eba6:	4621      	mov	r1, r4
 800eba8:	2b07      	cmp	r3, #7
 800ebaa:	dc0b      	bgt.n	800ebc4 <__gethex+0x17c>
 800ebac:	ee18 0a10 	vmov	r0, s16
 800ebb0:	f000 fa70 	bl	800f094 <_Balloc>
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	b940      	cbnz	r0, 800ebca <__gethex+0x182>
 800ebb8:	4b5d      	ldr	r3, [pc, #372]	; (800ed30 <__gethex+0x2e8>)
 800ebba:	4602      	mov	r2, r0
 800ebbc:	21de      	movs	r1, #222	; 0xde
 800ebbe:	485d      	ldr	r0, [pc, #372]	; (800ed34 <__gethex+0x2ec>)
 800ebc0:	f7ff f830 	bl	800dc24 <__assert_func>
 800ebc4:	3101      	adds	r1, #1
 800ebc6:	105b      	asrs	r3, r3, #1
 800ebc8:	e7ee      	b.n	800eba8 <__gethex+0x160>
 800ebca:	f100 0914 	add.w	r9, r0, #20
 800ebce:	f04f 0b00 	mov.w	fp, #0
 800ebd2:	f1ca 0301 	rsb	r3, sl, #1
 800ebd6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ebda:	f8cd b000 	str.w	fp, [sp]
 800ebde:	9306      	str	r3, [sp, #24]
 800ebe0:	42b7      	cmp	r7, r6
 800ebe2:	d340      	bcc.n	800ec66 <__gethex+0x21e>
 800ebe4:	9802      	ldr	r0, [sp, #8]
 800ebe6:	9b00      	ldr	r3, [sp, #0]
 800ebe8:	f840 3b04 	str.w	r3, [r0], #4
 800ebec:	eba0 0009 	sub.w	r0, r0, r9
 800ebf0:	1080      	asrs	r0, r0, #2
 800ebf2:	0146      	lsls	r6, r0, #5
 800ebf4:	6120      	str	r0, [r4, #16]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 fb3e 	bl	800f278 <__hi0bits>
 800ebfc:	1a30      	subs	r0, r6, r0
 800ebfe:	f8d8 6000 	ldr.w	r6, [r8]
 800ec02:	42b0      	cmp	r0, r6
 800ec04:	dd63      	ble.n	800ecce <__gethex+0x286>
 800ec06:	1b87      	subs	r7, r0, r6
 800ec08:	4639      	mov	r1, r7
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f000 fee2 	bl	800f9d4 <__any_on>
 800ec10:	4682      	mov	sl, r0
 800ec12:	b1a8      	cbz	r0, 800ec40 <__gethex+0x1f8>
 800ec14:	1e7b      	subs	r3, r7, #1
 800ec16:	1159      	asrs	r1, r3, #5
 800ec18:	f003 021f 	and.w	r2, r3, #31
 800ec1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ec20:	f04f 0a01 	mov.w	sl, #1
 800ec24:	fa0a f202 	lsl.w	r2, sl, r2
 800ec28:	420a      	tst	r2, r1
 800ec2a:	d009      	beq.n	800ec40 <__gethex+0x1f8>
 800ec2c:	4553      	cmp	r3, sl
 800ec2e:	dd05      	ble.n	800ec3c <__gethex+0x1f4>
 800ec30:	1eb9      	subs	r1, r7, #2
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 fece 	bl	800f9d4 <__any_on>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	d145      	bne.n	800ecc8 <__gethex+0x280>
 800ec3c:	f04f 0a02 	mov.w	sl, #2
 800ec40:	4639      	mov	r1, r7
 800ec42:	4620      	mov	r0, r4
 800ec44:	f7ff fe98 	bl	800e978 <rshift>
 800ec48:	443d      	add	r5, r7
 800ec4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec4e:	42ab      	cmp	r3, r5
 800ec50:	da4c      	bge.n	800ecec <__gethex+0x2a4>
 800ec52:	ee18 0a10 	vmov	r0, s16
 800ec56:	4621      	mov	r1, r4
 800ec58:	f000 fa5c 	bl	800f114 <_Bfree>
 800ec5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ec5e:	2300      	movs	r3, #0
 800ec60:	6013      	str	r3, [r2, #0]
 800ec62:	27a3      	movs	r7, #163	; 0xa3
 800ec64:	e785      	b.n	800eb72 <__gethex+0x12a>
 800ec66:	1e73      	subs	r3, r6, #1
 800ec68:	9a05      	ldr	r2, [sp, #20]
 800ec6a:	9303      	str	r3, [sp, #12]
 800ec6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ec70:	4293      	cmp	r3, r2
 800ec72:	d019      	beq.n	800eca8 <__gethex+0x260>
 800ec74:	f1bb 0f20 	cmp.w	fp, #32
 800ec78:	d107      	bne.n	800ec8a <__gethex+0x242>
 800ec7a:	9b02      	ldr	r3, [sp, #8]
 800ec7c:	9a00      	ldr	r2, [sp, #0]
 800ec7e:	f843 2b04 	str.w	r2, [r3], #4
 800ec82:	9302      	str	r3, [sp, #8]
 800ec84:	2300      	movs	r3, #0
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	469b      	mov	fp, r3
 800ec8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ec8e:	f7ff fec5 	bl	800ea1c <__hexdig_fun>
 800ec92:	9b00      	ldr	r3, [sp, #0]
 800ec94:	f000 000f 	and.w	r0, r0, #15
 800ec98:	fa00 f00b 	lsl.w	r0, r0, fp
 800ec9c:	4303      	orrs	r3, r0
 800ec9e:	9300      	str	r3, [sp, #0]
 800eca0:	f10b 0b04 	add.w	fp, fp, #4
 800eca4:	9b03      	ldr	r3, [sp, #12]
 800eca6:	e00d      	b.n	800ecc4 <__gethex+0x27c>
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	9a06      	ldr	r2, [sp, #24]
 800ecac:	4413      	add	r3, r2
 800ecae:	42bb      	cmp	r3, r7
 800ecb0:	d3e0      	bcc.n	800ec74 <__gethex+0x22c>
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	9901      	ldr	r1, [sp, #4]
 800ecb6:	9307      	str	r3, [sp, #28]
 800ecb8:	4652      	mov	r2, sl
 800ecba:	f001 fa71 	bl	80101a0 <strncmp>
 800ecbe:	9b07      	ldr	r3, [sp, #28]
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d1d7      	bne.n	800ec74 <__gethex+0x22c>
 800ecc4:	461e      	mov	r6, r3
 800ecc6:	e78b      	b.n	800ebe0 <__gethex+0x198>
 800ecc8:	f04f 0a03 	mov.w	sl, #3
 800eccc:	e7b8      	b.n	800ec40 <__gethex+0x1f8>
 800ecce:	da0a      	bge.n	800ece6 <__gethex+0x29e>
 800ecd0:	1a37      	subs	r7, r6, r0
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	ee18 0a10 	vmov	r0, s16
 800ecd8:	463a      	mov	r2, r7
 800ecda:	f000 fc37 	bl	800f54c <__lshift>
 800ecde:	1bed      	subs	r5, r5, r7
 800ece0:	4604      	mov	r4, r0
 800ece2:	f100 0914 	add.w	r9, r0, #20
 800ece6:	f04f 0a00 	mov.w	sl, #0
 800ecea:	e7ae      	b.n	800ec4a <__gethex+0x202>
 800ecec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ecf0:	42a8      	cmp	r0, r5
 800ecf2:	dd72      	ble.n	800edda <__gethex+0x392>
 800ecf4:	1b45      	subs	r5, r0, r5
 800ecf6:	42ae      	cmp	r6, r5
 800ecf8:	dc36      	bgt.n	800ed68 <__gethex+0x320>
 800ecfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d02a      	beq.n	800ed58 <__gethex+0x310>
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d02c      	beq.n	800ed60 <__gethex+0x318>
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d11c      	bne.n	800ed44 <__gethex+0x2fc>
 800ed0a:	42ae      	cmp	r6, r5
 800ed0c:	d11a      	bne.n	800ed44 <__gethex+0x2fc>
 800ed0e:	2e01      	cmp	r6, #1
 800ed10:	d112      	bne.n	800ed38 <__gethex+0x2f0>
 800ed12:	9a04      	ldr	r2, [sp, #16]
 800ed14:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ed18:	6013      	str	r3, [r2, #0]
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	6123      	str	r3, [r4, #16]
 800ed1e:	f8c9 3000 	str.w	r3, [r9]
 800ed22:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ed24:	2762      	movs	r7, #98	; 0x62
 800ed26:	601c      	str	r4, [r3, #0]
 800ed28:	e723      	b.n	800eb72 <__gethex+0x12a>
 800ed2a:	bf00      	nop
 800ed2c:	08011588 	.word	0x08011588
 800ed30:	08011510 	.word	0x08011510
 800ed34:	08011521 	.word	0x08011521
 800ed38:	1e71      	subs	r1, r6, #1
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	f000 fe4a 	bl	800f9d4 <__any_on>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d1e6      	bne.n	800ed12 <__gethex+0x2ca>
 800ed44:	ee18 0a10 	vmov	r0, s16
 800ed48:	4621      	mov	r1, r4
 800ed4a:	f000 f9e3 	bl	800f114 <_Bfree>
 800ed4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed50:	2300      	movs	r3, #0
 800ed52:	6013      	str	r3, [r2, #0]
 800ed54:	2750      	movs	r7, #80	; 0x50
 800ed56:	e70c      	b.n	800eb72 <__gethex+0x12a>
 800ed58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d1f2      	bne.n	800ed44 <__gethex+0x2fc>
 800ed5e:	e7d8      	b.n	800ed12 <__gethex+0x2ca>
 800ed60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d1d5      	bne.n	800ed12 <__gethex+0x2ca>
 800ed66:	e7ed      	b.n	800ed44 <__gethex+0x2fc>
 800ed68:	1e6f      	subs	r7, r5, #1
 800ed6a:	f1ba 0f00 	cmp.w	sl, #0
 800ed6e:	d131      	bne.n	800edd4 <__gethex+0x38c>
 800ed70:	b127      	cbz	r7, 800ed7c <__gethex+0x334>
 800ed72:	4639      	mov	r1, r7
 800ed74:	4620      	mov	r0, r4
 800ed76:	f000 fe2d 	bl	800f9d4 <__any_on>
 800ed7a:	4682      	mov	sl, r0
 800ed7c:	117b      	asrs	r3, r7, #5
 800ed7e:	2101      	movs	r1, #1
 800ed80:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ed84:	f007 071f 	and.w	r7, r7, #31
 800ed88:	fa01 f707 	lsl.w	r7, r1, r7
 800ed8c:	421f      	tst	r7, r3
 800ed8e:	4629      	mov	r1, r5
 800ed90:	4620      	mov	r0, r4
 800ed92:	bf18      	it	ne
 800ed94:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed98:	1b76      	subs	r6, r6, r5
 800ed9a:	f7ff fded 	bl	800e978 <rshift>
 800ed9e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eda2:	2702      	movs	r7, #2
 800eda4:	f1ba 0f00 	cmp.w	sl, #0
 800eda8:	d048      	beq.n	800ee3c <__gethex+0x3f4>
 800edaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d015      	beq.n	800edde <__gethex+0x396>
 800edb2:	2b03      	cmp	r3, #3
 800edb4:	d017      	beq.n	800ede6 <__gethex+0x39e>
 800edb6:	2b01      	cmp	r3, #1
 800edb8:	d109      	bne.n	800edce <__gethex+0x386>
 800edba:	f01a 0f02 	tst.w	sl, #2
 800edbe:	d006      	beq.n	800edce <__gethex+0x386>
 800edc0:	f8d9 0000 	ldr.w	r0, [r9]
 800edc4:	ea4a 0a00 	orr.w	sl, sl, r0
 800edc8:	f01a 0f01 	tst.w	sl, #1
 800edcc:	d10e      	bne.n	800edec <__gethex+0x3a4>
 800edce:	f047 0710 	orr.w	r7, r7, #16
 800edd2:	e033      	b.n	800ee3c <__gethex+0x3f4>
 800edd4:	f04f 0a01 	mov.w	sl, #1
 800edd8:	e7d0      	b.n	800ed7c <__gethex+0x334>
 800edda:	2701      	movs	r7, #1
 800eddc:	e7e2      	b.n	800eda4 <__gethex+0x35c>
 800edde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ede0:	f1c3 0301 	rsb	r3, r3, #1
 800ede4:	9315      	str	r3, [sp, #84]	; 0x54
 800ede6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d0f0      	beq.n	800edce <__gethex+0x386>
 800edec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800edf0:	f104 0314 	add.w	r3, r4, #20
 800edf4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800edf8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800edfc:	f04f 0c00 	mov.w	ip, #0
 800ee00:	4618      	mov	r0, r3
 800ee02:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee06:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ee0a:	d01c      	beq.n	800ee46 <__gethex+0x3fe>
 800ee0c:	3201      	adds	r2, #1
 800ee0e:	6002      	str	r2, [r0, #0]
 800ee10:	2f02      	cmp	r7, #2
 800ee12:	f104 0314 	add.w	r3, r4, #20
 800ee16:	d13f      	bne.n	800ee98 <__gethex+0x450>
 800ee18:	f8d8 2000 	ldr.w	r2, [r8]
 800ee1c:	3a01      	subs	r2, #1
 800ee1e:	42b2      	cmp	r2, r6
 800ee20:	d10a      	bne.n	800ee38 <__gethex+0x3f0>
 800ee22:	1171      	asrs	r1, r6, #5
 800ee24:	2201      	movs	r2, #1
 800ee26:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ee2a:	f006 061f 	and.w	r6, r6, #31
 800ee2e:	fa02 f606 	lsl.w	r6, r2, r6
 800ee32:	421e      	tst	r6, r3
 800ee34:	bf18      	it	ne
 800ee36:	4617      	movne	r7, r2
 800ee38:	f047 0720 	orr.w	r7, r7, #32
 800ee3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee3e:	601c      	str	r4, [r3, #0]
 800ee40:	9b04      	ldr	r3, [sp, #16]
 800ee42:	601d      	str	r5, [r3, #0]
 800ee44:	e695      	b.n	800eb72 <__gethex+0x12a>
 800ee46:	4299      	cmp	r1, r3
 800ee48:	f843 cc04 	str.w	ip, [r3, #-4]
 800ee4c:	d8d8      	bhi.n	800ee00 <__gethex+0x3b8>
 800ee4e:	68a3      	ldr	r3, [r4, #8]
 800ee50:	459b      	cmp	fp, r3
 800ee52:	db19      	blt.n	800ee88 <__gethex+0x440>
 800ee54:	6861      	ldr	r1, [r4, #4]
 800ee56:	ee18 0a10 	vmov	r0, s16
 800ee5a:	3101      	adds	r1, #1
 800ee5c:	f000 f91a 	bl	800f094 <_Balloc>
 800ee60:	4681      	mov	r9, r0
 800ee62:	b918      	cbnz	r0, 800ee6c <__gethex+0x424>
 800ee64:	4b1a      	ldr	r3, [pc, #104]	; (800eed0 <__gethex+0x488>)
 800ee66:	4602      	mov	r2, r0
 800ee68:	2184      	movs	r1, #132	; 0x84
 800ee6a:	e6a8      	b.n	800ebbe <__gethex+0x176>
 800ee6c:	6922      	ldr	r2, [r4, #16]
 800ee6e:	3202      	adds	r2, #2
 800ee70:	f104 010c 	add.w	r1, r4, #12
 800ee74:	0092      	lsls	r2, r2, #2
 800ee76:	300c      	adds	r0, #12
 800ee78:	f7fd fb9a 	bl	800c5b0 <memcpy>
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	ee18 0a10 	vmov	r0, s16
 800ee82:	f000 f947 	bl	800f114 <_Bfree>
 800ee86:	464c      	mov	r4, r9
 800ee88:	6923      	ldr	r3, [r4, #16]
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee90:	6122      	str	r2, [r4, #16]
 800ee92:	2201      	movs	r2, #1
 800ee94:	615a      	str	r2, [r3, #20]
 800ee96:	e7bb      	b.n	800ee10 <__gethex+0x3c8>
 800ee98:	6922      	ldr	r2, [r4, #16]
 800ee9a:	455a      	cmp	r2, fp
 800ee9c:	dd0b      	ble.n	800eeb6 <__gethex+0x46e>
 800ee9e:	2101      	movs	r1, #1
 800eea0:	4620      	mov	r0, r4
 800eea2:	f7ff fd69 	bl	800e978 <rshift>
 800eea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeaa:	3501      	adds	r5, #1
 800eeac:	42ab      	cmp	r3, r5
 800eeae:	f6ff aed0 	blt.w	800ec52 <__gethex+0x20a>
 800eeb2:	2701      	movs	r7, #1
 800eeb4:	e7c0      	b.n	800ee38 <__gethex+0x3f0>
 800eeb6:	f016 061f 	ands.w	r6, r6, #31
 800eeba:	d0fa      	beq.n	800eeb2 <__gethex+0x46a>
 800eebc:	4453      	add	r3, sl
 800eebe:	f1c6 0620 	rsb	r6, r6, #32
 800eec2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800eec6:	f000 f9d7 	bl	800f278 <__hi0bits>
 800eeca:	42b0      	cmp	r0, r6
 800eecc:	dbe7      	blt.n	800ee9e <__gethex+0x456>
 800eece:	e7f0      	b.n	800eeb2 <__gethex+0x46a>
 800eed0:	08011510 	.word	0x08011510

0800eed4 <L_shift>:
 800eed4:	f1c2 0208 	rsb	r2, r2, #8
 800eed8:	0092      	lsls	r2, r2, #2
 800eeda:	b570      	push	{r4, r5, r6, lr}
 800eedc:	f1c2 0620 	rsb	r6, r2, #32
 800eee0:	6843      	ldr	r3, [r0, #4]
 800eee2:	6804      	ldr	r4, [r0, #0]
 800eee4:	fa03 f506 	lsl.w	r5, r3, r6
 800eee8:	432c      	orrs	r4, r5
 800eeea:	40d3      	lsrs	r3, r2
 800eeec:	6004      	str	r4, [r0, #0]
 800eeee:	f840 3f04 	str.w	r3, [r0, #4]!
 800eef2:	4288      	cmp	r0, r1
 800eef4:	d3f4      	bcc.n	800eee0 <L_shift+0xc>
 800eef6:	bd70      	pop	{r4, r5, r6, pc}

0800eef8 <__match>:
 800eef8:	b530      	push	{r4, r5, lr}
 800eefa:	6803      	ldr	r3, [r0, #0]
 800eefc:	3301      	adds	r3, #1
 800eefe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef02:	b914      	cbnz	r4, 800ef0a <__match+0x12>
 800ef04:	6003      	str	r3, [r0, #0]
 800ef06:	2001      	movs	r0, #1
 800ef08:	bd30      	pop	{r4, r5, pc}
 800ef0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ef12:	2d19      	cmp	r5, #25
 800ef14:	bf98      	it	ls
 800ef16:	3220      	addls	r2, #32
 800ef18:	42a2      	cmp	r2, r4
 800ef1a:	d0f0      	beq.n	800eefe <__match+0x6>
 800ef1c:	2000      	movs	r0, #0
 800ef1e:	e7f3      	b.n	800ef08 <__match+0x10>

0800ef20 <__hexnan>:
 800ef20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef24:	680b      	ldr	r3, [r1, #0]
 800ef26:	115e      	asrs	r6, r3, #5
 800ef28:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ef2c:	f013 031f 	ands.w	r3, r3, #31
 800ef30:	b087      	sub	sp, #28
 800ef32:	bf18      	it	ne
 800ef34:	3604      	addne	r6, #4
 800ef36:	2500      	movs	r5, #0
 800ef38:	1f37      	subs	r7, r6, #4
 800ef3a:	4690      	mov	r8, r2
 800ef3c:	6802      	ldr	r2, [r0, #0]
 800ef3e:	9301      	str	r3, [sp, #4]
 800ef40:	4682      	mov	sl, r0
 800ef42:	f846 5c04 	str.w	r5, [r6, #-4]
 800ef46:	46b9      	mov	r9, r7
 800ef48:	463c      	mov	r4, r7
 800ef4a:	9502      	str	r5, [sp, #8]
 800ef4c:	46ab      	mov	fp, r5
 800ef4e:	7851      	ldrb	r1, [r2, #1]
 800ef50:	1c53      	adds	r3, r2, #1
 800ef52:	9303      	str	r3, [sp, #12]
 800ef54:	b341      	cbz	r1, 800efa8 <__hexnan+0x88>
 800ef56:	4608      	mov	r0, r1
 800ef58:	9205      	str	r2, [sp, #20]
 800ef5a:	9104      	str	r1, [sp, #16]
 800ef5c:	f7ff fd5e 	bl	800ea1c <__hexdig_fun>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d14f      	bne.n	800f004 <__hexnan+0xe4>
 800ef64:	9904      	ldr	r1, [sp, #16]
 800ef66:	9a05      	ldr	r2, [sp, #20]
 800ef68:	2920      	cmp	r1, #32
 800ef6a:	d818      	bhi.n	800ef9e <__hexnan+0x7e>
 800ef6c:	9b02      	ldr	r3, [sp, #8]
 800ef6e:	459b      	cmp	fp, r3
 800ef70:	dd13      	ble.n	800ef9a <__hexnan+0x7a>
 800ef72:	454c      	cmp	r4, r9
 800ef74:	d206      	bcs.n	800ef84 <__hexnan+0x64>
 800ef76:	2d07      	cmp	r5, #7
 800ef78:	dc04      	bgt.n	800ef84 <__hexnan+0x64>
 800ef7a:	462a      	mov	r2, r5
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f7ff ffa8 	bl	800eed4 <L_shift>
 800ef84:	4544      	cmp	r4, r8
 800ef86:	d950      	bls.n	800f02a <__hexnan+0x10a>
 800ef88:	2300      	movs	r3, #0
 800ef8a:	f1a4 0904 	sub.w	r9, r4, #4
 800ef8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef92:	f8cd b008 	str.w	fp, [sp, #8]
 800ef96:	464c      	mov	r4, r9
 800ef98:	461d      	mov	r5, r3
 800ef9a:	9a03      	ldr	r2, [sp, #12]
 800ef9c:	e7d7      	b.n	800ef4e <__hexnan+0x2e>
 800ef9e:	2929      	cmp	r1, #41	; 0x29
 800efa0:	d156      	bne.n	800f050 <__hexnan+0x130>
 800efa2:	3202      	adds	r2, #2
 800efa4:	f8ca 2000 	str.w	r2, [sl]
 800efa8:	f1bb 0f00 	cmp.w	fp, #0
 800efac:	d050      	beq.n	800f050 <__hexnan+0x130>
 800efae:	454c      	cmp	r4, r9
 800efb0:	d206      	bcs.n	800efc0 <__hexnan+0xa0>
 800efb2:	2d07      	cmp	r5, #7
 800efb4:	dc04      	bgt.n	800efc0 <__hexnan+0xa0>
 800efb6:	462a      	mov	r2, r5
 800efb8:	4649      	mov	r1, r9
 800efba:	4620      	mov	r0, r4
 800efbc:	f7ff ff8a 	bl	800eed4 <L_shift>
 800efc0:	4544      	cmp	r4, r8
 800efc2:	d934      	bls.n	800f02e <__hexnan+0x10e>
 800efc4:	f1a8 0204 	sub.w	r2, r8, #4
 800efc8:	4623      	mov	r3, r4
 800efca:	f853 1b04 	ldr.w	r1, [r3], #4
 800efce:	f842 1f04 	str.w	r1, [r2, #4]!
 800efd2:	429f      	cmp	r7, r3
 800efd4:	d2f9      	bcs.n	800efca <__hexnan+0xaa>
 800efd6:	1b3b      	subs	r3, r7, r4
 800efd8:	f023 0303 	bic.w	r3, r3, #3
 800efdc:	3304      	adds	r3, #4
 800efde:	3401      	adds	r4, #1
 800efe0:	3e03      	subs	r6, #3
 800efe2:	42b4      	cmp	r4, r6
 800efe4:	bf88      	it	hi
 800efe6:	2304      	movhi	r3, #4
 800efe8:	4443      	add	r3, r8
 800efea:	2200      	movs	r2, #0
 800efec:	f843 2b04 	str.w	r2, [r3], #4
 800eff0:	429f      	cmp	r7, r3
 800eff2:	d2fb      	bcs.n	800efec <__hexnan+0xcc>
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	b91b      	cbnz	r3, 800f000 <__hexnan+0xe0>
 800eff8:	4547      	cmp	r7, r8
 800effa:	d127      	bne.n	800f04c <__hexnan+0x12c>
 800effc:	2301      	movs	r3, #1
 800effe:	603b      	str	r3, [r7, #0]
 800f000:	2005      	movs	r0, #5
 800f002:	e026      	b.n	800f052 <__hexnan+0x132>
 800f004:	3501      	adds	r5, #1
 800f006:	2d08      	cmp	r5, #8
 800f008:	f10b 0b01 	add.w	fp, fp, #1
 800f00c:	dd06      	ble.n	800f01c <__hexnan+0xfc>
 800f00e:	4544      	cmp	r4, r8
 800f010:	d9c3      	bls.n	800ef9a <__hexnan+0x7a>
 800f012:	2300      	movs	r3, #0
 800f014:	f844 3c04 	str.w	r3, [r4, #-4]
 800f018:	2501      	movs	r5, #1
 800f01a:	3c04      	subs	r4, #4
 800f01c:	6822      	ldr	r2, [r4, #0]
 800f01e:	f000 000f 	and.w	r0, r0, #15
 800f022:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f026:	6022      	str	r2, [r4, #0]
 800f028:	e7b7      	b.n	800ef9a <__hexnan+0x7a>
 800f02a:	2508      	movs	r5, #8
 800f02c:	e7b5      	b.n	800ef9a <__hexnan+0x7a>
 800f02e:	9b01      	ldr	r3, [sp, #4]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0df      	beq.n	800eff4 <__hexnan+0xd4>
 800f034:	f04f 32ff 	mov.w	r2, #4294967295
 800f038:	f1c3 0320 	rsb	r3, r3, #32
 800f03c:	fa22 f303 	lsr.w	r3, r2, r3
 800f040:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f044:	401a      	ands	r2, r3
 800f046:	f846 2c04 	str.w	r2, [r6, #-4]
 800f04a:	e7d3      	b.n	800eff4 <__hexnan+0xd4>
 800f04c:	3f04      	subs	r7, #4
 800f04e:	e7d1      	b.n	800eff4 <__hexnan+0xd4>
 800f050:	2004      	movs	r0, #4
 800f052:	b007      	add	sp, #28
 800f054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f058 <_localeconv_r>:
 800f058:	4800      	ldr	r0, [pc, #0]	; (800f05c <_localeconv_r+0x4>)
 800f05a:	4770      	bx	lr
 800f05c:	20000164 	.word	0x20000164

0800f060 <malloc>:
 800f060:	4b02      	ldr	r3, [pc, #8]	; (800f06c <malloc+0xc>)
 800f062:	4601      	mov	r1, r0
 800f064:	6818      	ldr	r0, [r3, #0]
 800f066:	f000 bd59 	b.w	800fb1c <_malloc_r>
 800f06a:	bf00      	nop
 800f06c:	2000000c 	.word	0x2000000c

0800f070 <__ascii_mbtowc>:
 800f070:	b082      	sub	sp, #8
 800f072:	b901      	cbnz	r1, 800f076 <__ascii_mbtowc+0x6>
 800f074:	a901      	add	r1, sp, #4
 800f076:	b142      	cbz	r2, 800f08a <__ascii_mbtowc+0x1a>
 800f078:	b14b      	cbz	r3, 800f08e <__ascii_mbtowc+0x1e>
 800f07a:	7813      	ldrb	r3, [r2, #0]
 800f07c:	600b      	str	r3, [r1, #0]
 800f07e:	7812      	ldrb	r2, [r2, #0]
 800f080:	1e10      	subs	r0, r2, #0
 800f082:	bf18      	it	ne
 800f084:	2001      	movne	r0, #1
 800f086:	b002      	add	sp, #8
 800f088:	4770      	bx	lr
 800f08a:	4610      	mov	r0, r2
 800f08c:	e7fb      	b.n	800f086 <__ascii_mbtowc+0x16>
 800f08e:	f06f 0001 	mvn.w	r0, #1
 800f092:	e7f8      	b.n	800f086 <__ascii_mbtowc+0x16>

0800f094 <_Balloc>:
 800f094:	b570      	push	{r4, r5, r6, lr}
 800f096:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f098:	4604      	mov	r4, r0
 800f09a:	460d      	mov	r5, r1
 800f09c:	b976      	cbnz	r6, 800f0bc <_Balloc+0x28>
 800f09e:	2010      	movs	r0, #16
 800f0a0:	f7ff ffde 	bl	800f060 <malloc>
 800f0a4:	4602      	mov	r2, r0
 800f0a6:	6260      	str	r0, [r4, #36]	; 0x24
 800f0a8:	b920      	cbnz	r0, 800f0b4 <_Balloc+0x20>
 800f0aa:	4b18      	ldr	r3, [pc, #96]	; (800f10c <_Balloc+0x78>)
 800f0ac:	4818      	ldr	r0, [pc, #96]	; (800f110 <_Balloc+0x7c>)
 800f0ae:	2166      	movs	r1, #102	; 0x66
 800f0b0:	f7fe fdb8 	bl	800dc24 <__assert_func>
 800f0b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0b8:	6006      	str	r6, [r0, #0]
 800f0ba:	60c6      	str	r6, [r0, #12]
 800f0bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f0be:	68f3      	ldr	r3, [r6, #12]
 800f0c0:	b183      	cbz	r3, 800f0e4 <_Balloc+0x50>
 800f0c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0c4:	68db      	ldr	r3, [r3, #12]
 800f0c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0ca:	b9b8      	cbnz	r0, 800f0fc <_Balloc+0x68>
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f0d2:	1d72      	adds	r2, r6, #5
 800f0d4:	0092      	lsls	r2, r2, #2
 800f0d6:	4620      	mov	r0, r4
 800f0d8:	f000 fc9d 	bl	800fa16 <_calloc_r>
 800f0dc:	b160      	cbz	r0, 800f0f8 <_Balloc+0x64>
 800f0de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f0e2:	e00e      	b.n	800f102 <_Balloc+0x6e>
 800f0e4:	2221      	movs	r2, #33	; 0x21
 800f0e6:	2104      	movs	r1, #4
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f000 fc94 	bl	800fa16 <_calloc_r>
 800f0ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0f0:	60f0      	str	r0, [r6, #12]
 800f0f2:	68db      	ldr	r3, [r3, #12]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d1e4      	bne.n	800f0c2 <_Balloc+0x2e>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	6802      	ldr	r2, [r0, #0]
 800f0fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f102:	2300      	movs	r3, #0
 800f104:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f108:	e7f7      	b.n	800f0fa <_Balloc+0x66>
 800f10a:	bf00      	nop
 800f10c:	080113f8 	.word	0x080113f8
 800f110:	0801159c 	.word	0x0801159c

0800f114 <_Bfree>:
 800f114:	b570      	push	{r4, r5, r6, lr}
 800f116:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f118:	4605      	mov	r5, r0
 800f11a:	460c      	mov	r4, r1
 800f11c:	b976      	cbnz	r6, 800f13c <_Bfree+0x28>
 800f11e:	2010      	movs	r0, #16
 800f120:	f7ff ff9e 	bl	800f060 <malloc>
 800f124:	4602      	mov	r2, r0
 800f126:	6268      	str	r0, [r5, #36]	; 0x24
 800f128:	b920      	cbnz	r0, 800f134 <_Bfree+0x20>
 800f12a:	4b09      	ldr	r3, [pc, #36]	; (800f150 <_Bfree+0x3c>)
 800f12c:	4809      	ldr	r0, [pc, #36]	; (800f154 <_Bfree+0x40>)
 800f12e:	218a      	movs	r1, #138	; 0x8a
 800f130:	f7fe fd78 	bl	800dc24 <__assert_func>
 800f134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f138:	6006      	str	r6, [r0, #0]
 800f13a:	60c6      	str	r6, [r0, #12]
 800f13c:	b13c      	cbz	r4, 800f14e <_Bfree+0x3a>
 800f13e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f140:	6862      	ldr	r2, [r4, #4]
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f148:	6021      	str	r1, [r4, #0]
 800f14a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f14e:	bd70      	pop	{r4, r5, r6, pc}
 800f150:	080113f8 	.word	0x080113f8
 800f154:	0801159c 	.word	0x0801159c

0800f158 <__multadd>:
 800f158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f15c:	690d      	ldr	r5, [r1, #16]
 800f15e:	4607      	mov	r7, r0
 800f160:	460c      	mov	r4, r1
 800f162:	461e      	mov	r6, r3
 800f164:	f101 0c14 	add.w	ip, r1, #20
 800f168:	2000      	movs	r0, #0
 800f16a:	f8dc 3000 	ldr.w	r3, [ip]
 800f16e:	b299      	uxth	r1, r3
 800f170:	fb02 6101 	mla	r1, r2, r1, r6
 800f174:	0c1e      	lsrs	r6, r3, #16
 800f176:	0c0b      	lsrs	r3, r1, #16
 800f178:	fb02 3306 	mla	r3, r2, r6, r3
 800f17c:	b289      	uxth	r1, r1
 800f17e:	3001      	adds	r0, #1
 800f180:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f184:	4285      	cmp	r5, r0
 800f186:	f84c 1b04 	str.w	r1, [ip], #4
 800f18a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f18e:	dcec      	bgt.n	800f16a <__multadd+0x12>
 800f190:	b30e      	cbz	r6, 800f1d6 <__multadd+0x7e>
 800f192:	68a3      	ldr	r3, [r4, #8]
 800f194:	42ab      	cmp	r3, r5
 800f196:	dc19      	bgt.n	800f1cc <__multadd+0x74>
 800f198:	6861      	ldr	r1, [r4, #4]
 800f19a:	4638      	mov	r0, r7
 800f19c:	3101      	adds	r1, #1
 800f19e:	f7ff ff79 	bl	800f094 <_Balloc>
 800f1a2:	4680      	mov	r8, r0
 800f1a4:	b928      	cbnz	r0, 800f1b2 <__multadd+0x5a>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <__multadd+0x84>)
 800f1aa:	480d      	ldr	r0, [pc, #52]	; (800f1e0 <__multadd+0x88>)
 800f1ac:	21b5      	movs	r1, #181	; 0xb5
 800f1ae:	f7fe fd39 	bl	800dc24 <__assert_func>
 800f1b2:	6922      	ldr	r2, [r4, #16]
 800f1b4:	3202      	adds	r2, #2
 800f1b6:	f104 010c 	add.w	r1, r4, #12
 800f1ba:	0092      	lsls	r2, r2, #2
 800f1bc:	300c      	adds	r0, #12
 800f1be:	f7fd f9f7 	bl	800c5b0 <memcpy>
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	4638      	mov	r0, r7
 800f1c6:	f7ff ffa5 	bl	800f114 <_Bfree>
 800f1ca:	4644      	mov	r4, r8
 800f1cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1d0:	3501      	adds	r5, #1
 800f1d2:	615e      	str	r6, [r3, #20]
 800f1d4:	6125      	str	r5, [r4, #16]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1dc:	08011510 	.word	0x08011510
 800f1e0:	0801159c 	.word	0x0801159c

0800f1e4 <__s2b>:
 800f1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e8:	460c      	mov	r4, r1
 800f1ea:	4615      	mov	r5, r2
 800f1ec:	461f      	mov	r7, r3
 800f1ee:	2209      	movs	r2, #9
 800f1f0:	3308      	adds	r3, #8
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	db09      	blt.n	800f214 <__s2b+0x30>
 800f200:	4630      	mov	r0, r6
 800f202:	f7ff ff47 	bl	800f094 <_Balloc>
 800f206:	b940      	cbnz	r0, 800f21a <__s2b+0x36>
 800f208:	4602      	mov	r2, r0
 800f20a:	4b19      	ldr	r3, [pc, #100]	; (800f270 <__s2b+0x8c>)
 800f20c:	4819      	ldr	r0, [pc, #100]	; (800f274 <__s2b+0x90>)
 800f20e:	21ce      	movs	r1, #206	; 0xce
 800f210:	f7fe fd08 	bl	800dc24 <__assert_func>
 800f214:	0052      	lsls	r2, r2, #1
 800f216:	3101      	adds	r1, #1
 800f218:	e7f0      	b.n	800f1fc <__s2b+0x18>
 800f21a:	9b08      	ldr	r3, [sp, #32]
 800f21c:	6143      	str	r3, [r0, #20]
 800f21e:	2d09      	cmp	r5, #9
 800f220:	f04f 0301 	mov.w	r3, #1
 800f224:	6103      	str	r3, [r0, #16]
 800f226:	dd16      	ble.n	800f256 <__s2b+0x72>
 800f228:	f104 0909 	add.w	r9, r4, #9
 800f22c:	46c8      	mov	r8, r9
 800f22e:	442c      	add	r4, r5
 800f230:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f234:	4601      	mov	r1, r0
 800f236:	3b30      	subs	r3, #48	; 0x30
 800f238:	220a      	movs	r2, #10
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ff8c 	bl	800f158 <__multadd>
 800f240:	45a0      	cmp	r8, r4
 800f242:	d1f5      	bne.n	800f230 <__s2b+0x4c>
 800f244:	f1a5 0408 	sub.w	r4, r5, #8
 800f248:	444c      	add	r4, r9
 800f24a:	1b2d      	subs	r5, r5, r4
 800f24c:	1963      	adds	r3, r4, r5
 800f24e:	42bb      	cmp	r3, r7
 800f250:	db04      	blt.n	800f25c <__s2b+0x78>
 800f252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f256:	340a      	adds	r4, #10
 800f258:	2509      	movs	r5, #9
 800f25a:	e7f6      	b.n	800f24a <__s2b+0x66>
 800f25c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f260:	4601      	mov	r1, r0
 800f262:	3b30      	subs	r3, #48	; 0x30
 800f264:	220a      	movs	r2, #10
 800f266:	4630      	mov	r0, r6
 800f268:	f7ff ff76 	bl	800f158 <__multadd>
 800f26c:	e7ee      	b.n	800f24c <__s2b+0x68>
 800f26e:	bf00      	nop
 800f270:	08011510 	.word	0x08011510
 800f274:	0801159c 	.word	0x0801159c

0800f278 <__hi0bits>:
 800f278:	0c03      	lsrs	r3, r0, #16
 800f27a:	041b      	lsls	r3, r3, #16
 800f27c:	b9d3      	cbnz	r3, 800f2b4 <__hi0bits+0x3c>
 800f27e:	0400      	lsls	r0, r0, #16
 800f280:	2310      	movs	r3, #16
 800f282:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f286:	bf04      	itt	eq
 800f288:	0200      	lsleq	r0, r0, #8
 800f28a:	3308      	addeq	r3, #8
 800f28c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f290:	bf04      	itt	eq
 800f292:	0100      	lsleq	r0, r0, #4
 800f294:	3304      	addeq	r3, #4
 800f296:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f29a:	bf04      	itt	eq
 800f29c:	0080      	lsleq	r0, r0, #2
 800f29e:	3302      	addeq	r3, #2
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	db05      	blt.n	800f2b0 <__hi0bits+0x38>
 800f2a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f2a8:	f103 0301 	add.w	r3, r3, #1
 800f2ac:	bf08      	it	eq
 800f2ae:	2320      	moveq	r3, #32
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	4770      	bx	lr
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e7e4      	b.n	800f282 <__hi0bits+0xa>

0800f2b8 <__lo0bits>:
 800f2b8:	6803      	ldr	r3, [r0, #0]
 800f2ba:	f013 0207 	ands.w	r2, r3, #7
 800f2be:	4601      	mov	r1, r0
 800f2c0:	d00b      	beq.n	800f2da <__lo0bits+0x22>
 800f2c2:	07da      	lsls	r2, r3, #31
 800f2c4:	d423      	bmi.n	800f30e <__lo0bits+0x56>
 800f2c6:	0798      	lsls	r0, r3, #30
 800f2c8:	bf49      	itett	mi
 800f2ca:	085b      	lsrmi	r3, r3, #1
 800f2cc:	089b      	lsrpl	r3, r3, #2
 800f2ce:	2001      	movmi	r0, #1
 800f2d0:	600b      	strmi	r3, [r1, #0]
 800f2d2:	bf5c      	itt	pl
 800f2d4:	600b      	strpl	r3, [r1, #0]
 800f2d6:	2002      	movpl	r0, #2
 800f2d8:	4770      	bx	lr
 800f2da:	b298      	uxth	r0, r3
 800f2dc:	b9a8      	cbnz	r0, 800f30a <__lo0bits+0x52>
 800f2de:	0c1b      	lsrs	r3, r3, #16
 800f2e0:	2010      	movs	r0, #16
 800f2e2:	b2da      	uxtb	r2, r3
 800f2e4:	b90a      	cbnz	r2, 800f2ea <__lo0bits+0x32>
 800f2e6:	3008      	adds	r0, #8
 800f2e8:	0a1b      	lsrs	r3, r3, #8
 800f2ea:	071a      	lsls	r2, r3, #28
 800f2ec:	bf04      	itt	eq
 800f2ee:	091b      	lsreq	r3, r3, #4
 800f2f0:	3004      	addeq	r0, #4
 800f2f2:	079a      	lsls	r2, r3, #30
 800f2f4:	bf04      	itt	eq
 800f2f6:	089b      	lsreq	r3, r3, #2
 800f2f8:	3002      	addeq	r0, #2
 800f2fa:	07da      	lsls	r2, r3, #31
 800f2fc:	d403      	bmi.n	800f306 <__lo0bits+0x4e>
 800f2fe:	085b      	lsrs	r3, r3, #1
 800f300:	f100 0001 	add.w	r0, r0, #1
 800f304:	d005      	beq.n	800f312 <__lo0bits+0x5a>
 800f306:	600b      	str	r3, [r1, #0]
 800f308:	4770      	bx	lr
 800f30a:	4610      	mov	r0, r2
 800f30c:	e7e9      	b.n	800f2e2 <__lo0bits+0x2a>
 800f30e:	2000      	movs	r0, #0
 800f310:	4770      	bx	lr
 800f312:	2020      	movs	r0, #32
 800f314:	4770      	bx	lr
	...

0800f318 <__i2b>:
 800f318:	b510      	push	{r4, lr}
 800f31a:	460c      	mov	r4, r1
 800f31c:	2101      	movs	r1, #1
 800f31e:	f7ff feb9 	bl	800f094 <_Balloc>
 800f322:	4602      	mov	r2, r0
 800f324:	b928      	cbnz	r0, 800f332 <__i2b+0x1a>
 800f326:	4b05      	ldr	r3, [pc, #20]	; (800f33c <__i2b+0x24>)
 800f328:	4805      	ldr	r0, [pc, #20]	; (800f340 <__i2b+0x28>)
 800f32a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f32e:	f7fe fc79 	bl	800dc24 <__assert_func>
 800f332:	2301      	movs	r3, #1
 800f334:	6144      	str	r4, [r0, #20]
 800f336:	6103      	str	r3, [r0, #16]
 800f338:	bd10      	pop	{r4, pc}
 800f33a:	bf00      	nop
 800f33c:	08011510 	.word	0x08011510
 800f340:	0801159c 	.word	0x0801159c

0800f344 <__multiply>:
 800f344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	4691      	mov	r9, r2
 800f34a:	690a      	ldr	r2, [r1, #16]
 800f34c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f350:	429a      	cmp	r2, r3
 800f352:	bfb8      	it	lt
 800f354:	460b      	movlt	r3, r1
 800f356:	460c      	mov	r4, r1
 800f358:	bfbc      	itt	lt
 800f35a:	464c      	movlt	r4, r9
 800f35c:	4699      	movlt	r9, r3
 800f35e:	6927      	ldr	r7, [r4, #16]
 800f360:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f364:	68a3      	ldr	r3, [r4, #8]
 800f366:	6861      	ldr	r1, [r4, #4]
 800f368:	eb07 060a 	add.w	r6, r7, sl
 800f36c:	42b3      	cmp	r3, r6
 800f36e:	b085      	sub	sp, #20
 800f370:	bfb8      	it	lt
 800f372:	3101      	addlt	r1, #1
 800f374:	f7ff fe8e 	bl	800f094 <_Balloc>
 800f378:	b930      	cbnz	r0, 800f388 <__multiply+0x44>
 800f37a:	4602      	mov	r2, r0
 800f37c:	4b44      	ldr	r3, [pc, #272]	; (800f490 <__multiply+0x14c>)
 800f37e:	4845      	ldr	r0, [pc, #276]	; (800f494 <__multiply+0x150>)
 800f380:	f240 115d 	movw	r1, #349	; 0x15d
 800f384:	f7fe fc4e 	bl	800dc24 <__assert_func>
 800f388:	f100 0514 	add.w	r5, r0, #20
 800f38c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f390:	462b      	mov	r3, r5
 800f392:	2200      	movs	r2, #0
 800f394:	4543      	cmp	r3, r8
 800f396:	d321      	bcc.n	800f3dc <__multiply+0x98>
 800f398:	f104 0314 	add.w	r3, r4, #20
 800f39c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f3a0:	f109 0314 	add.w	r3, r9, #20
 800f3a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f3a8:	9202      	str	r2, [sp, #8]
 800f3aa:	1b3a      	subs	r2, r7, r4
 800f3ac:	3a15      	subs	r2, #21
 800f3ae:	f022 0203 	bic.w	r2, r2, #3
 800f3b2:	3204      	adds	r2, #4
 800f3b4:	f104 0115 	add.w	r1, r4, #21
 800f3b8:	428f      	cmp	r7, r1
 800f3ba:	bf38      	it	cc
 800f3bc:	2204      	movcc	r2, #4
 800f3be:	9201      	str	r2, [sp, #4]
 800f3c0:	9a02      	ldr	r2, [sp, #8]
 800f3c2:	9303      	str	r3, [sp, #12]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d80c      	bhi.n	800f3e2 <__multiply+0x9e>
 800f3c8:	2e00      	cmp	r6, #0
 800f3ca:	dd03      	ble.n	800f3d4 <__multiply+0x90>
 800f3cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d05a      	beq.n	800f48a <__multiply+0x146>
 800f3d4:	6106      	str	r6, [r0, #16]
 800f3d6:	b005      	add	sp, #20
 800f3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3dc:	f843 2b04 	str.w	r2, [r3], #4
 800f3e0:	e7d8      	b.n	800f394 <__multiply+0x50>
 800f3e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800f3e6:	f1ba 0f00 	cmp.w	sl, #0
 800f3ea:	d024      	beq.n	800f436 <__multiply+0xf2>
 800f3ec:	f104 0e14 	add.w	lr, r4, #20
 800f3f0:	46a9      	mov	r9, r5
 800f3f2:	f04f 0c00 	mov.w	ip, #0
 800f3f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f3fa:	f8d9 1000 	ldr.w	r1, [r9]
 800f3fe:	fa1f fb82 	uxth.w	fp, r2
 800f402:	b289      	uxth	r1, r1
 800f404:	fb0a 110b 	mla	r1, sl, fp, r1
 800f408:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f40c:	f8d9 2000 	ldr.w	r2, [r9]
 800f410:	4461      	add	r1, ip
 800f412:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f416:	fb0a c20b 	mla	r2, sl, fp, ip
 800f41a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f41e:	b289      	uxth	r1, r1
 800f420:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f424:	4577      	cmp	r7, lr
 800f426:	f849 1b04 	str.w	r1, [r9], #4
 800f42a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f42e:	d8e2      	bhi.n	800f3f6 <__multiply+0xb2>
 800f430:	9a01      	ldr	r2, [sp, #4]
 800f432:	f845 c002 	str.w	ip, [r5, r2]
 800f436:	9a03      	ldr	r2, [sp, #12]
 800f438:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f43c:	3304      	adds	r3, #4
 800f43e:	f1b9 0f00 	cmp.w	r9, #0
 800f442:	d020      	beq.n	800f486 <__multiply+0x142>
 800f444:	6829      	ldr	r1, [r5, #0]
 800f446:	f104 0c14 	add.w	ip, r4, #20
 800f44a:	46ae      	mov	lr, r5
 800f44c:	f04f 0a00 	mov.w	sl, #0
 800f450:	f8bc b000 	ldrh.w	fp, [ip]
 800f454:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f458:	fb09 220b 	mla	r2, r9, fp, r2
 800f45c:	4492      	add	sl, r2
 800f45e:	b289      	uxth	r1, r1
 800f460:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f464:	f84e 1b04 	str.w	r1, [lr], #4
 800f468:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f46c:	f8be 1000 	ldrh.w	r1, [lr]
 800f470:	0c12      	lsrs	r2, r2, #16
 800f472:	fb09 1102 	mla	r1, r9, r2, r1
 800f476:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f47a:	4567      	cmp	r7, ip
 800f47c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f480:	d8e6      	bhi.n	800f450 <__multiply+0x10c>
 800f482:	9a01      	ldr	r2, [sp, #4]
 800f484:	50a9      	str	r1, [r5, r2]
 800f486:	3504      	adds	r5, #4
 800f488:	e79a      	b.n	800f3c0 <__multiply+0x7c>
 800f48a:	3e01      	subs	r6, #1
 800f48c:	e79c      	b.n	800f3c8 <__multiply+0x84>
 800f48e:	bf00      	nop
 800f490:	08011510 	.word	0x08011510
 800f494:	0801159c 	.word	0x0801159c

0800f498 <__pow5mult>:
 800f498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f49c:	4615      	mov	r5, r2
 800f49e:	f012 0203 	ands.w	r2, r2, #3
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	460f      	mov	r7, r1
 800f4a6:	d007      	beq.n	800f4b8 <__pow5mult+0x20>
 800f4a8:	4c25      	ldr	r4, [pc, #148]	; (800f540 <__pow5mult+0xa8>)
 800f4aa:	3a01      	subs	r2, #1
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f4b2:	f7ff fe51 	bl	800f158 <__multadd>
 800f4b6:	4607      	mov	r7, r0
 800f4b8:	10ad      	asrs	r5, r5, #2
 800f4ba:	d03d      	beq.n	800f538 <__pow5mult+0xa0>
 800f4bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f4be:	b97c      	cbnz	r4, 800f4e0 <__pow5mult+0x48>
 800f4c0:	2010      	movs	r0, #16
 800f4c2:	f7ff fdcd 	bl	800f060 <malloc>
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	6270      	str	r0, [r6, #36]	; 0x24
 800f4ca:	b928      	cbnz	r0, 800f4d8 <__pow5mult+0x40>
 800f4cc:	4b1d      	ldr	r3, [pc, #116]	; (800f544 <__pow5mult+0xac>)
 800f4ce:	481e      	ldr	r0, [pc, #120]	; (800f548 <__pow5mult+0xb0>)
 800f4d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f4d4:	f7fe fba6 	bl	800dc24 <__assert_func>
 800f4d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4dc:	6004      	str	r4, [r0, #0]
 800f4de:	60c4      	str	r4, [r0, #12]
 800f4e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f4e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4e8:	b94c      	cbnz	r4, 800f4fe <__pow5mult+0x66>
 800f4ea:	f240 2171 	movw	r1, #625	; 0x271
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f7ff ff12 	bl	800f318 <__i2b>
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4fa:	4604      	mov	r4, r0
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	f04f 0900 	mov.w	r9, #0
 800f502:	07eb      	lsls	r3, r5, #31
 800f504:	d50a      	bpl.n	800f51c <__pow5mult+0x84>
 800f506:	4639      	mov	r1, r7
 800f508:	4622      	mov	r2, r4
 800f50a:	4630      	mov	r0, r6
 800f50c:	f7ff ff1a 	bl	800f344 <__multiply>
 800f510:	4639      	mov	r1, r7
 800f512:	4680      	mov	r8, r0
 800f514:	4630      	mov	r0, r6
 800f516:	f7ff fdfd 	bl	800f114 <_Bfree>
 800f51a:	4647      	mov	r7, r8
 800f51c:	106d      	asrs	r5, r5, #1
 800f51e:	d00b      	beq.n	800f538 <__pow5mult+0xa0>
 800f520:	6820      	ldr	r0, [r4, #0]
 800f522:	b938      	cbnz	r0, 800f534 <__pow5mult+0x9c>
 800f524:	4622      	mov	r2, r4
 800f526:	4621      	mov	r1, r4
 800f528:	4630      	mov	r0, r6
 800f52a:	f7ff ff0b 	bl	800f344 <__multiply>
 800f52e:	6020      	str	r0, [r4, #0]
 800f530:	f8c0 9000 	str.w	r9, [r0]
 800f534:	4604      	mov	r4, r0
 800f536:	e7e4      	b.n	800f502 <__pow5mult+0x6a>
 800f538:	4638      	mov	r0, r7
 800f53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f53e:	bf00      	nop
 800f540:	080116e8 	.word	0x080116e8
 800f544:	080113f8 	.word	0x080113f8
 800f548:	0801159c 	.word	0x0801159c

0800f54c <__lshift>:
 800f54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f550:	460c      	mov	r4, r1
 800f552:	6849      	ldr	r1, [r1, #4]
 800f554:	6923      	ldr	r3, [r4, #16]
 800f556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f55a:	68a3      	ldr	r3, [r4, #8]
 800f55c:	4607      	mov	r7, r0
 800f55e:	4691      	mov	r9, r2
 800f560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f564:	f108 0601 	add.w	r6, r8, #1
 800f568:	42b3      	cmp	r3, r6
 800f56a:	db0b      	blt.n	800f584 <__lshift+0x38>
 800f56c:	4638      	mov	r0, r7
 800f56e:	f7ff fd91 	bl	800f094 <_Balloc>
 800f572:	4605      	mov	r5, r0
 800f574:	b948      	cbnz	r0, 800f58a <__lshift+0x3e>
 800f576:	4602      	mov	r2, r0
 800f578:	4b2a      	ldr	r3, [pc, #168]	; (800f624 <__lshift+0xd8>)
 800f57a:	482b      	ldr	r0, [pc, #172]	; (800f628 <__lshift+0xdc>)
 800f57c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f580:	f7fe fb50 	bl	800dc24 <__assert_func>
 800f584:	3101      	adds	r1, #1
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	e7ee      	b.n	800f568 <__lshift+0x1c>
 800f58a:	2300      	movs	r3, #0
 800f58c:	f100 0114 	add.w	r1, r0, #20
 800f590:	f100 0210 	add.w	r2, r0, #16
 800f594:	4618      	mov	r0, r3
 800f596:	4553      	cmp	r3, sl
 800f598:	db37      	blt.n	800f60a <__lshift+0xbe>
 800f59a:	6920      	ldr	r0, [r4, #16]
 800f59c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f5a0:	f104 0314 	add.w	r3, r4, #20
 800f5a4:	f019 091f 	ands.w	r9, r9, #31
 800f5a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f5ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f5b0:	d02f      	beq.n	800f612 <__lshift+0xc6>
 800f5b2:	f1c9 0e20 	rsb	lr, r9, #32
 800f5b6:	468a      	mov	sl, r1
 800f5b8:	f04f 0c00 	mov.w	ip, #0
 800f5bc:	681a      	ldr	r2, [r3, #0]
 800f5be:	fa02 f209 	lsl.w	r2, r2, r9
 800f5c2:	ea42 020c 	orr.w	r2, r2, ip
 800f5c6:	f84a 2b04 	str.w	r2, [sl], #4
 800f5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ce:	4298      	cmp	r0, r3
 800f5d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f5d4:	d8f2      	bhi.n	800f5bc <__lshift+0x70>
 800f5d6:	1b03      	subs	r3, r0, r4
 800f5d8:	3b15      	subs	r3, #21
 800f5da:	f023 0303 	bic.w	r3, r3, #3
 800f5de:	3304      	adds	r3, #4
 800f5e0:	f104 0215 	add.w	r2, r4, #21
 800f5e4:	4290      	cmp	r0, r2
 800f5e6:	bf38      	it	cc
 800f5e8:	2304      	movcc	r3, #4
 800f5ea:	f841 c003 	str.w	ip, [r1, r3]
 800f5ee:	f1bc 0f00 	cmp.w	ip, #0
 800f5f2:	d001      	beq.n	800f5f8 <__lshift+0xac>
 800f5f4:	f108 0602 	add.w	r6, r8, #2
 800f5f8:	3e01      	subs	r6, #1
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	612e      	str	r6, [r5, #16]
 800f5fe:	4621      	mov	r1, r4
 800f600:	f7ff fd88 	bl	800f114 <_Bfree>
 800f604:	4628      	mov	r0, r5
 800f606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f60a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f60e:	3301      	adds	r3, #1
 800f610:	e7c1      	b.n	800f596 <__lshift+0x4a>
 800f612:	3904      	subs	r1, #4
 800f614:	f853 2b04 	ldr.w	r2, [r3], #4
 800f618:	f841 2f04 	str.w	r2, [r1, #4]!
 800f61c:	4298      	cmp	r0, r3
 800f61e:	d8f9      	bhi.n	800f614 <__lshift+0xc8>
 800f620:	e7ea      	b.n	800f5f8 <__lshift+0xac>
 800f622:	bf00      	nop
 800f624:	08011510 	.word	0x08011510
 800f628:	0801159c 	.word	0x0801159c

0800f62c <__mcmp>:
 800f62c:	b530      	push	{r4, r5, lr}
 800f62e:	6902      	ldr	r2, [r0, #16]
 800f630:	690c      	ldr	r4, [r1, #16]
 800f632:	1b12      	subs	r2, r2, r4
 800f634:	d10e      	bne.n	800f654 <__mcmp+0x28>
 800f636:	f100 0314 	add.w	r3, r0, #20
 800f63a:	3114      	adds	r1, #20
 800f63c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f640:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f644:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f648:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f64c:	42a5      	cmp	r5, r4
 800f64e:	d003      	beq.n	800f658 <__mcmp+0x2c>
 800f650:	d305      	bcc.n	800f65e <__mcmp+0x32>
 800f652:	2201      	movs	r2, #1
 800f654:	4610      	mov	r0, r2
 800f656:	bd30      	pop	{r4, r5, pc}
 800f658:	4283      	cmp	r3, r0
 800f65a:	d3f3      	bcc.n	800f644 <__mcmp+0x18>
 800f65c:	e7fa      	b.n	800f654 <__mcmp+0x28>
 800f65e:	f04f 32ff 	mov.w	r2, #4294967295
 800f662:	e7f7      	b.n	800f654 <__mcmp+0x28>

0800f664 <__mdiff>:
 800f664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f668:	460c      	mov	r4, r1
 800f66a:	4606      	mov	r6, r0
 800f66c:	4611      	mov	r1, r2
 800f66e:	4620      	mov	r0, r4
 800f670:	4690      	mov	r8, r2
 800f672:	f7ff ffdb 	bl	800f62c <__mcmp>
 800f676:	1e05      	subs	r5, r0, #0
 800f678:	d110      	bne.n	800f69c <__mdiff+0x38>
 800f67a:	4629      	mov	r1, r5
 800f67c:	4630      	mov	r0, r6
 800f67e:	f7ff fd09 	bl	800f094 <_Balloc>
 800f682:	b930      	cbnz	r0, 800f692 <__mdiff+0x2e>
 800f684:	4b3a      	ldr	r3, [pc, #232]	; (800f770 <__mdiff+0x10c>)
 800f686:	4602      	mov	r2, r0
 800f688:	f240 2132 	movw	r1, #562	; 0x232
 800f68c:	4839      	ldr	r0, [pc, #228]	; (800f774 <__mdiff+0x110>)
 800f68e:	f7fe fac9 	bl	800dc24 <__assert_func>
 800f692:	2301      	movs	r3, #1
 800f694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f69c:	bfa4      	itt	ge
 800f69e:	4643      	movge	r3, r8
 800f6a0:	46a0      	movge	r8, r4
 800f6a2:	4630      	mov	r0, r6
 800f6a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f6a8:	bfa6      	itte	ge
 800f6aa:	461c      	movge	r4, r3
 800f6ac:	2500      	movge	r5, #0
 800f6ae:	2501      	movlt	r5, #1
 800f6b0:	f7ff fcf0 	bl	800f094 <_Balloc>
 800f6b4:	b920      	cbnz	r0, 800f6c0 <__mdiff+0x5c>
 800f6b6:	4b2e      	ldr	r3, [pc, #184]	; (800f770 <__mdiff+0x10c>)
 800f6b8:	4602      	mov	r2, r0
 800f6ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f6be:	e7e5      	b.n	800f68c <__mdiff+0x28>
 800f6c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f6c4:	6926      	ldr	r6, [r4, #16]
 800f6c6:	60c5      	str	r5, [r0, #12]
 800f6c8:	f104 0914 	add.w	r9, r4, #20
 800f6cc:	f108 0514 	add.w	r5, r8, #20
 800f6d0:	f100 0e14 	add.w	lr, r0, #20
 800f6d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f6d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f6dc:	f108 0210 	add.w	r2, r8, #16
 800f6e0:	46f2      	mov	sl, lr
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800f6e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f6ec:	fa1f f883 	uxth.w	r8, r3
 800f6f0:	fa11 f18b 	uxtah	r1, r1, fp
 800f6f4:	0c1b      	lsrs	r3, r3, #16
 800f6f6:	eba1 0808 	sub.w	r8, r1, r8
 800f6fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f6fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f702:	fa1f f888 	uxth.w	r8, r8
 800f706:	1419      	asrs	r1, r3, #16
 800f708:	454e      	cmp	r6, r9
 800f70a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f70e:	f84a 3b04 	str.w	r3, [sl], #4
 800f712:	d8e7      	bhi.n	800f6e4 <__mdiff+0x80>
 800f714:	1b33      	subs	r3, r6, r4
 800f716:	3b15      	subs	r3, #21
 800f718:	f023 0303 	bic.w	r3, r3, #3
 800f71c:	3304      	adds	r3, #4
 800f71e:	3415      	adds	r4, #21
 800f720:	42a6      	cmp	r6, r4
 800f722:	bf38      	it	cc
 800f724:	2304      	movcc	r3, #4
 800f726:	441d      	add	r5, r3
 800f728:	4473      	add	r3, lr
 800f72a:	469e      	mov	lr, r3
 800f72c:	462e      	mov	r6, r5
 800f72e:	4566      	cmp	r6, ip
 800f730:	d30e      	bcc.n	800f750 <__mdiff+0xec>
 800f732:	f10c 0203 	add.w	r2, ip, #3
 800f736:	1b52      	subs	r2, r2, r5
 800f738:	f022 0203 	bic.w	r2, r2, #3
 800f73c:	3d03      	subs	r5, #3
 800f73e:	45ac      	cmp	ip, r5
 800f740:	bf38      	it	cc
 800f742:	2200      	movcc	r2, #0
 800f744:	441a      	add	r2, r3
 800f746:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f74a:	b17b      	cbz	r3, 800f76c <__mdiff+0x108>
 800f74c:	6107      	str	r7, [r0, #16]
 800f74e:	e7a3      	b.n	800f698 <__mdiff+0x34>
 800f750:	f856 8b04 	ldr.w	r8, [r6], #4
 800f754:	fa11 f288 	uxtah	r2, r1, r8
 800f758:	1414      	asrs	r4, r2, #16
 800f75a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f75e:	b292      	uxth	r2, r2
 800f760:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f764:	f84e 2b04 	str.w	r2, [lr], #4
 800f768:	1421      	asrs	r1, r4, #16
 800f76a:	e7e0      	b.n	800f72e <__mdiff+0xca>
 800f76c:	3f01      	subs	r7, #1
 800f76e:	e7ea      	b.n	800f746 <__mdiff+0xe2>
 800f770:	08011510 	.word	0x08011510
 800f774:	0801159c 	.word	0x0801159c

0800f778 <__ulp>:
 800f778:	b082      	sub	sp, #8
 800f77a:	ed8d 0b00 	vstr	d0, [sp]
 800f77e:	9b01      	ldr	r3, [sp, #4]
 800f780:	4912      	ldr	r1, [pc, #72]	; (800f7cc <__ulp+0x54>)
 800f782:	4019      	ands	r1, r3
 800f784:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f788:	2900      	cmp	r1, #0
 800f78a:	dd05      	ble.n	800f798 <__ulp+0x20>
 800f78c:	2200      	movs	r2, #0
 800f78e:	460b      	mov	r3, r1
 800f790:	ec43 2b10 	vmov	d0, r2, r3
 800f794:	b002      	add	sp, #8
 800f796:	4770      	bx	lr
 800f798:	4249      	negs	r1, r1
 800f79a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f79e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f7a2:	f04f 0200 	mov.w	r2, #0
 800f7a6:	f04f 0300 	mov.w	r3, #0
 800f7aa:	da04      	bge.n	800f7b6 <__ulp+0x3e>
 800f7ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f7b0:	fa41 f300 	asr.w	r3, r1, r0
 800f7b4:	e7ec      	b.n	800f790 <__ulp+0x18>
 800f7b6:	f1a0 0114 	sub.w	r1, r0, #20
 800f7ba:	291e      	cmp	r1, #30
 800f7bc:	bfda      	itte	le
 800f7be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f7c2:	fa20 f101 	lsrle.w	r1, r0, r1
 800f7c6:	2101      	movgt	r1, #1
 800f7c8:	460a      	mov	r2, r1
 800f7ca:	e7e1      	b.n	800f790 <__ulp+0x18>
 800f7cc:	7ff00000 	.word	0x7ff00000

0800f7d0 <__b2d>:
 800f7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d2:	6905      	ldr	r5, [r0, #16]
 800f7d4:	f100 0714 	add.w	r7, r0, #20
 800f7d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f7dc:	1f2e      	subs	r6, r5, #4
 800f7de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f7e2:	4620      	mov	r0, r4
 800f7e4:	f7ff fd48 	bl	800f278 <__hi0bits>
 800f7e8:	f1c0 0320 	rsb	r3, r0, #32
 800f7ec:	280a      	cmp	r0, #10
 800f7ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f86c <__b2d+0x9c>
 800f7f2:	600b      	str	r3, [r1, #0]
 800f7f4:	dc14      	bgt.n	800f820 <__b2d+0x50>
 800f7f6:	f1c0 0e0b 	rsb	lr, r0, #11
 800f7fa:	fa24 f10e 	lsr.w	r1, r4, lr
 800f7fe:	42b7      	cmp	r7, r6
 800f800:	ea41 030c 	orr.w	r3, r1, ip
 800f804:	bf34      	ite	cc
 800f806:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f80a:	2100      	movcs	r1, #0
 800f80c:	3015      	adds	r0, #21
 800f80e:	fa04 f000 	lsl.w	r0, r4, r0
 800f812:	fa21 f10e 	lsr.w	r1, r1, lr
 800f816:	ea40 0201 	orr.w	r2, r0, r1
 800f81a:	ec43 2b10 	vmov	d0, r2, r3
 800f81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f820:	42b7      	cmp	r7, r6
 800f822:	bf3a      	itte	cc
 800f824:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f828:	f1a5 0608 	subcc.w	r6, r5, #8
 800f82c:	2100      	movcs	r1, #0
 800f82e:	380b      	subs	r0, #11
 800f830:	d017      	beq.n	800f862 <__b2d+0x92>
 800f832:	f1c0 0c20 	rsb	ip, r0, #32
 800f836:	fa04 f500 	lsl.w	r5, r4, r0
 800f83a:	42be      	cmp	r6, r7
 800f83c:	fa21 f40c 	lsr.w	r4, r1, ip
 800f840:	ea45 0504 	orr.w	r5, r5, r4
 800f844:	bf8c      	ite	hi
 800f846:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f84a:	2400      	movls	r4, #0
 800f84c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f850:	fa01 f000 	lsl.w	r0, r1, r0
 800f854:	fa24 f40c 	lsr.w	r4, r4, ip
 800f858:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f85c:	ea40 0204 	orr.w	r2, r0, r4
 800f860:	e7db      	b.n	800f81a <__b2d+0x4a>
 800f862:	ea44 030c 	orr.w	r3, r4, ip
 800f866:	460a      	mov	r2, r1
 800f868:	e7d7      	b.n	800f81a <__b2d+0x4a>
 800f86a:	bf00      	nop
 800f86c:	3ff00000 	.word	0x3ff00000

0800f870 <__d2b>:
 800f870:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f874:	4689      	mov	r9, r1
 800f876:	2101      	movs	r1, #1
 800f878:	ec57 6b10 	vmov	r6, r7, d0
 800f87c:	4690      	mov	r8, r2
 800f87e:	f7ff fc09 	bl	800f094 <_Balloc>
 800f882:	4604      	mov	r4, r0
 800f884:	b930      	cbnz	r0, 800f894 <__d2b+0x24>
 800f886:	4602      	mov	r2, r0
 800f888:	4b25      	ldr	r3, [pc, #148]	; (800f920 <__d2b+0xb0>)
 800f88a:	4826      	ldr	r0, [pc, #152]	; (800f924 <__d2b+0xb4>)
 800f88c:	f240 310a 	movw	r1, #778	; 0x30a
 800f890:	f7fe f9c8 	bl	800dc24 <__assert_func>
 800f894:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f898:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f89c:	bb35      	cbnz	r5, 800f8ec <__d2b+0x7c>
 800f89e:	2e00      	cmp	r6, #0
 800f8a0:	9301      	str	r3, [sp, #4]
 800f8a2:	d028      	beq.n	800f8f6 <__d2b+0x86>
 800f8a4:	4668      	mov	r0, sp
 800f8a6:	9600      	str	r6, [sp, #0]
 800f8a8:	f7ff fd06 	bl	800f2b8 <__lo0bits>
 800f8ac:	9900      	ldr	r1, [sp, #0]
 800f8ae:	b300      	cbz	r0, 800f8f2 <__d2b+0x82>
 800f8b0:	9a01      	ldr	r2, [sp, #4]
 800f8b2:	f1c0 0320 	rsb	r3, r0, #32
 800f8b6:	fa02 f303 	lsl.w	r3, r2, r3
 800f8ba:	430b      	orrs	r3, r1
 800f8bc:	40c2      	lsrs	r2, r0
 800f8be:	6163      	str	r3, [r4, #20]
 800f8c0:	9201      	str	r2, [sp, #4]
 800f8c2:	9b01      	ldr	r3, [sp, #4]
 800f8c4:	61a3      	str	r3, [r4, #24]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	bf14      	ite	ne
 800f8ca:	2202      	movne	r2, #2
 800f8cc:	2201      	moveq	r2, #1
 800f8ce:	6122      	str	r2, [r4, #16]
 800f8d0:	b1d5      	cbz	r5, 800f908 <__d2b+0x98>
 800f8d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f8d6:	4405      	add	r5, r0
 800f8d8:	f8c9 5000 	str.w	r5, [r9]
 800f8dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f8e0:	f8c8 0000 	str.w	r0, [r8]
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	b003      	add	sp, #12
 800f8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f8f0:	e7d5      	b.n	800f89e <__d2b+0x2e>
 800f8f2:	6161      	str	r1, [r4, #20]
 800f8f4:	e7e5      	b.n	800f8c2 <__d2b+0x52>
 800f8f6:	a801      	add	r0, sp, #4
 800f8f8:	f7ff fcde 	bl	800f2b8 <__lo0bits>
 800f8fc:	9b01      	ldr	r3, [sp, #4]
 800f8fe:	6163      	str	r3, [r4, #20]
 800f900:	2201      	movs	r2, #1
 800f902:	6122      	str	r2, [r4, #16]
 800f904:	3020      	adds	r0, #32
 800f906:	e7e3      	b.n	800f8d0 <__d2b+0x60>
 800f908:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f90c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f910:	f8c9 0000 	str.w	r0, [r9]
 800f914:	6918      	ldr	r0, [r3, #16]
 800f916:	f7ff fcaf 	bl	800f278 <__hi0bits>
 800f91a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f91e:	e7df      	b.n	800f8e0 <__d2b+0x70>
 800f920:	08011510 	.word	0x08011510
 800f924:	0801159c 	.word	0x0801159c

0800f928 <__ratio>:
 800f928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f92c:	4688      	mov	r8, r1
 800f92e:	4669      	mov	r1, sp
 800f930:	4681      	mov	r9, r0
 800f932:	f7ff ff4d 	bl	800f7d0 <__b2d>
 800f936:	a901      	add	r1, sp, #4
 800f938:	4640      	mov	r0, r8
 800f93a:	ec55 4b10 	vmov	r4, r5, d0
 800f93e:	f7ff ff47 	bl	800f7d0 <__b2d>
 800f942:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f946:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f94a:	eba3 0c02 	sub.w	ip, r3, r2
 800f94e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f952:	1a9b      	subs	r3, r3, r2
 800f954:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f958:	ec51 0b10 	vmov	r0, r1, d0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	bfd6      	itet	le
 800f960:	460a      	movle	r2, r1
 800f962:	462a      	movgt	r2, r5
 800f964:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f968:	468b      	mov	fp, r1
 800f96a:	462f      	mov	r7, r5
 800f96c:	bfd4      	ite	le
 800f96e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f972:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f976:	4620      	mov	r0, r4
 800f978:	ee10 2a10 	vmov	r2, s0
 800f97c:	465b      	mov	r3, fp
 800f97e:	4639      	mov	r1, r7
 800f980:	f7f0 ff64 	bl	800084c <__aeabi_ddiv>
 800f984:	ec41 0b10 	vmov	d0, r0, r1
 800f988:	b003      	add	sp, #12
 800f98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f98e <__copybits>:
 800f98e:	3901      	subs	r1, #1
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	1149      	asrs	r1, r1, #5
 800f994:	6914      	ldr	r4, [r2, #16]
 800f996:	3101      	adds	r1, #1
 800f998:	f102 0314 	add.w	r3, r2, #20
 800f99c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f9a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f9a4:	1f05      	subs	r5, r0, #4
 800f9a6:	42a3      	cmp	r3, r4
 800f9a8:	d30c      	bcc.n	800f9c4 <__copybits+0x36>
 800f9aa:	1aa3      	subs	r3, r4, r2
 800f9ac:	3b11      	subs	r3, #17
 800f9ae:	f023 0303 	bic.w	r3, r3, #3
 800f9b2:	3211      	adds	r2, #17
 800f9b4:	42a2      	cmp	r2, r4
 800f9b6:	bf88      	it	hi
 800f9b8:	2300      	movhi	r3, #0
 800f9ba:	4418      	add	r0, r3
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4288      	cmp	r0, r1
 800f9c0:	d305      	bcc.n	800f9ce <__copybits+0x40>
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}
 800f9c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800f9c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800f9cc:	e7eb      	b.n	800f9a6 <__copybits+0x18>
 800f9ce:	f840 3b04 	str.w	r3, [r0], #4
 800f9d2:	e7f4      	b.n	800f9be <__copybits+0x30>

0800f9d4 <__any_on>:
 800f9d4:	f100 0214 	add.w	r2, r0, #20
 800f9d8:	6900      	ldr	r0, [r0, #16]
 800f9da:	114b      	asrs	r3, r1, #5
 800f9dc:	4298      	cmp	r0, r3
 800f9de:	b510      	push	{r4, lr}
 800f9e0:	db11      	blt.n	800fa06 <__any_on+0x32>
 800f9e2:	dd0a      	ble.n	800f9fa <__any_on+0x26>
 800f9e4:	f011 011f 	ands.w	r1, r1, #31
 800f9e8:	d007      	beq.n	800f9fa <__any_on+0x26>
 800f9ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f9ee:	fa24 f001 	lsr.w	r0, r4, r1
 800f9f2:	fa00 f101 	lsl.w	r1, r0, r1
 800f9f6:	428c      	cmp	r4, r1
 800f9f8:	d10b      	bne.n	800fa12 <__any_on+0x3e>
 800f9fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d803      	bhi.n	800fa0a <__any_on+0x36>
 800fa02:	2000      	movs	r0, #0
 800fa04:	bd10      	pop	{r4, pc}
 800fa06:	4603      	mov	r3, r0
 800fa08:	e7f7      	b.n	800f9fa <__any_on+0x26>
 800fa0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fa0e:	2900      	cmp	r1, #0
 800fa10:	d0f5      	beq.n	800f9fe <__any_on+0x2a>
 800fa12:	2001      	movs	r0, #1
 800fa14:	e7f6      	b.n	800fa04 <__any_on+0x30>

0800fa16 <_calloc_r>:
 800fa16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa18:	fba1 2402 	umull	r2, r4, r1, r2
 800fa1c:	b94c      	cbnz	r4, 800fa32 <_calloc_r+0x1c>
 800fa1e:	4611      	mov	r1, r2
 800fa20:	9201      	str	r2, [sp, #4]
 800fa22:	f000 f87b 	bl	800fb1c <_malloc_r>
 800fa26:	9a01      	ldr	r2, [sp, #4]
 800fa28:	4605      	mov	r5, r0
 800fa2a:	b930      	cbnz	r0, 800fa3a <_calloc_r+0x24>
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	b003      	add	sp, #12
 800fa30:	bd30      	pop	{r4, r5, pc}
 800fa32:	220c      	movs	r2, #12
 800fa34:	6002      	str	r2, [r0, #0]
 800fa36:	2500      	movs	r5, #0
 800fa38:	e7f8      	b.n	800fa2c <_calloc_r+0x16>
 800fa3a:	4621      	mov	r1, r4
 800fa3c:	f7fc fdc6 	bl	800c5cc <memset>
 800fa40:	e7f4      	b.n	800fa2c <_calloc_r+0x16>
	...

0800fa44 <_free_r>:
 800fa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa46:	2900      	cmp	r1, #0
 800fa48:	d044      	beq.n	800fad4 <_free_r+0x90>
 800fa4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa4e:	9001      	str	r0, [sp, #4]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	f1a1 0404 	sub.w	r4, r1, #4
 800fa56:	bfb8      	it	lt
 800fa58:	18e4      	addlt	r4, r4, r3
 800fa5a:	f000 fec5 	bl	80107e8 <__malloc_lock>
 800fa5e:	4a1e      	ldr	r2, [pc, #120]	; (800fad8 <_free_r+0x94>)
 800fa60:	9801      	ldr	r0, [sp, #4]
 800fa62:	6813      	ldr	r3, [r2, #0]
 800fa64:	b933      	cbnz	r3, 800fa74 <_free_r+0x30>
 800fa66:	6063      	str	r3, [r4, #4]
 800fa68:	6014      	str	r4, [r2, #0]
 800fa6a:	b003      	add	sp, #12
 800fa6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa70:	f000 bec0 	b.w	80107f4 <__malloc_unlock>
 800fa74:	42a3      	cmp	r3, r4
 800fa76:	d908      	bls.n	800fa8a <_free_r+0x46>
 800fa78:	6825      	ldr	r5, [r4, #0]
 800fa7a:	1961      	adds	r1, r4, r5
 800fa7c:	428b      	cmp	r3, r1
 800fa7e:	bf01      	itttt	eq
 800fa80:	6819      	ldreq	r1, [r3, #0]
 800fa82:	685b      	ldreq	r3, [r3, #4]
 800fa84:	1949      	addeq	r1, r1, r5
 800fa86:	6021      	streq	r1, [r4, #0]
 800fa88:	e7ed      	b.n	800fa66 <_free_r+0x22>
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	b10b      	cbz	r3, 800fa94 <_free_r+0x50>
 800fa90:	42a3      	cmp	r3, r4
 800fa92:	d9fa      	bls.n	800fa8a <_free_r+0x46>
 800fa94:	6811      	ldr	r1, [r2, #0]
 800fa96:	1855      	adds	r5, r2, r1
 800fa98:	42a5      	cmp	r5, r4
 800fa9a:	d10b      	bne.n	800fab4 <_free_r+0x70>
 800fa9c:	6824      	ldr	r4, [r4, #0]
 800fa9e:	4421      	add	r1, r4
 800faa0:	1854      	adds	r4, r2, r1
 800faa2:	42a3      	cmp	r3, r4
 800faa4:	6011      	str	r1, [r2, #0]
 800faa6:	d1e0      	bne.n	800fa6a <_free_r+0x26>
 800faa8:	681c      	ldr	r4, [r3, #0]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	6053      	str	r3, [r2, #4]
 800faae:	4421      	add	r1, r4
 800fab0:	6011      	str	r1, [r2, #0]
 800fab2:	e7da      	b.n	800fa6a <_free_r+0x26>
 800fab4:	d902      	bls.n	800fabc <_free_r+0x78>
 800fab6:	230c      	movs	r3, #12
 800fab8:	6003      	str	r3, [r0, #0]
 800faba:	e7d6      	b.n	800fa6a <_free_r+0x26>
 800fabc:	6825      	ldr	r5, [r4, #0]
 800fabe:	1961      	adds	r1, r4, r5
 800fac0:	428b      	cmp	r3, r1
 800fac2:	bf04      	itt	eq
 800fac4:	6819      	ldreq	r1, [r3, #0]
 800fac6:	685b      	ldreq	r3, [r3, #4]
 800fac8:	6063      	str	r3, [r4, #4]
 800faca:	bf04      	itt	eq
 800facc:	1949      	addeq	r1, r1, r5
 800face:	6021      	streq	r1, [r4, #0]
 800fad0:	6054      	str	r4, [r2, #4]
 800fad2:	e7ca      	b.n	800fa6a <_free_r+0x26>
 800fad4:	b003      	add	sp, #12
 800fad6:	bd30      	pop	{r4, r5, pc}
 800fad8:	200003d8 	.word	0x200003d8

0800fadc <sbrk_aligned>:
 800fadc:	b570      	push	{r4, r5, r6, lr}
 800fade:	4e0e      	ldr	r6, [pc, #56]	; (800fb18 <sbrk_aligned+0x3c>)
 800fae0:	460c      	mov	r4, r1
 800fae2:	6831      	ldr	r1, [r6, #0]
 800fae4:	4605      	mov	r5, r0
 800fae6:	b911      	cbnz	r1, 800faee <sbrk_aligned+0x12>
 800fae8:	f000 fb4a 	bl	8010180 <_sbrk_r>
 800faec:	6030      	str	r0, [r6, #0]
 800faee:	4621      	mov	r1, r4
 800faf0:	4628      	mov	r0, r5
 800faf2:	f000 fb45 	bl	8010180 <_sbrk_r>
 800faf6:	1c43      	adds	r3, r0, #1
 800faf8:	d00a      	beq.n	800fb10 <sbrk_aligned+0x34>
 800fafa:	1cc4      	adds	r4, r0, #3
 800fafc:	f024 0403 	bic.w	r4, r4, #3
 800fb00:	42a0      	cmp	r0, r4
 800fb02:	d007      	beq.n	800fb14 <sbrk_aligned+0x38>
 800fb04:	1a21      	subs	r1, r4, r0
 800fb06:	4628      	mov	r0, r5
 800fb08:	f000 fb3a 	bl	8010180 <_sbrk_r>
 800fb0c:	3001      	adds	r0, #1
 800fb0e:	d101      	bne.n	800fb14 <sbrk_aligned+0x38>
 800fb10:	f04f 34ff 	mov.w	r4, #4294967295
 800fb14:	4620      	mov	r0, r4
 800fb16:	bd70      	pop	{r4, r5, r6, pc}
 800fb18:	200003dc 	.word	0x200003dc

0800fb1c <_malloc_r>:
 800fb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb20:	1ccd      	adds	r5, r1, #3
 800fb22:	f025 0503 	bic.w	r5, r5, #3
 800fb26:	3508      	adds	r5, #8
 800fb28:	2d0c      	cmp	r5, #12
 800fb2a:	bf38      	it	cc
 800fb2c:	250c      	movcc	r5, #12
 800fb2e:	2d00      	cmp	r5, #0
 800fb30:	4607      	mov	r7, r0
 800fb32:	db01      	blt.n	800fb38 <_malloc_r+0x1c>
 800fb34:	42a9      	cmp	r1, r5
 800fb36:	d905      	bls.n	800fb44 <_malloc_r+0x28>
 800fb38:	230c      	movs	r3, #12
 800fb3a:	603b      	str	r3, [r7, #0]
 800fb3c:	2600      	movs	r6, #0
 800fb3e:	4630      	mov	r0, r6
 800fb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb44:	4e2e      	ldr	r6, [pc, #184]	; (800fc00 <_malloc_r+0xe4>)
 800fb46:	f000 fe4f 	bl	80107e8 <__malloc_lock>
 800fb4a:	6833      	ldr	r3, [r6, #0]
 800fb4c:	461c      	mov	r4, r3
 800fb4e:	bb34      	cbnz	r4, 800fb9e <_malloc_r+0x82>
 800fb50:	4629      	mov	r1, r5
 800fb52:	4638      	mov	r0, r7
 800fb54:	f7ff ffc2 	bl	800fadc <sbrk_aligned>
 800fb58:	1c43      	adds	r3, r0, #1
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	d14d      	bne.n	800fbfa <_malloc_r+0xde>
 800fb5e:	6834      	ldr	r4, [r6, #0]
 800fb60:	4626      	mov	r6, r4
 800fb62:	2e00      	cmp	r6, #0
 800fb64:	d140      	bne.n	800fbe8 <_malloc_r+0xcc>
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	4631      	mov	r1, r6
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	eb04 0803 	add.w	r8, r4, r3
 800fb70:	f000 fb06 	bl	8010180 <_sbrk_r>
 800fb74:	4580      	cmp	r8, r0
 800fb76:	d13a      	bne.n	800fbee <_malloc_r+0xd2>
 800fb78:	6821      	ldr	r1, [r4, #0]
 800fb7a:	3503      	adds	r5, #3
 800fb7c:	1a6d      	subs	r5, r5, r1
 800fb7e:	f025 0503 	bic.w	r5, r5, #3
 800fb82:	3508      	adds	r5, #8
 800fb84:	2d0c      	cmp	r5, #12
 800fb86:	bf38      	it	cc
 800fb88:	250c      	movcc	r5, #12
 800fb8a:	4629      	mov	r1, r5
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	f7ff ffa5 	bl	800fadc <sbrk_aligned>
 800fb92:	3001      	adds	r0, #1
 800fb94:	d02b      	beq.n	800fbee <_malloc_r+0xd2>
 800fb96:	6823      	ldr	r3, [r4, #0]
 800fb98:	442b      	add	r3, r5
 800fb9a:	6023      	str	r3, [r4, #0]
 800fb9c:	e00e      	b.n	800fbbc <_malloc_r+0xa0>
 800fb9e:	6822      	ldr	r2, [r4, #0]
 800fba0:	1b52      	subs	r2, r2, r5
 800fba2:	d41e      	bmi.n	800fbe2 <_malloc_r+0xc6>
 800fba4:	2a0b      	cmp	r2, #11
 800fba6:	d916      	bls.n	800fbd6 <_malloc_r+0xba>
 800fba8:	1961      	adds	r1, r4, r5
 800fbaa:	42a3      	cmp	r3, r4
 800fbac:	6025      	str	r5, [r4, #0]
 800fbae:	bf18      	it	ne
 800fbb0:	6059      	strne	r1, [r3, #4]
 800fbb2:	6863      	ldr	r3, [r4, #4]
 800fbb4:	bf08      	it	eq
 800fbb6:	6031      	streq	r1, [r6, #0]
 800fbb8:	5162      	str	r2, [r4, r5]
 800fbba:	604b      	str	r3, [r1, #4]
 800fbbc:	4638      	mov	r0, r7
 800fbbe:	f104 060b 	add.w	r6, r4, #11
 800fbc2:	f000 fe17 	bl	80107f4 <__malloc_unlock>
 800fbc6:	f026 0607 	bic.w	r6, r6, #7
 800fbca:	1d23      	adds	r3, r4, #4
 800fbcc:	1af2      	subs	r2, r6, r3
 800fbce:	d0b6      	beq.n	800fb3e <_malloc_r+0x22>
 800fbd0:	1b9b      	subs	r3, r3, r6
 800fbd2:	50a3      	str	r3, [r4, r2]
 800fbd4:	e7b3      	b.n	800fb3e <_malloc_r+0x22>
 800fbd6:	6862      	ldr	r2, [r4, #4]
 800fbd8:	42a3      	cmp	r3, r4
 800fbda:	bf0c      	ite	eq
 800fbdc:	6032      	streq	r2, [r6, #0]
 800fbde:	605a      	strne	r2, [r3, #4]
 800fbe0:	e7ec      	b.n	800fbbc <_malloc_r+0xa0>
 800fbe2:	4623      	mov	r3, r4
 800fbe4:	6864      	ldr	r4, [r4, #4]
 800fbe6:	e7b2      	b.n	800fb4e <_malloc_r+0x32>
 800fbe8:	4634      	mov	r4, r6
 800fbea:	6876      	ldr	r6, [r6, #4]
 800fbec:	e7b9      	b.n	800fb62 <_malloc_r+0x46>
 800fbee:	230c      	movs	r3, #12
 800fbf0:	603b      	str	r3, [r7, #0]
 800fbf2:	4638      	mov	r0, r7
 800fbf4:	f000 fdfe 	bl	80107f4 <__malloc_unlock>
 800fbf8:	e7a1      	b.n	800fb3e <_malloc_r+0x22>
 800fbfa:	6025      	str	r5, [r4, #0]
 800fbfc:	e7de      	b.n	800fbbc <_malloc_r+0xa0>
 800fbfe:	bf00      	nop
 800fc00:	200003d8 	.word	0x200003d8

0800fc04 <__ssputs_r>:
 800fc04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc08:	688e      	ldr	r6, [r1, #8]
 800fc0a:	429e      	cmp	r6, r3
 800fc0c:	4682      	mov	sl, r0
 800fc0e:	460c      	mov	r4, r1
 800fc10:	4690      	mov	r8, r2
 800fc12:	461f      	mov	r7, r3
 800fc14:	d838      	bhi.n	800fc88 <__ssputs_r+0x84>
 800fc16:	898a      	ldrh	r2, [r1, #12]
 800fc18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc1c:	d032      	beq.n	800fc84 <__ssputs_r+0x80>
 800fc1e:	6825      	ldr	r5, [r4, #0]
 800fc20:	6909      	ldr	r1, [r1, #16]
 800fc22:	eba5 0901 	sub.w	r9, r5, r1
 800fc26:	6965      	ldr	r5, [r4, #20]
 800fc28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc30:	3301      	adds	r3, #1
 800fc32:	444b      	add	r3, r9
 800fc34:	106d      	asrs	r5, r5, #1
 800fc36:	429d      	cmp	r5, r3
 800fc38:	bf38      	it	cc
 800fc3a:	461d      	movcc	r5, r3
 800fc3c:	0553      	lsls	r3, r2, #21
 800fc3e:	d531      	bpl.n	800fca4 <__ssputs_r+0xa0>
 800fc40:	4629      	mov	r1, r5
 800fc42:	f7ff ff6b 	bl	800fb1c <_malloc_r>
 800fc46:	4606      	mov	r6, r0
 800fc48:	b950      	cbnz	r0, 800fc60 <__ssputs_r+0x5c>
 800fc4a:	230c      	movs	r3, #12
 800fc4c:	f8ca 3000 	str.w	r3, [sl]
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc56:	81a3      	strh	r3, [r4, #12]
 800fc58:	f04f 30ff 	mov.w	r0, #4294967295
 800fc5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc60:	6921      	ldr	r1, [r4, #16]
 800fc62:	464a      	mov	r2, r9
 800fc64:	f7fc fca4 	bl	800c5b0 <memcpy>
 800fc68:	89a3      	ldrh	r3, [r4, #12]
 800fc6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc72:	81a3      	strh	r3, [r4, #12]
 800fc74:	6126      	str	r6, [r4, #16]
 800fc76:	6165      	str	r5, [r4, #20]
 800fc78:	444e      	add	r6, r9
 800fc7a:	eba5 0509 	sub.w	r5, r5, r9
 800fc7e:	6026      	str	r6, [r4, #0]
 800fc80:	60a5      	str	r5, [r4, #8]
 800fc82:	463e      	mov	r6, r7
 800fc84:	42be      	cmp	r6, r7
 800fc86:	d900      	bls.n	800fc8a <__ssputs_r+0x86>
 800fc88:	463e      	mov	r6, r7
 800fc8a:	6820      	ldr	r0, [r4, #0]
 800fc8c:	4632      	mov	r2, r6
 800fc8e:	4641      	mov	r1, r8
 800fc90:	f000 fd90 	bl	80107b4 <memmove>
 800fc94:	68a3      	ldr	r3, [r4, #8]
 800fc96:	1b9b      	subs	r3, r3, r6
 800fc98:	60a3      	str	r3, [r4, #8]
 800fc9a:	6823      	ldr	r3, [r4, #0]
 800fc9c:	4433      	add	r3, r6
 800fc9e:	6023      	str	r3, [r4, #0]
 800fca0:	2000      	movs	r0, #0
 800fca2:	e7db      	b.n	800fc5c <__ssputs_r+0x58>
 800fca4:	462a      	mov	r2, r5
 800fca6:	f000 fdab 	bl	8010800 <_realloc_r>
 800fcaa:	4606      	mov	r6, r0
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d1e1      	bne.n	800fc74 <__ssputs_r+0x70>
 800fcb0:	6921      	ldr	r1, [r4, #16]
 800fcb2:	4650      	mov	r0, sl
 800fcb4:	f7ff fec6 	bl	800fa44 <_free_r>
 800fcb8:	e7c7      	b.n	800fc4a <__ssputs_r+0x46>
	...

0800fcbc <_svfiprintf_r>:
 800fcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc0:	4698      	mov	r8, r3
 800fcc2:	898b      	ldrh	r3, [r1, #12]
 800fcc4:	061b      	lsls	r3, r3, #24
 800fcc6:	b09d      	sub	sp, #116	; 0x74
 800fcc8:	4607      	mov	r7, r0
 800fcca:	460d      	mov	r5, r1
 800fccc:	4614      	mov	r4, r2
 800fcce:	d50e      	bpl.n	800fcee <_svfiprintf_r+0x32>
 800fcd0:	690b      	ldr	r3, [r1, #16]
 800fcd2:	b963      	cbnz	r3, 800fcee <_svfiprintf_r+0x32>
 800fcd4:	2140      	movs	r1, #64	; 0x40
 800fcd6:	f7ff ff21 	bl	800fb1c <_malloc_r>
 800fcda:	6028      	str	r0, [r5, #0]
 800fcdc:	6128      	str	r0, [r5, #16]
 800fcde:	b920      	cbnz	r0, 800fcea <_svfiprintf_r+0x2e>
 800fce0:	230c      	movs	r3, #12
 800fce2:	603b      	str	r3, [r7, #0]
 800fce4:	f04f 30ff 	mov.w	r0, #4294967295
 800fce8:	e0d1      	b.n	800fe8e <_svfiprintf_r+0x1d2>
 800fcea:	2340      	movs	r3, #64	; 0x40
 800fcec:	616b      	str	r3, [r5, #20]
 800fcee:	2300      	movs	r3, #0
 800fcf0:	9309      	str	r3, [sp, #36]	; 0x24
 800fcf2:	2320      	movs	r3, #32
 800fcf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fcf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcfc:	2330      	movs	r3, #48	; 0x30
 800fcfe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fea8 <_svfiprintf_r+0x1ec>
 800fd02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd06:	f04f 0901 	mov.w	r9, #1
 800fd0a:	4623      	mov	r3, r4
 800fd0c:	469a      	mov	sl, r3
 800fd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd12:	b10a      	cbz	r2, 800fd18 <_svfiprintf_r+0x5c>
 800fd14:	2a25      	cmp	r2, #37	; 0x25
 800fd16:	d1f9      	bne.n	800fd0c <_svfiprintf_r+0x50>
 800fd18:	ebba 0b04 	subs.w	fp, sl, r4
 800fd1c:	d00b      	beq.n	800fd36 <_svfiprintf_r+0x7a>
 800fd1e:	465b      	mov	r3, fp
 800fd20:	4622      	mov	r2, r4
 800fd22:	4629      	mov	r1, r5
 800fd24:	4638      	mov	r0, r7
 800fd26:	f7ff ff6d 	bl	800fc04 <__ssputs_r>
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	f000 80aa 	beq.w	800fe84 <_svfiprintf_r+0x1c8>
 800fd30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd32:	445a      	add	r2, fp
 800fd34:	9209      	str	r2, [sp, #36]	; 0x24
 800fd36:	f89a 3000 	ldrb.w	r3, [sl]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f000 80a2 	beq.w	800fe84 <_svfiprintf_r+0x1c8>
 800fd40:	2300      	movs	r3, #0
 800fd42:	f04f 32ff 	mov.w	r2, #4294967295
 800fd46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd4a:	f10a 0a01 	add.w	sl, sl, #1
 800fd4e:	9304      	str	r3, [sp, #16]
 800fd50:	9307      	str	r3, [sp, #28]
 800fd52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd56:	931a      	str	r3, [sp, #104]	; 0x68
 800fd58:	4654      	mov	r4, sl
 800fd5a:	2205      	movs	r2, #5
 800fd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd60:	4851      	ldr	r0, [pc, #324]	; (800fea8 <_svfiprintf_r+0x1ec>)
 800fd62:	f7f0 fa3d 	bl	80001e0 <memchr>
 800fd66:	9a04      	ldr	r2, [sp, #16]
 800fd68:	b9d8      	cbnz	r0, 800fda2 <_svfiprintf_r+0xe6>
 800fd6a:	06d0      	lsls	r0, r2, #27
 800fd6c:	bf44      	itt	mi
 800fd6e:	2320      	movmi	r3, #32
 800fd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd74:	0711      	lsls	r1, r2, #28
 800fd76:	bf44      	itt	mi
 800fd78:	232b      	movmi	r3, #43	; 0x2b
 800fd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd7e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd82:	2b2a      	cmp	r3, #42	; 0x2a
 800fd84:	d015      	beq.n	800fdb2 <_svfiprintf_r+0xf6>
 800fd86:	9a07      	ldr	r2, [sp, #28]
 800fd88:	4654      	mov	r4, sl
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	f04f 0c0a 	mov.w	ip, #10
 800fd90:	4621      	mov	r1, r4
 800fd92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd96:	3b30      	subs	r3, #48	; 0x30
 800fd98:	2b09      	cmp	r3, #9
 800fd9a:	d94e      	bls.n	800fe3a <_svfiprintf_r+0x17e>
 800fd9c:	b1b0      	cbz	r0, 800fdcc <_svfiprintf_r+0x110>
 800fd9e:	9207      	str	r2, [sp, #28]
 800fda0:	e014      	b.n	800fdcc <_svfiprintf_r+0x110>
 800fda2:	eba0 0308 	sub.w	r3, r0, r8
 800fda6:	fa09 f303 	lsl.w	r3, r9, r3
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	9304      	str	r3, [sp, #16]
 800fdae:	46a2      	mov	sl, r4
 800fdb0:	e7d2      	b.n	800fd58 <_svfiprintf_r+0x9c>
 800fdb2:	9b03      	ldr	r3, [sp, #12]
 800fdb4:	1d19      	adds	r1, r3, #4
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	9103      	str	r1, [sp, #12]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	bfbb      	ittet	lt
 800fdbe:	425b      	neglt	r3, r3
 800fdc0:	f042 0202 	orrlt.w	r2, r2, #2
 800fdc4:	9307      	strge	r3, [sp, #28]
 800fdc6:	9307      	strlt	r3, [sp, #28]
 800fdc8:	bfb8      	it	lt
 800fdca:	9204      	strlt	r2, [sp, #16]
 800fdcc:	7823      	ldrb	r3, [r4, #0]
 800fdce:	2b2e      	cmp	r3, #46	; 0x2e
 800fdd0:	d10c      	bne.n	800fdec <_svfiprintf_r+0x130>
 800fdd2:	7863      	ldrb	r3, [r4, #1]
 800fdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800fdd6:	d135      	bne.n	800fe44 <_svfiprintf_r+0x188>
 800fdd8:	9b03      	ldr	r3, [sp, #12]
 800fdda:	1d1a      	adds	r2, r3, #4
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	9203      	str	r2, [sp, #12]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	bfb8      	it	lt
 800fde4:	f04f 33ff 	movlt.w	r3, #4294967295
 800fde8:	3402      	adds	r4, #2
 800fdea:	9305      	str	r3, [sp, #20]
 800fdec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800feb8 <_svfiprintf_r+0x1fc>
 800fdf0:	7821      	ldrb	r1, [r4, #0]
 800fdf2:	2203      	movs	r2, #3
 800fdf4:	4650      	mov	r0, sl
 800fdf6:	f7f0 f9f3 	bl	80001e0 <memchr>
 800fdfa:	b140      	cbz	r0, 800fe0e <_svfiprintf_r+0x152>
 800fdfc:	2340      	movs	r3, #64	; 0x40
 800fdfe:	eba0 000a 	sub.w	r0, r0, sl
 800fe02:	fa03 f000 	lsl.w	r0, r3, r0
 800fe06:	9b04      	ldr	r3, [sp, #16]
 800fe08:	4303      	orrs	r3, r0
 800fe0a:	3401      	adds	r4, #1
 800fe0c:	9304      	str	r3, [sp, #16]
 800fe0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe12:	4826      	ldr	r0, [pc, #152]	; (800feac <_svfiprintf_r+0x1f0>)
 800fe14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe18:	2206      	movs	r2, #6
 800fe1a:	f7f0 f9e1 	bl	80001e0 <memchr>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	d038      	beq.n	800fe94 <_svfiprintf_r+0x1d8>
 800fe22:	4b23      	ldr	r3, [pc, #140]	; (800feb0 <_svfiprintf_r+0x1f4>)
 800fe24:	bb1b      	cbnz	r3, 800fe6e <_svfiprintf_r+0x1b2>
 800fe26:	9b03      	ldr	r3, [sp, #12]
 800fe28:	3307      	adds	r3, #7
 800fe2a:	f023 0307 	bic.w	r3, r3, #7
 800fe2e:	3308      	adds	r3, #8
 800fe30:	9303      	str	r3, [sp, #12]
 800fe32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe34:	4433      	add	r3, r6
 800fe36:	9309      	str	r3, [sp, #36]	; 0x24
 800fe38:	e767      	b.n	800fd0a <_svfiprintf_r+0x4e>
 800fe3a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe3e:	460c      	mov	r4, r1
 800fe40:	2001      	movs	r0, #1
 800fe42:	e7a5      	b.n	800fd90 <_svfiprintf_r+0xd4>
 800fe44:	2300      	movs	r3, #0
 800fe46:	3401      	adds	r4, #1
 800fe48:	9305      	str	r3, [sp, #20]
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	f04f 0c0a 	mov.w	ip, #10
 800fe50:	4620      	mov	r0, r4
 800fe52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe56:	3a30      	subs	r2, #48	; 0x30
 800fe58:	2a09      	cmp	r2, #9
 800fe5a:	d903      	bls.n	800fe64 <_svfiprintf_r+0x1a8>
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d0c5      	beq.n	800fdec <_svfiprintf_r+0x130>
 800fe60:	9105      	str	r1, [sp, #20]
 800fe62:	e7c3      	b.n	800fdec <_svfiprintf_r+0x130>
 800fe64:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe68:	4604      	mov	r4, r0
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e7f0      	b.n	800fe50 <_svfiprintf_r+0x194>
 800fe6e:	ab03      	add	r3, sp, #12
 800fe70:	9300      	str	r3, [sp, #0]
 800fe72:	462a      	mov	r2, r5
 800fe74:	4b0f      	ldr	r3, [pc, #60]	; (800feb4 <_svfiprintf_r+0x1f8>)
 800fe76:	a904      	add	r1, sp, #16
 800fe78:	4638      	mov	r0, r7
 800fe7a:	f7fc fc4f 	bl	800c71c <_printf_float>
 800fe7e:	1c42      	adds	r2, r0, #1
 800fe80:	4606      	mov	r6, r0
 800fe82:	d1d6      	bne.n	800fe32 <_svfiprintf_r+0x176>
 800fe84:	89ab      	ldrh	r3, [r5, #12]
 800fe86:	065b      	lsls	r3, r3, #25
 800fe88:	f53f af2c 	bmi.w	800fce4 <_svfiprintf_r+0x28>
 800fe8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe8e:	b01d      	add	sp, #116	; 0x74
 800fe90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe94:	ab03      	add	r3, sp, #12
 800fe96:	9300      	str	r3, [sp, #0]
 800fe98:	462a      	mov	r2, r5
 800fe9a:	4b06      	ldr	r3, [pc, #24]	; (800feb4 <_svfiprintf_r+0x1f8>)
 800fe9c:	a904      	add	r1, sp, #16
 800fe9e:	4638      	mov	r0, r7
 800fea0:	f7fc fee0 	bl	800cc64 <_printf_i>
 800fea4:	e7eb      	b.n	800fe7e <_svfiprintf_r+0x1c2>
 800fea6:	bf00      	nop
 800fea8:	080116f4 	.word	0x080116f4
 800feac:	080116fe 	.word	0x080116fe
 800feb0:	0800c71d 	.word	0x0800c71d
 800feb4:	0800fc05 	.word	0x0800fc05
 800feb8:	080116fa 	.word	0x080116fa

0800febc <__sfputc_r>:
 800febc:	6893      	ldr	r3, [r2, #8]
 800febe:	3b01      	subs	r3, #1
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	b410      	push	{r4}
 800fec4:	6093      	str	r3, [r2, #8]
 800fec6:	da08      	bge.n	800feda <__sfputc_r+0x1e>
 800fec8:	6994      	ldr	r4, [r2, #24]
 800feca:	42a3      	cmp	r3, r4
 800fecc:	db01      	blt.n	800fed2 <__sfputc_r+0x16>
 800fece:	290a      	cmp	r1, #10
 800fed0:	d103      	bne.n	800feda <__sfputc_r+0x1e>
 800fed2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fed6:	f000 b977 	b.w	80101c8 <__swbuf_r>
 800feda:	6813      	ldr	r3, [r2, #0]
 800fedc:	1c58      	adds	r0, r3, #1
 800fede:	6010      	str	r0, [r2, #0]
 800fee0:	7019      	strb	r1, [r3, #0]
 800fee2:	4608      	mov	r0, r1
 800fee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fee8:	4770      	bx	lr

0800feea <__sfputs_r>:
 800feea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feec:	4606      	mov	r6, r0
 800feee:	460f      	mov	r7, r1
 800fef0:	4614      	mov	r4, r2
 800fef2:	18d5      	adds	r5, r2, r3
 800fef4:	42ac      	cmp	r4, r5
 800fef6:	d101      	bne.n	800fefc <__sfputs_r+0x12>
 800fef8:	2000      	movs	r0, #0
 800fefa:	e007      	b.n	800ff0c <__sfputs_r+0x22>
 800fefc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff00:	463a      	mov	r2, r7
 800ff02:	4630      	mov	r0, r6
 800ff04:	f7ff ffda 	bl	800febc <__sfputc_r>
 800ff08:	1c43      	adds	r3, r0, #1
 800ff0a:	d1f3      	bne.n	800fef4 <__sfputs_r+0xa>
 800ff0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff10 <_vfiprintf_r>:
 800ff10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff14:	460d      	mov	r5, r1
 800ff16:	b09d      	sub	sp, #116	; 0x74
 800ff18:	4614      	mov	r4, r2
 800ff1a:	4698      	mov	r8, r3
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	b118      	cbz	r0, 800ff28 <_vfiprintf_r+0x18>
 800ff20:	6983      	ldr	r3, [r0, #24]
 800ff22:	b90b      	cbnz	r3, 800ff28 <_vfiprintf_r+0x18>
 800ff24:	f000 fb40 	bl	80105a8 <__sinit>
 800ff28:	4b89      	ldr	r3, [pc, #548]	; (8010150 <_vfiprintf_r+0x240>)
 800ff2a:	429d      	cmp	r5, r3
 800ff2c:	d11b      	bne.n	800ff66 <_vfiprintf_r+0x56>
 800ff2e:	6875      	ldr	r5, [r6, #4]
 800ff30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff32:	07d9      	lsls	r1, r3, #31
 800ff34:	d405      	bmi.n	800ff42 <_vfiprintf_r+0x32>
 800ff36:	89ab      	ldrh	r3, [r5, #12]
 800ff38:	059a      	lsls	r2, r3, #22
 800ff3a:	d402      	bmi.n	800ff42 <_vfiprintf_r+0x32>
 800ff3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff3e:	f000 fbd1 	bl	80106e4 <__retarget_lock_acquire_recursive>
 800ff42:	89ab      	ldrh	r3, [r5, #12]
 800ff44:	071b      	lsls	r3, r3, #28
 800ff46:	d501      	bpl.n	800ff4c <_vfiprintf_r+0x3c>
 800ff48:	692b      	ldr	r3, [r5, #16]
 800ff4a:	b9eb      	cbnz	r3, 800ff88 <_vfiprintf_r+0x78>
 800ff4c:	4629      	mov	r1, r5
 800ff4e:	4630      	mov	r0, r6
 800ff50:	f000 f99a 	bl	8010288 <__swsetup_r>
 800ff54:	b1c0      	cbz	r0, 800ff88 <_vfiprintf_r+0x78>
 800ff56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff58:	07dc      	lsls	r4, r3, #31
 800ff5a:	d50e      	bpl.n	800ff7a <_vfiprintf_r+0x6a>
 800ff5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff60:	b01d      	add	sp, #116	; 0x74
 800ff62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff66:	4b7b      	ldr	r3, [pc, #492]	; (8010154 <_vfiprintf_r+0x244>)
 800ff68:	429d      	cmp	r5, r3
 800ff6a:	d101      	bne.n	800ff70 <_vfiprintf_r+0x60>
 800ff6c:	68b5      	ldr	r5, [r6, #8]
 800ff6e:	e7df      	b.n	800ff30 <_vfiprintf_r+0x20>
 800ff70:	4b79      	ldr	r3, [pc, #484]	; (8010158 <_vfiprintf_r+0x248>)
 800ff72:	429d      	cmp	r5, r3
 800ff74:	bf08      	it	eq
 800ff76:	68f5      	ldreq	r5, [r6, #12]
 800ff78:	e7da      	b.n	800ff30 <_vfiprintf_r+0x20>
 800ff7a:	89ab      	ldrh	r3, [r5, #12]
 800ff7c:	0598      	lsls	r0, r3, #22
 800ff7e:	d4ed      	bmi.n	800ff5c <_vfiprintf_r+0x4c>
 800ff80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff82:	f000 fbb0 	bl	80106e6 <__retarget_lock_release_recursive>
 800ff86:	e7e9      	b.n	800ff5c <_vfiprintf_r+0x4c>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ff8c:	2320      	movs	r3, #32
 800ff8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff96:	2330      	movs	r3, #48	; 0x30
 800ff98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801015c <_vfiprintf_r+0x24c>
 800ff9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffa0:	f04f 0901 	mov.w	r9, #1
 800ffa4:	4623      	mov	r3, r4
 800ffa6:	469a      	mov	sl, r3
 800ffa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffac:	b10a      	cbz	r2, 800ffb2 <_vfiprintf_r+0xa2>
 800ffae:	2a25      	cmp	r2, #37	; 0x25
 800ffb0:	d1f9      	bne.n	800ffa6 <_vfiprintf_r+0x96>
 800ffb2:	ebba 0b04 	subs.w	fp, sl, r4
 800ffb6:	d00b      	beq.n	800ffd0 <_vfiprintf_r+0xc0>
 800ffb8:	465b      	mov	r3, fp
 800ffba:	4622      	mov	r2, r4
 800ffbc:	4629      	mov	r1, r5
 800ffbe:	4630      	mov	r0, r6
 800ffc0:	f7ff ff93 	bl	800feea <__sfputs_r>
 800ffc4:	3001      	adds	r0, #1
 800ffc6:	f000 80aa 	beq.w	801011e <_vfiprintf_r+0x20e>
 800ffca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffcc:	445a      	add	r2, fp
 800ffce:	9209      	str	r2, [sp, #36]	; 0x24
 800ffd0:	f89a 3000 	ldrb.w	r3, [sl]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f000 80a2 	beq.w	801011e <_vfiprintf_r+0x20e>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ffe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ffe4:	f10a 0a01 	add.w	sl, sl, #1
 800ffe8:	9304      	str	r3, [sp, #16]
 800ffea:	9307      	str	r3, [sp, #28]
 800ffec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fff0:	931a      	str	r3, [sp, #104]	; 0x68
 800fff2:	4654      	mov	r4, sl
 800fff4:	2205      	movs	r2, #5
 800fff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fffa:	4858      	ldr	r0, [pc, #352]	; (801015c <_vfiprintf_r+0x24c>)
 800fffc:	f7f0 f8f0 	bl	80001e0 <memchr>
 8010000:	9a04      	ldr	r2, [sp, #16]
 8010002:	b9d8      	cbnz	r0, 801003c <_vfiprintf_r+0x12c>
 8010004:	06d1      	lsls	r1, r2, #27
 8010006:	bf44      	itt	mi
 8010008:	2320      	movmi	r3, #32
 801000a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801000e:	0713      	lsls	r3, r2, #28
 8010010:	bf44      	itt	mi
 8010012:	232b      	movmi	r3, #43	; 0x2b
 8010014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010018:	f89a 3000 	ldrb.w	r3, [sl]
 801001c:	2b2a      	cmp	r3, #42	; 0x2a
 801001e:	d015      	beq.n	801004c <_vfiprintf_r+0x13c>
 8010020:	9a07      	ldr	r2, [sp, #28]
 8010022:	4654      	mov	r4, sl
 8010024:	2000      	movs	r0, #0
 8010026:	f04f 0c0a 	mov.w	ip, #10
 801002a:	4621      	mov	r1, r4
 801002c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010030:	3b30      	subs	r3, #48	; 0x30
 8010032:	2b09      	cmp	r3, #9
 8010034:	d94e      	bls.n	80100d4 <_vfiprintf_r+0x1c4>
 8010036:	b1b0      	cbz	r0, 8010066 <_vfiprintf_r+0x156>
 8010038:	9207      	str	r2, [sp, #28]
 801003a:	e014      	b.n	8010066 <_vfiprintf_r+0x156>
 801003c:	eba0 0308 	sub.w	r3, r0, r8
 8010040:	fa09 f303 	lsl.w	r3, r9, r3
 8010044:	4313      	orrs	r3, r2
 8010046:	9304      	str	r3, [sp, #16]
 8010048:	46a2      	mov	sl, r4
 801004a:	e7d2      	b.n	800fff2 <_vfiprintf_r+0xe2>
 801004c:	9b03      	ldr	r3, [sp, #12]
 801004e:	1d19      	adds	r1, r3, #4
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	9103      	str	r1, [sp, #12]
 8010054:	2b00      	cmp	r3, #0
 8010056:	bfbb      	ittet	lt
 8010058:	425b      	neglt	r3, r3
 801005a:	f042 0202 	orrlt.w	r2, r2, #2
 801005e:	9307      	strge	r3, [sp, #28]
 8010060:	9307      	strlt	r3, [sp, #28]
 8010062:	bfb8      	it	lt
 8010064:	9204      	strlt	r2, [sp, #16]
 8010066:	7823      	ldrb	r3, [r4, #0]
 8010068:	2b2e      	cmp	r3, #46	; 0x2e
 801006a:	d10c      	bne.n	8010086 <_vfiprintf_r+0x176>
 801006c:	7863      	ldrb	r3, [r4, #1]
 801006e:	2b2a      	cmp	r3, #42	; 0x2a
 8010070:	d135      	bne.n	80100de <_vfiprintf_r+0x1ce>
 8010072:	9b03      	ldr	r3, [sp, #12]
 8010074:	1d1a      	adds	r2, r3, #4
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	9203      	str	r2, [sp, #12]
 801007a:	2b00      	cmp	r3, #0
 801007c:	bfb8      	it	lt
 801007e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010082:	3402      	adds	r4, #2
 8010084:	9305      	str	r3, [sp, #20]
 8010086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801016c <_vfiprintf_r+0x25c>
 801008a:	7821      	ldrb	r1, [r4, #0]
 801008c:	2203      	movs	r2, #3
 801008e:	4650      	mov	r0, sl
 8010090:	f7f0 f8a6 	bl	80001e0 <memchr>
 8010094:	b140      	cbz	r0, 80100a8 <_vfiprintf_r+0x198>
 8010096:	2340      	movs	r3, #64	; 0x40
 8010098:	eba0 000a 	sub.w	r0, r0, sl
 801009c:	fa03 f000 	lsl.w	r0, r3, r0
 80100a0:	9b04      	ldr	r3, [sp, #16]
 80100a2:	4303      	orrs	r3, r0
 80100a4:	3401      	adds	r4, #1
 80100a6:	9304      	str	r3, [sp, #16]
 80100a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100ac:	482c      	ldr	r0, [pc, #176]	; (8010160 <_vfiprintf_r+0x250>)
 80100ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100b2:	2206      	movs	r2, #6
 80100b4:	f7f0 f894 	bl	80001e0 <memchr>
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d03f      	beq.n	801013c <_vfiprintf_r+0x22c>
 80100bc:	4b29      	ldr	r3, [pc, #164]	; (8010164 <_vfiprintf_r+0x254>)
 80100be:	bb1b      	cbnz	r3, 8010108 <_vfiprintf_r+0x1f8>
 80100c0:	9b03      	ldr	r3, [sp, #12]
 80100c2:	3307      	adds	r3, #7
 80100c4:	f023 0307 	bic.w	r3, r3, #7
 80100c8:	3308      	adds	r3, #8
 80100ca:	9303      	str	r3, [sp, #12]
 80100cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100ce:	443b      	add	r3, r7
 80100d0:	9309      	str	r3, [sp, #36]	; 0x24
 80100d2:	e767      	b.n	800ffa4 <_vfiprintf_r+0x94>
 80100d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80100d8:	460c      	mov	r4, r1
 80100da:	2001      	movs	r0, #1
 80100dc:	e7a5      	b.n	801002a <_vfiprintf_r+0x11a>
 80100de:	2300      	movs	r3, #0
 80100e0:	3401      	adds	r4, #1
 80100e2:	9305      	str	r3, [sp, #20]
 80100e4:	4619      	mov	r1, r3
 80100e6:	f04f 0c0a 	mov.w	ip, #10
 80100ea:	4620      	mov	r0, r4
 80100ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80100f0:	3a30      	subs	r2, #48	; 0x30
 80100f2:	2a09      	cmp	r2, #9
 80100f4:	d903      	bls.n	80100fe <_vfiprintf_r+0x1ee>
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d0c5      	beq.n	8010086 <_vfiprintf_r+0x176>
 80100fa:	9105      	str	r1, [sp, #20]
 80100fc:	e7c3      	b.n	8010086 <_vfiprintf_r+0x176>
 80100fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010102:	4604      	mov	r4, r0
 8010104:	2301      	movs	r3, #1
 8010106:	e7f0      	b.n	80100ea <_vfiprintf_r+0x1da>
 8010108:	ab03      	add	r3, sp, #12
 801010a:	9300      	str	r3, [sp, #0]
 801010c:	462a      	mov	r2, r5
 801010e:	4b16      	ldr	r3, [pc, #88]	; (8010168 <_vfiprintf_r+0x258>)
 8010110:	a904      	add	r1, sp, #16
 8010112:	4630      	mov	r0, r6
 8010114:	f7fc fb02 	bl	800c71c <_printf_float>
 8010118:	4607      	mov	r7, r0
 801011a:	1c78      	adds	r0, r7, #1
 801011c:	d1d6      	bne.n	80100cc <_vfiprintf_r+0x1bc>
 801011e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010120:	07d9      	lsls	r1, r3, #31
 8010122:	d405      	bmi.n	8010130 <_vfiprintf_r+0x220>
 8010124:	89ab      	ldrh	r3, [r5, #12]
 8010126:	059a      	lsls	r2, r3, #22
 8010128:	d402      	bmi.n	8010130 <_vfiprintf_r+0x220>
 801012a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801012c:	f000 fadb 	bl	80106e6 <__retarget_lock_release_recursive>
 8010130:	89ab      	ldrh	r3, [r5, #12]
 8010132:	065b      	lsls	r3, r3, #25
 8010134:	f53f af12 	bmi.w	800ff5c <_vfiprintf_r+0x4c>
 8010138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801013a:	e711      	b.n	800ff60 <_vfiprintf_r+0x50>
 801013c:	ab03      	add	r3, sp, #12
 801013e:	9300      	str	r3, [sp, #0]
 8010140:	462a      	mov	r2, r5
 8010142:	4b09      	ldr	r3, [pc, #36]	; (8010168 <_vfiprintf_r+0x258>)
 8010144:	a904      	add	r1, sp, #16
 8010146:	4630      	mov	r0, r6
 8010148:	f7fc fd8c 	bl	800cc64 <_printf_i>
 801014c:	e7e4      	b.n	8010118 <_vfiprintf_r+0x208>
 801014e:	bf00      	nop
 8010150:	08011828 	.word	0x08011828
 8010154:	08011848 	.word	0x08011848
 8010158:	08011808 	.word	0x08011808
 801015c:	080116f4 	.word	0x080116f4
 8010160:	080116fe 	.word	0x080116fe
 8010164:	0800c71d 	.word	0x0800c71d
 8010168:	0800feeb 	.word	0x0800feeb
 801016c:	080116fa 	.word	0x080116fa

08010170 <nan>:
 8010170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010178 <nan+0x8>
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop
 8010178:	00000000 	.word	0x00000000
 801017c:	7ff80000 	.word	0x7ff80000

08010180 <_sbrk_r>:
 8010180:	b538      	push	{r3, r4, r5, lr}
 8010182:	4d06      	ldr	r5, [pc, #24]	; (801019c <_sbrk_r+0x1c>)
 8010184:	2300      	movs	r3, #0
 8010186:	4604      	mov	r4, r0
 8010188:	4608      	mov	r0, r1
 801018a:	602b      	str	r3, [r5, #0]
 801018c:	f7f9 f8d4 	bl	8009338 <_sbrk>
 8010190:	1c43      	adds	r3, r0, #1
 8010192:	d102      	bne.n	801019a <_sbrk_r+0x1a>
 8010194:	682b      	ldr	r3, [r5, #0]
 8010196:	b103      	cbz	r3, 801019a <_sbrk_r+0x1a>
 8010198:	6023      	str	r3, [r4, #0]
 801019a:	bd38      	pop	{r3, r4, r5, pc}
 801019c:	200003e4 	.word	0x200003e4

080101a0 <strncmp>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	b17a      	cbz	r2, 80101c4 <strncmp+0x24>
 80101a4:	4603      	mov	r3, r0
 80101a6:	3901      	subs	r1, #1
 80101a8:	1884      	adds	r4, r0, r2
 80101aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80101ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80101b2:	4290      	cmp	r0, r2
 80101b4:	d101      	bne.n	80101ba <strncmp+0x1a>
 80101b6:	42a3      	cmp	r3, r4
 80101b8:	d101      	bne.n	80101be <strncmp+0x1e>
 80101ba:	1a80      	subs	r0, r0, r2
 80101bc:	bd10      	pop	{r4, pc}
 80101be:	2800      	cmp	r0, #0
 80101c0:	d1f3      	bne.n	80101aa <strncmp+0xa>
 80101c2:	e7fa      	b.n	80101ba <strncmp+0x1a>
 80101c4:	4610      	mov	r0, r2
 80101c6:	e7f9      	b.n	80101bc <strncmp+0x1c>

080101c8 <__swbuf_r>:
 80101c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ca:	460e      	mov	r6, r1
 80101cc:	4614      	mov	r4, r2
 80101ce:	4605      	mov	r5, r0
 80101d0:	b118      	cbz	r0, 80101da <__swbuf_r+0x12>
 80101d2:	6983      	ldr	r3, [r0, #24]
 80101d4:	b90b      	cbnz	r3, 80101da <__swbuf_r+0x12>
 80101d6:	f000 f9e7 	bl	80105a8 <__sinit>
 80101da:	4b21      	ldr	r3, [pc, #132]	; (8010260 <__swbuf_r+0x98>)
 80101dc:	429c      	cmp	r4, r3
 80101de:	d12b      	bne.n	8010238 <__swbuf_r+0x70>
 80101e0:	686c      	ldr	r4, [r5, #4]
 80101e2:	69a3      	ldr	r3, [r4, #24]
 80101e4:	60a3      	str	r3, [r4, #8]
 80101e6:	89a3      	ldrh	r3, [r4, #12]
 80101e8:	071a      	lsls	r2, r3, #28
 80101ea:	d52f      	bpl.n	801024c <__swbuf_r+0x84>
 80101ec:	6923      	ldr	r3, [r4, #16]
 80101ee:	b36b      	cbz	r3, 801024c <__swbuf_r+0x84>
 80101f0:	6923      	ldr	r3, [r4, #16]
 80101f2:	6820      	ldr	r0, [r4, #0]
 80101f4:	1ac0      	subs	r0, r0, r3
 80101f6:	6963      	ldr	r3, [r4, #20]
 80101f8:	b2f6      	uxtb	r6, r6
 80101fa:	4283      	cmp	r3, r0
 80101fc:	4637      	mov	r7, r6
 80101fe:	dc04      	bgt.n	801020a <__swbuf_r+0x42>
 8010200:	4621      	mov	r1, r4
 8010202:	4628      	mov	r0, r5
 8010204:	f000 f93c 	bl	8010480 <_fflush_r>
 8010208:	bb30      	cbnz	r0, 8010258 <__swbuf_r+0x90>
 801020a:	68a3      	ldr	r3, [r4, #8]
 801020c:	3b01      	subs	r3, #1
 801020e:	60a3      	str	r3, [r4, #8]
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	1c5a      	adds	r2, r3, #1
 8010214:	6022      	str	r2, [r4, #0]
 8010216:	701e      	strb	r6, [r3, #0]
 8010218:	6963      	ldr	r3, [r4, #20]
 801021a:	3001      	adds	r0, #1
 801021c:	4283      	cmp	r3, r0
 801021e:	d004      	beq.n	801022a <__swbuf_r+0x62>
 8010220:	89a3      	ldrh	r3, [r4, #12]
 8010222:	07db      	lsls	r3, r3, #31
 8010224:	d506      	bpl.n	8010234 <__swbuf_r+0x6c>
 8010226:	2e0a      	cmp	r6, #10
 8010228:	d104      	bne.n	8010234 <__swbuf_r+0x6c>
 801022a:	4621      	mov	r1, r4
 801022c:	4628      	mov	r0, r5
 801022e:	f000 f927 	bl	8010480 <_fflush_r>
 8010232:	b988      	cbnz	r0, 8010258 <__swbuf_r+0x90>
 8010234:	4638      	mov	r0, r7
 8010236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010238:	4b0a      	ldr	r3, [pc, #40]	; (8010264 <__swbuf_r+0x9c>)
 801023a:	429c      	cmp	r4, r3
 801023c:	d101      	bne.n	8010242 <__swbuf_r+0x7a>
 801023e:	68ac      	ldr	r4, [r5, #8]
 8010240:	e7cf      	b.n	80101e2 <__swbuf_r+0x1a>
 8010242:	4b09      	ldr	r3, [pc, #36]	; (8010268 <__swbuf_r+0xa0>)
 8010244:	429c      	cmp	r4, r3
 8010246:	bf08      	it	eq
 8010248:	68ec      	ldreq	r4, [r5, #12]
 801024a:	e7ca      	b.n	80101e2 <__swbuf_r+0x1a>
 801024c:	4621      	mov	r1, r4
 801024e:	4628      	mov	r0, r5
 8010250:	f000 f81a 	bl	8010288 <__swsetup_r>
 8010254:	2800      	cmp	r0, #0
 8010256:	d0cb      	beq.n	80101f0 <__swbuf_r+0x28>
 8010258:	f04f 37ff 	mov.w	r7, #4294967295
 801025c:	e7ea      	b.n	8010234 <__swbuf_r+0x6c>
 801025e:	bf00      	nop
 8010260:	08011828 	.word	0x08011828
 8010264:	08011848 	.word	0x08011848
 8010268:	08011808 	.word	0x08011808

0801026c <__ascii_wctomb>:
 801026c:	b149      	cbz	r1, 8010282 <__ascii_wctomb+0x16>
 801026e:	2aff      	cmp	r2, #255	; 0xff
 8010270:	bf85      	ittet	hi
 8010272:	238a      	movhi	r3, #138	; 0x8a
 8010274:	6003      	strhi	r3, [r0, #0]
 8010276:	700a      	strbls	r2, [r1, #0]
 8010278:	f04f 30ff 	movhi.w	r0, #4294967295
 801027c:	bf98      	it	ls
 801027e:	2001      	movls	r0, #1
 8010280:	4770      	bx	lr
 8010282:	4608      	mov	r0, r1
 8010284:	4770      	bx	lr
	...

08010288 <__swsetup_r>:
 8010288:	4b32      	ldr	r3, [pc, #200]	; (8010354 <__swsetup_r+0xcc>)
 801028a:	b570      	push	{r4, r5, r6, lr}
 801028c:	681d      	ldr	r5, [r3, #0]
 801028e:	4606      	mov	r6, r0
 8010290:	460c      	mov	r4, r1
 8010292:	b125      	cbz	r5, 801029e <__swsetup_r+0x16>
 8010294:	69ab      	ldr	r3, [r5, #24]
 8010296:	b913      	cbnz	r3, 801029e <__swsetup_r+0x16>
 8010298:	4628      	mov	r0, r5
 801029a:	f000 f985 	bl	80105a8 <__sinit>
 801029e:	4b2e      	ldr	r3, [pc, #184]	; (8010358 <__swsetup_r+0xd0>)
 80102a0:	429c      	cmp	r4, r3
 80102a2:	d10f      	bne.n	80102c4 <__swsetup_r+0x3c>
 80102a4:	686c      	ldr	r4, [r5, #4]
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102ac:	0719      	lsls	r1, r3, #28
 80102ae:	d42c      	bmi.n	801030a <__swsetup_r+0x82>
 80102b0:	06dd      	lsls	r5, r3, #27
 80102b2:	d411      	bmi.n	80102d8 <__swsetup_r+0x50>
 80102b4:	2309      	movs	r3, #9
 80102b6:	6033      	str	r3, [r6, #0]
 80102b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102bc:	81a3      	strh	r3, [r4, #12]
 80102be:	f04f 30ff 	mov.w	r0, #4294967295
 80102c2:	e03e      	b.n	8010342 <__swsetup_r+0xba>
 80102c4:	4b25      	ldr	r3, [pc, #148]	; (801035c <__swsetup_r+0xd4>)
 80102c6:	429c      	cmp	r4, r3
 80102c8:	d101      	bne.n	80102ce <__swsetup_r+0x46>
 80102ca:	68ac      	ldr	r4, [r5, #8]
 80102cc:	e7eb      	b.n	80102a6 <__swsetup_r+0x1e>
 80102ce:	4b24      	ldr	r3, [pc, #144]	; (8010360 <__swsetup_r+0xd8>)
 80102d0:	429c      	cmp	r4, r3
 80102d2:	bf08      	it	eq
 80102d4:	68ec      	ldreq	r4, [r5, #12]
 80102d6:	e7e6      	b.n	80102a6 <__swsetup_r+0x1e>
 80102d8:	0758      	lsls	r0, r3, #29
 80102da:	d512      	bpl.n	8010302 <__swsetup_r+0x7a>
 80102dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80102de:	b141      	cbz	r1, 80102f2 <__swsetup_r+0x6a>
 80102e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102e4:	4299      	cmp	r1, r3
 80102e6:	d002      	beq.n	80102ee <__swsetup_r+0x66>
 80102e8:	4630      	mov	r0, r6
 80102ea:	f7ff fbab 	bl	800fa44 <_free_r>
 80102ee:	2300      	movs	r3, #0
 80102f0:	6363      	str	r3, [r4, #52]	; 0x34
 80102f2:	89a3      	ldrh	r3, [r4, #12]
 80102f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102f8:	81a3      	strh	r3, [r4, #12]
 80102fa:	2300      	movs	r3, #0
 80102fc:	6063      	str	r3, [r4, #4]
 80102fe:	6923      	ldr	r3, [r4, #16]
 8010300:	6023      	str	r3, [r4, #0]
 8010302:	89a3      	ldrh	r3, [r4, #12]
 8010304:	f043 0308 	orr.w	r3, r3, #8
 8010308:	81a3      	strh	r3, [r4, #12]
 801030a:	6923      	ldr	r3, [r4, #16]
 801030c:	b94b      	cbnz	r3, 8010322 <__swsetup_r+0x9a>
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010318:	d003      	beq.n	8010322 <__swsetup_r+0x9a>
 801031a:	4621      	mov	r1, r4
 801031c:	4630      	mov	r0, r6
 801031e:	f000 fa09 	bl	8010734 <__smakebuf_r>
 8010322:	89a0      	ldrh	r0, [r4, #12]
 8010324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010328:	f010 0301 	ands.w	r3, r0, #1
 801032c:	d00a      	beq.n	8010344 <__swsetup_r+0xbc>
 801032e:	2300      	movs	r3, #0
 8010330:	60a3      	str	r3, [r4, #8]
 8010332:	6963      	ldr	r3, [r4, #20]
 8010334:	425b      	negs	r3, r3
 8010336:	61a3      	str	r3, [r4, #24]
 8010338:	6923      	ldr	r3, [r4, #16]
 801033a:	b943      	cbnz	r3, 801034e <__swsetup_r+0xc6>
 801033c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010340:	d1ba      	bne.n	80102b8 <__swsetup_r+0x30>
 8010342:	bd70      	pop	{r4, r5, r6, pc}
 8010344:	0781      	lsls	r1, r0, #30
 8010346:	bf58      	it	pl
 8010348:	6963      	ldrpl	r3, [r4, #20]
 801034a:	60a3      	str	r3, [r4, #8]
 801034c:	e7f4      	b.n	8010338 <__swsetup_r+0xb0>
 801034e:	2000      	movs	r0, #0
 8010350:	e7f7      	b.n	8010342 <__swsetup_r+0xba>
 8010352:	bf00      	nop
 8010354:	2000000c 	.word	0x2000000c
 8010358:	08011828 	.word	0x08011828
 801035c:	08011848 	.word	0x08011848
 8010360:	08011808 	.word	0x08011808

08010364 <abort>:
 8010364:	b508      	push	{r3, lr}
 8010366:	2006      	movs	r0, #6
 8010368:	f000 faa2 	bl	80108b0 <raise>
 801036c:	2001      	movs	r0, #1
 801036e:	f7f8 ff6b 	bl	8009248 <_exit>
	...

08010374 <__sflush_r>:
 8010374:	898a      	ldrh	r2, [r1, #12]
 8010376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801037a:	4605      	mov	r5, r0
 801037c:	0710      	lsls	r0, r2, #28
 801037e:	460c      	mov	r4, r1
 8010380:	d458      	bmi.n	8010434 <__sflush_r+0xc0>
 8010382:	684b      	ldr	r3, [r1, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	dc05      	bgt.n	8010394 <__sflush_r+0x20>
 8010388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801038a:	2b00      	cmp	r3, #0
 801038c:	dc02      	bgt.n	8010394 <__sflush_r+0x20>
 801038e:	2000      	movs	r0, #0
 8010390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010396:	2e00      	cmp	r6, #0
 8010398:	d0f9      	beq.n	801038e <__sflush_r+0x1a>
 801039a:	2300      	movs	r3, #0
 801039c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103a0:	682f      	ldr	r7, [r5, #0]
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	d032      	beq.n	801040c <__sflush_r+0x98>
 80103a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	075a      	lsls	r2, r3, #29
 80103ac:	d505      	bpl.n	80103ba <__sflush_r+0x46>
 80103ae:	6863      	ldr	r3, [r4, #4]
 80103b0:	1ac0      	subs	r0, r0, r3
 80103b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103b4:	b10b      	cbz	r3, 80103ba <__sflush_r+0x46>
 80103b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103b8:	1ac0      	subs	r0, r0, r3
 80103ba:	2300      	movs	r3, #0
 80103bc:	4602      	mov	r2, r0
 80103be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103c0:	6a21      	ldr	r1, [r4, #32]
 80103c2:	4628      	mov	r0, r5
 80103c4:	47b0      	blx	r6
 80103c6:	1c43      	adds	r3, r0, #1
 80103c8:	89a3      	ldrh	r3, [r4, #12]
 80103ca:	d106      	bne.n	80103da <__sflush_r+0x66>
 80103cc:	6829      	ldr	r1, [r5, #0]
 80103ce:	291d      	cmp	r1, #29
 80103d0:	d82c      	bhi.n	801042c <__sflush_r+0xb8>
 80103d2:	4a2a      	ldr	r2, [pc, #168]	; (801047c <__sflush_r+0x108>)
 80103d4:	40ca      	lsrs	r2, r1
 80103d6:	07d6      	lsls	r6, r2, #31
 80103d8:	d528      	bpl.n	801042c <__sflush_r+0xb8>
 80103da:	2200      	movs	r2, #0
 80103dc:	6062      	str	r2, [r4, #4]
 80103de:	04d9      	lsls	r1, r3, #19
 80103e0:	6922      	ldr	r2, [r4, #16]
 80103e2:	6022      	str	r2, [r4, #0]
 80103e4:	d504      	bpl.n	80103f0 <__sflush_r+0x7c>
 80103e6:	1c42      	adds	r2, r0, #1
 80103e8:	d101      	bne.n	80103ee <__sflush_r+0x7a>
 80103ea:	682b      	ldr	r3, [r5, #0]
 80103ec:	b903      	cbnz	r3, 80103f0 <__sflush_r+0x7c>
 80103ee:	6560      	str	r0, [r4, #84]	; 0x54
 80103f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103f2:	602f      	str	r7, [r5, #0]
 80103f4:	2900      	cmp	r1, #0
 80103f6:	d0ca      	beq.n	801038e <__sflush_r+0x1a>
 80103f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103fc:	4299      	cmp	r1, r3
 80103fe:	d002      	beq.n	8010406 <__sflush_r+0x92>
 8010400:	4628      	mov	r0, r5
 8010402:	f7ff fb1f 	bl	800fa44 <_free_r>
 8010406:	2000      	movs	r0, #0
 8010408:	6360      	str	r0, [r4, #52]	; 0x34
 801040a:	e7c1      	b.n	8010390 <__sflush_r+0x1c>
 801040c:	6a21      	ldr	r1, [r4, #32]
 801040e:	2301      	movs	r3, #1
 8010410:	4628      	mov	r0, r5
 8010412:	47b0      	blx	r6
 8010414:	1c41      	adds	r1, r0, #1
 8010416:	d1c7      	bne.n	80103a8 <__sflush_r+0x34>
 8010418:	682b      	ldr	r3, [r5, #0]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d0c4      	beq.n	80103a8 <__sflush_r+0x34>
 801041e:	2b1d      	cmp	r3, #29
 8010420:	d001      	beq.n	8010426 <__sflush_r+0xb2>
 8010422:	2b16      	cmp	r3, #22
 8010424:	d101      	bne.n	801042a <__sflush_r+0xb6>
 8010426:	602f      	str	r7, [r5, #0]
 8010428:	e7b1      	b.n	801038e <__sflush_r+0x1a>
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	e7ad      	b.n	8010390 <__sflush_r+0x1c>
 8010434:	690f      	ldr	r7, [r1, #16]
 8010436:	2f00      	cmp	r7, #0
 8010438:	d0a9      	beq.n	801038e <__sflush_r+0x1a>
 801043a:	0793      	lsls	r3, r2, #30
 801043c:	680e      	ldr	r6, [r1, #0]
 801043e:	bf08      	it	eq
 8010440:	694b      	ldreq	r3, [r1, #20]
 8010442:	600f      	str	r7, [r1, #0]
 8010444:	bf18      	it	ne
 8010446:	2300      	movne	r3, #0
 8010448:	eba6 0807 	sub.w	r8, r6, r7
 801044c:	608b      	str	r3, [r1, #8]
 801044e:	f1b8 0f00 	cmp.w	r8, #0
 8010452:	dd9c      	ble.n	801038e <__sflush_r+0x1a>
 8010454:	6a21      	ldr	r1, [r4, #32]
 8010456:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010458:	4643      	mov	r3, r8
 801045a:	463a      	mov	r2, r7
 801045c:	4628      	mov	r0, r5
 801045e:	47b0      	blx	r6
 8010460:	2800      	cmp	r0, #0
 8010462:	dc06      	bgt.n	8010472 <__sflush_r+0xfe>
 8010464:	89a3      	ldrh	r3, [r4, #12]
 8010466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801046a:	81a3      	strh	r3, [r4, #12]
 801046c:	f04f 30ff 	mov.w	r0, #4294967295
 8010470:	e78e      	b.n	8010390 <__sflush_r+0x1c>
 8010472:	4407      	add	r7, r0
 8010474:	eba8 0800 	sub.w	r8, r8, r0
 8010478:	e7e9      	b.n	801044e <__sflush_r+0xda>
 801047a:	bf00      	nop
 801047c:	20400001 	.word	0x20400001

08010480 <_fflush_r>:
 8010480:	b538      	push	{r3, r4, r5, lr}
 8010482:	690b      	ldr	r3, [r1, #16]
 8010484:	4605      	mov	r5, r0
 8010486:	460c      	mov	r4, r1
 8010488:	b913      	cbnz	r3, 8010490 <_fflush_r+0x10>
 801048a:	2500      	movs	r5, #0
 801048c:	4628      	mov	r0, r5
 801048e:	bd38      	pop	{r3, r4, r5, pc}
 8010490:	b118      	cbz	r0, 801049a <_fflush_r+0x1a>
 8010492:	6983      	ldr	r3, [r0, #24]
 8010494:	b90b      	cbnz	r3, 801049a <_fflush_r+0x1a>
 8010496:	f000 f887 	bl	80105a8 <__sinit>
 801049a:	4b14      	ldr	r3, [pc, #80]	; (80104ec <_fflush_r+0x6c>)
 801049c:	429c      	cmp	r4, r3
 801049e:	d11b      	bne.n	80104d8 <_fflush_r+0x58>
 80104a0:	686c      	ldr	r4, [r5, #4]
 80104a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d0ef      	beq.n	801048a <_fflush_r+0xa>
 80104aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80104ac:	07d0      	lsls	r0, r2, #31
 80104ae:	d404      	bmi.n	80104ba <_fflush_r+0x3a>
 80104b0:	0599      	lsls	r1, r3, #22
 80104b2:	d402      	bmi.n	80104ba <_fflush_r+0x3a>
 80104b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104b6:	f000 f915 	bl	80106e4 <__retarget_lock_acquire_recursive>
 80104ba:	4628      	mov	r0, r5
 80104bc:	4621      	mov	r1, r4
 80104be:	f7ff ff59 	bl	8010374 <__sflush_r>
 80104c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104c4:	07da      	lsls	r2, r3, #31
 80104c6:	4605      	mov	r5, r0
 80104c8:	d4e0      	bmi.n	801048c <_fflush_r+0xc>
 80104ca:	89a3      	ldrh	r3, [r4, #12]
 80104cc:	059b      	lsls	r3, r3, #22
 80104ce:	d4dd      	bmi.n	801048c <_fflush_r+0xc>
 80104d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104d2:	f000 f908 	bl	80106e6 <__retarget_lock_release_recursive>
 80104d6:	e7d9      	b.n	801048c <_fflush_r+0xc>
 80104d8:	4b05      	ldr	r3, [pc, #20]	; (80104f0 <_fflush_r+0x70>)
 80104da:	429c      	cmp	r4, r3
 80104dc:	d101      	bne.n	80104e2 <_fflush_r+0x62>
 80104de:	68ac      	ldr	r4, [r5, #8]
 80104e0:	e7df      	b.n	80104a2 <_fflush_r+0x22>
 80104e2:	4b04      	ldr	r3, [pc, #16]	; (80104f4 <_fflush_r+0x74>)
 80104e4:	429c      	cmp	r4, r3
 80104e6:	bf08      	it	eq
 80104e8:	68ec      	ldreq	r4, [r5, #12]
 80104ea:	e7da      	b.n	80104a2 <_fflush_r+0x22>
 80104ec:	08011828 	.word	0x08011828
 80104f0:	08011848 	.word	0x08011848
 80104f4:	08011808 	.word	0x08011808

080104f8 <std>:
 80104f8:	2300      	movs	r3, #0
 80104fa:	b510      	push	{r4, lr}
 80104fc:	4604      	mov	r4, r0
 80104fe:	e9c0 3300 	strd	r3, r3, [r0]
 8010502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010506:	6083      	str	r3, [r0, #8]
 8010508:	8181      	strh	r1, [r0, #12]
 801050a:	6643      	str	r3, [r0, #100]	; 0x64
 801050c:	81c2      	strh	r2, [r0, #14]
 801050e:	6183      	str	r3, [r0, #24]
 8010510:	4619      	mov	r1, r3
 8010512:	2208      	movs	r2, #8
 8010514:	305c      	adds	r0, #92	; 0x5c
 8010516:	f7fc f859 	bl	800c5cc <memset>
 801051a:	4b05      	ldr	r3, [pc, #20]	; (8010530 <std+0x38>)
 801051c:	6263      	str	r3, [r4, #36]	; 0x24
 801051e:	4b05      	ldr	r3, [pc, #20]	; (8010534 <std+0x3c>)
 8010520:	62a3      	str	r3, [r4, #40]	; 0x28
 8010522:	4b05      	ldr	r3, [pc, #20]	; (8010538 <std+0x40>)
 8010524:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010526:	4b05      	ldr	r3, [pc, #20]	; (801053c <std+0x44>)
 8010528:	6224      	str	r4, [r4, #32]
 801052a:	6323      	str	r3, [r4, #48]	; 0x30
 801052c:	bd10      	pop	{r4, pc}
 801052e:	bf00      	nop
 8010530:	080108e9 	.word	0x080108e9
 8010534:	0801090b 	.word	0x0801090b
 8010538:	08010943 	.word	0x08010943
 801053c:	08010967 	.word	0x08010967

08010540 <_cleanup_r>:
 8010540:	4901      	ldr	r1, [pc, #4]	; (8010548 <_cleanup_r+0x8>)
 8010542:	f000 b8af 	b.w	80106a4 <_fwalk_reent>
 8010546:	bf00      	nop
 8010548:	08010481 	.word	0x08010481

0801054c <__sfmoreglue>:
 801054c:	b570      	push	{r4, r5, r6, lr}
 801054e:	2268      	movs	r2, #104	; 0x68
 8010550:	1e4d      	subs	r5, r1, #1
 8010552:	4355      	muls	r5, r2
 8010554:	460e      	mov	r6, r1
 8010556:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801055a:	f7ff fadf 	bl	800fb1c <_malloc_r>
 801055e:	4604      	mov	r4, r0
 8010560:	b140      	cbz	r0, 8010574 <__sfmoreglue+0x28>
 8010562:	2100      	movs	r1, #0
 8010564:	e9c0 1600 	strd	r1, r6, [r0]
 8010568:	300c      	adds	r0, #12
 801056a:	60a0      	str	r0, [r4, #8]
 801056c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010570:	f7fc f82c 	bl	800c5cc <memset>
 8010574:	4620      	mov	r0, r4
 8010576:	bd70      	pop	{r4, r5, r6, pc}

08010578 <__sfp_lock_acquire>:
 8010578:	4801      	ldr	r0, [pc, #4]	; (8010580 <__sfp_lock_acquire+0x8>)
 801057a:	f000 b8b3 	b.w	80106e4 <__retarget_lock_acquire_recursive>
 801057e:	bf00      	nop
 8010580:	200003e1 	.word	0x200003e1

08010584 <__sfp_lock_release>:
 8010584:	4801      	ldr	r0, [pc, #4]	; (801058c <__sfp_lock_release+0x8>)
 8010586:	f000 b8ae 	b.w	80106e6 <__retarget_lock_release_recursive>
 801058a:	bf00      	nop
 801058c:	200003e1 	.word	0x200003e1

08010590 <__sinit_lock_acquire>:
 8010590:	4801      	ldr	r0, [pc, #4]	; (8010598 <__sinit_lock_acquire+0x8>)
 8010592:	f000 b8a7 	b.w	80106e4 <__retarget_lock_acquire_recursive>
 8010596:	bf00      	nop
 8010598:	200003e2 	.word	0x200003e2

0801059c <__sinit_lock_release>:
 801059c:	4801      	ldr	r0, [pc, #4]	; (80105a4 <__sinit_lock_release+0x8>)
 801059e:	f000 b8a2 	b.w	80106e6 <__retarget_lock_release_recursive>
 80105a2:	bf00      	nop
 80105a4:	200003e2 	.word	0x200003e2

080105a8 <__sinit>:
 80105a8:	b510      	push	{r4, lr}
 80105aa:	4604      	mov	r4, r0
 80105ac:	f7ff fff0 	bl	8010590 <__sinit_lock_acquire>
 80105b0:	69a3      	ldr	r3, [r4, #24]
 80105b2:	b11b      	cbz	r3, 80105bc <__sinit+0x14>
 80105b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105b8:	f7ff bff0 	b.w	801059c <__sinit_lock_release>
 80105bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80105c0:	6523      	str	r3, [r4, #80]	; 0x50
 80105c2:	4b13      	ldr	r3, [pc, #76]	; (8010610 <__sinit+0x68>)
 80105c4:	4a13      	ldr	r2, [pc, #76]	; (8010614 <__sinit+0x6c>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80105ca:	42a3      	cmp	r3, r4
 80105cc:	bf04      	itt	eq
 80105ce:	2301      	moveq	r3, #1
 80105d0:	61a3      	streq	r3, [r4, #24]
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 f820 	bl	8010618 <__sfp>
 80105d8:	6060      	str	r0, [r4, #4]
 80105da:	4620      	mov	r0, r4
 80105dc:	f000 f81c 	bl	8010618 <__sfp>
 80105e0:	60a0      	str	r0, [r4, #8]
 80105e2:	4620      	mov	r0, r4
 80105e4:	f000 f818 	bl	8010618 <__sfp>
 80105e8:	2200      	movs	r2, #0
 80105ea:	60e0      	str	r0, [r4, #12]
 80105ec:	2104      	movs	r1, #4
 80105ee:	6860      	ldr	r0, [r4, #4]
 80105f0:	f7ff ff82 	bl	80104f8 <std>
 80105f4:	68a0      	ldr	r0, [r4, #8]
 80105f6:	2201      	movs	r2, #1
 80105f8:	2109      	movs	r1, #9
 80105fa:	f7ff ff7d 	bl	80104f8 <std>
 80105fe:	68e0      	ldr	r0, [r4, #12]
 8010600:	2202      	movs	r2, #2
 8010602:	2112      	movs	r1, #18
 8010604:	f7ff ff78 	bl	80104f8 <std>
 8010608:	2301      	movs	r3, #1
 801060a:	61a3      	str	r3, [r4, #24]
 801060c:	e7d2      	b.n	80105b4 <__sinit+0xc>
 801060e:	bf00      	nop
 8010610:	08011370 	.word	0x08011370
 8010614:	08010541 	.word	0x08010541

08010618 <__sfp>:
 8010618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801061a:	4607      	mov	r7, r0
 801061c:	f7ff ffac 	bl	8010578 <__sfp_lock_acquire>
 8010620:	4b1e      	ldr	r3, [pc, #120]	; (801069c <__sfp+0x84>)
 8010622:	681e      	ldr	r6, [r3, #0]
 8010624:	69b3      	ldr	r3, [r6, #24]
 8010626:	b913      	cbnz	r3, 801062e <__sfp+0x16>
 8010628:	4630      	mov	r0, r6
 801062a:	f7ff ffbd 	bl	80105a8 <__sinit>
 801062e:	3648      	adds	r6, #72	; 0x48
 8010630:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010634:	3b01      	subs	r3, #1
 8010636:	d503      	bpl.n	8010640 <__sfp+0x28>
 8010638:	6833      	ldr	r3, [r6, #0]
 801063a:	b30b      	cbz	r3, 8010680 <__sfp+0x68>
 801063c:	6836      	ldr	r6, [r6, #0]
 801063e:	e7f7      	b.n	8010630 <__sfp+0x18>
 8010640:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010644:	b9d5      	cbnz	r5, 801067c <__sfp+0x64>
 8010646:	4b16      	ldr	r3, [pc, #88]	; (80106a0 <__sfp+0x88>)
 8010648:	60e3      	str	r3, [r4, #12]
 801064a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801064e:	6665      	str	r5, [r4, #100]	; 0x64
 8010650:	f000 f847 	bl	80106e2 <__retarget_lock_init_recursive>
 8010654:	f7ff ff96 	bl	8010584 <__sfp_lock_release>
 8010658:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801065c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010660:	6025      	str	r5, [r4, #0]
 8010662:	61a5      	str	r5, [r4, #24]
 8010664:	2208      	movs	r2, #8
 8010666:	4629      	mov	r1, r5
 8010668:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801066c:	f7fb ffae 	bl	800c5cc <memset>
 8010670:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010674:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010678:	4620      	mov	r0, r4
 801067a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801067c:	3468      	adds	r4, #104	; 0x68
 801067e:	e7d9      	b.n	8010634 <__sfp+0x1c>
 8010680:	2104      	movs	r1, #4
 8010682:	4638      	mov	r0, r7
 8010684:	f7ff ff62 	bl	801054c <__sfmoreglue>
 8010688:	4604      	mov	r4, r0
 801068a:	6030      	str	r0, [r6, #0]
 801068c:	2800      	cmp	r0, #0
 801068e:	d1d5      	bne.n	801063c <__sfp+0x24>
 8010690:	f7ff ff78 	bl	8010584 <__sfp_lock_release>
 8010694:	230c      	movs	r3, #12
 8010696:	603b      	str	r3, [r7, #0]
 8010698:	e7ee      	b.n	8010678 <__sfp+0x60>
 801069a:	bf00      	nop
 801069c:	08011370 	.word	0x08011370
 80106a0:	ffff0001 	.word	0xffff0001

080106a4 <_fwalk_reent>:
 80106a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106a8:	4606      	mov	r6, r0
 80106aa:	4688      	mov	r8, r1
 80106ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106b0:	2700      	movs	r7, #0
 80106b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106b6:	f1b9 0901 	subs.w	r9, r9, #1
 80106ba:	d505      	bpl.n	80106c8 <_fwalk_reent+0x24>
 80106bc:	6824      	ldr	r4, [r4, #0]
 80106be:	2c00      	cmp	r4, #0
 80106c0:	d1f7      	bne.n	80106b2 <_fwalk_reent+0xe>
 80106c2:	4638      	mov	r0, r7
 80106c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106c8:	89ab      	ldrh	r3, [r5, #12]
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d907      	bls.n	80106de <_fwalk_reent+0x3a>
 80106ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106d2:	3301      	adds	r3, #1
 80106d4:	d003      	beq.n	80106de <_fwalk_reent+0x3a>
 80106d6:	4629      	mov	r1, r5
 80106d8:	4630      	mov	r0, r6
 80106da:	47c0      	blx	r8
 80106dc:	4307      	orrs	r7, r0
 80106de:	3568      	adds	r5, #104	; 0x68
 80106e0:	e7e9      	b.n	80106b6 <_fwalk_reent+0x12>

080106e2 <__retarget_lock_init_recursive>:
 80106e2:	4770      	bx	lr

080106e4 <__retarget_lock_acquire_recursive>:
 80106e4:	4770      	bx	lr

080106e6 <__retarget_lock_release_recursive>:
 80106e6:	4770      	bx	lr

080106e8 <__swhatbuf_r>:
 80106e8:	b570      	push	{r4, r5, r6, lr}
 80106ea:	460e      	mov	r6, r1
 80106ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106f0:	2900      	cmp	r1, #0
 80106f2:	b096      	sub	sp, #88	; 0x58
 80106f4:	4614      	mov	r4, r2
 80106f6:	461d      	mov	r5, r3
 80106f8:	da08      	bge.n	801070c <__swhatbuf_r+0x24>
 80106fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80106fe:	2200      	movs	r2, #0
 8010700:	602a      	str	r2, [r5, #0]
 8010702:	061a      	lsls	r2, r3, #24
 8010704:	d410      	bmi.n	8010728 <__swhatbuf_r+0x40>
 8010706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801070a:	e00e      	b.n	801072a <__swhatbuf_r+0x42>
 801070c:	466a      	mov	r2, sp
 801070e:	f000 f951 	bl	80109b4 <_fstat_r>
 8010712:	2800      	cmp	r0, #0
 8010714:	dbf1      	blt.n	80106fa <__swhatbuf_r+0x12>
 8010716:	9a01      	ldr	r2, [sp, #4]
 8010718:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801071c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010720:	425a      	negs	r2, r3
 8010722:	415a      	adcs	r2, r3
 8010724:	602a      	str	r2, [r5, #0]
 8010726:	e7ee      	b.n	8010706 <__swhatbuf_r+0x1e>
 8010728:	2340      	movs	r3, #64	; 0x40
 801072a:	2000      	movs	r0, #0
 801072c:	6023      	str	r3, [r4, #0]
 801072e:	b016      	add	sp, #88	; 0x58
 8010730:	bd70      	pop	{r4, r5, r6, pc}
	...

08010734 <__smakebuf_r>:
 8010734:	898b      	ldrh	r3, [r1, #12]
 8010736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010738:	079d      	lsls	r5, r3, #30
 801073a:	4606      	mov	r6, r0
 801073c:	460c      	mov	r4, r1
 801073e:	d507      	bpl.n	8010750 <__smakebuf_r+0x1c>
 8010740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	6123      	str	r3, [r4, #16]
 8010748:	2301      	movs	r3, #1
 801074a:	6163      	str	r3, [r4, #20]
 801074c:	b002      	add	sp, #8
 801074e:	bd70      	pop	{r4, r5, r6, pc}
 8010750:	ab01      	add	r3, sp, #4
 8010752:	466a      	mov	r2, sp
 8010754:	f7ff ffc8 	bl	80106e8 <__swhatbuf_r>
 8010758:	9900      	ldr	r1, [sp, #0]
 801075a:	4605      	mov	r5, r0
 801075c:	4630      	mov	r0, r6
 801075e:	f7ff f9dd 	bl	800fb1c <_malloc_r>
 8010762:	b948      	cbnz	r0, 8010778 <__smakebuf_r+0x44>
 8010764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010768:	059a      	lsls	r2, r3, #22
 801076a:	d4ef      	bmi.n	801074c <__smakebuf_r+0x18>
 801076c:	f023 0303 	bic.w	r3, r3, #3
 8010770:	f043 0302 	orr.w	r3, r3, #2
 8010774:	81a3      	strh	r3, [r4, #12]
 8010776:	e7e3      	b.n	8010740 <__smakebuf_r+0xc>
 8010778:	4b0d      	ldr	r3, [pc, #52]	; (80107b0 <__smakebuf_r+0x7c>)
 801077a:	62b3      	str	r3, [r6, #40]	; 0x28
 801077c:	89a3      	ldrh	r3, [r4, #12]
 801077e:	6020      	str	r0, [r4, #0]
 8010780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010784:	81a3      	strh	r3, [r4, #12]
 8010786:	9b00      	ldr	r3, [sp, #0]
 8010788:	6163      	str	r3, [r4, #20]
 801078a:	9b01      	ldr	r3, [sp, #4]
 801078c:	6120      	str	r0, [r4, #16]
 801078e:	b15b      	cbz	r3, 80107a8 <__smakebuf_r+0x74>
 8010790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010794:	4630      	mov	r0, r6
 8010796:	f000 f91f 	bl	80109d8 <_isatty_r>
 801079a:	b128      	cbz	r0, 80107a8 <__smakebuf_r+0x74>
 801079c:	89a3      	ldrh	r3, [r4, #12]
 801079e:	f023 0303 	bic.w	r3, r3, #3
 80107a2:	f043 0301 	orr.w	r3, r3, #1
 80107a6:	81a3      	strh	r3, [r4, #12]
 80107a8:	89a0      	ldrh	r0, [r4, #12]
 80107aa:	4305      	orrs	r5, r0
 80107ac:	81a5      	strh	r5, [r4, #12]
 80107ae:	e7cd      	b.n	801074c <__smakebuf_r+0x18>
 80107b0:	08010541 	.word	0x08010541

080107b4 <memmove>:
 80107b4:	4288      	cmp	r0, r1
 80107b6:	b510      	push	{r4, lr}
 80107b8:	eb01 0402 	add.w	r4, r1, r2
 80107bc:	d902      	bls.n	80107c4 <memmove+0x10>
 80107be:	4284      	cmp	r4, r0
 80107c0:	4623      	mov	r3, r4
 80107c2:	d807      	bhi.n	80107d4 <memmove+0x20>
 80107c4:	1e43      	subs	r3, r0, #1
 80107c6:	42a1      	cmp	r1, r4
 80107c8:	d008      	beq.n	80107dc <memmove+0x28>
 80107ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107d2:	e7f8      	b.n	80107c6 <memmove+0x12>
 80107d4:	4402      	add	r2, r0
 80107d6:	4601      	mov	r1, r0
 80107d8:	428a      	cmp	r2, r1
 80107da:	d100      	bne.n	80107de <memmove+0x2a>
 80107dc:	bd10      	pop	{r4, pc}
 80107de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107e6:	e7f7      	b.n	80107d8 <memmove+0x24>

080107e8 <__malloc_lock>:
 80107e8:	4801      	ldr	r0, [pc, #4]	; (80107f0 <__malloc_lock+0x8>)
 80107ea:	f7ff bf7b 	b.w	80106e4 <__retarget_lock_acquire_recursive>
 80107ee:	bf00      	nop
 80107f0:	200003e0 	.word	0x200003e0

080107f4 <__malloc_unlock>:
 80107f4:	4801      	ldr	r0, [pc, #4]	; (80107fc <__malloc_unlock+0x8>)
 80107f6:	f7ff bf76 	b.w	80106e6 <__retarget_lock_release_recursive>
 80107fa:	bf00      	nop
 80107fc:	200003e0 	.word	0x200003e0

08010800 <_realloc_r>:
 8010800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010804:	4680      	mov	r8, r0
 8010806:	4614      	mov	r4, r2
 8010808:	460e      	mov	r6, r1
 801080a:	b921      	cbnz	r1, 8010816 <_realloc_r+0x16>
 801080c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010810:	4611      	mov	r1, r2
 8010812:	f7ff b983 	b.w	800fb1c <_malloc_r>
 8010816:	b92a      	cbnz	r2, 8010824 <_realloc_r+0x24>
 8010818:	f7ff f914 	bl	800fa44 <_free_r>
 801081c:	4625      	mov	r5, r4
 801081e:	4628      	mov	r0, r5
 8010820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010824:	f000 f8fa 	bl	8010a1c <_malloc_usable_size_r>
 8010828:	4284      	cmp	r4, r0
 801082a:	4607      	mov	r7, r0
 801082c:	d802      	bhi.n	8010834 <_realloc_r+0x34>
 801082e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010832:	d812      	bhi.n	801085a <_realloc_r+0x5a>
 8010834:	4621      	mov	r1, r4
 8010836:	4640      	mov	r0, r8
 8010838:	f7ff f970 	bl	800fb1c <_malloc_r>
 801083c:	4605      	mov	r5, r0
 801083e:	2800      	cmp	r0, #0
 8010840:	d0ed      	beq.n	801081e <_realloc_r+0x1e>
 8010842:	42bc      	cmp	r4, r7
 8010844:	4622      	mov	r2, r4
 8010846:	4631      	mov	r1, r6
 8010848:	bf28      	it	cs
 801084a:	463a      	movcs	r2, r7
 801084c:	f7fb feb0 	bl	800c5b0 <memcpy>
 8010850:	4631      	mov	r1, r6
 8010852:	4640      	mov	r0, r8
 8010854:	f7ff f8f6 	bl	800fa44 <_free_r>
 8010858:	e7e1      	b.n	801081e <_realloc_r+0x1e>
 801085a:	4635      	mov	r5, r6
 801085c:	e7df      	b.n	801081e <_realloc_r+0x1e>

0801085e <_raise_r>:
 801085e:	291f      	cmp	r1, #31
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4604      	mov	r4, r0
 8010864:	460d      	mov	r5, r1
 8010866:	d904      	bls.n	8010872 <_raise_r+0x14>
 8010868:	2316      	movs	r3, #22
 801086a:	6003      	str	r3, [r0, #0]
 801086c:	f04f 30ff 	mov.w	r0, #4294967295
 8010870:	bd38      	pop	{r3, r4, r5, pc}
 8010872:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010874:	b112      	cbz	r2, 801087c <_raise_r+0x1e>
 8010876:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801087a:	b94b      	cbnz	r3, 8010890 <_raise_r+0x32>
 801087c:	4620      	mov	r0, r4
 801087e:	f000 f831 	bl	80108e4 <_getpid_r>
 8010882:	462a      	mov	r2, r5
 8010884:	4601      	mov	r1, r0
 8010886:	4620      	mov	r0, r4
 8010888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801088c:	f000 b818 	b.w	80108c0 <_kill_r>
 8010890:	2b01      	cmp	r3, #1
 8010892:	d00a      	beq.n	80108aa <_raise_r+0x4c>
 8010894:	1c59      	adds	r1, r3, #1
 8010896:	d103      	bne.n	80108a0 <_raise_r+0x42>
 8010898:	2316      	movs	r3, #22
 801089a:	6003      	str	r3, [r0, #0]
 801089c:	2001      	movs	r0, #1
 801089e:	e7e7      	b.n	8010870 <_raise_r+0x12>
 80108a0:	2400      	movs	r4, #0
 80108a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108a6:	4628      	mov	r0, r5
 80108a8:	4798      	blx	r3
 80108aa:	2000      	movs	r0, #0
 80108ac:	e7e0      	b.n	8010870 <_raise_r+0x12>
	...

080108b0 <raise>:
 80108b0:	4b02      	ldr	r3, [pc, #8]	; (80108bc <raise+0xc>)
 80108b2:	4601      	mov	r1, r0
 80108b4:	6818      	ldr	r0, [r3, #0]
 80108b6:	f7ff bfd2 	b.w	801085e <_raise_r>
 80108ba:	bf00      	nop
 80108bc:	2000000c 	.word	0x2000000c

080108c0 <_kill_r>:
 80108c0:	b538      	push	{r3, r4, r5, lr}
 80108c2:	4d07      	ldr	r5, [pc, #28]	; (80108e0 <_kill_r+0x20>)
 80108c4:	2300      	movs	r3, #0
 80108c6:	4604      	mov	r4, r0
 80108c8:	4608      	mov	r0, r1
 80108ca:	4611      	mov	r1, r2
 80108cc:	602b      	str	r3, [r5, #0]
 80108ce:	f7f8 fcab 	bl	8009228 <_kill>
 80108d2:	1c43      	adds	r3, r0, #1
 80108d4:	d102      	bne.n	80108dc <_kill_r+0x1c>
 80108d6:	682b      	ldr	r3, [r5, #0]
 80108d8:	b103      	cbz	r3, 80108dc <_kill_r+0x1c>
 80108da:	6023      	str	r3, [r4, #0]
 80108dc:	bd38      	pop	{r3, r4, r5, pc}
 80108de:	bf00      	nop
 80108e0:	200003e4 	.word	0x200003e4

080108e4 <_getpid_r>:
 80108e4:	f7f8 bc98 	b.w	8009218 <_getpid>

080108e8 <__sread>:
 80108e8:	b510      	push	{r4, lr}
 80108ea:	460c      	mov	r4, r1
 80108ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f0:	f000 f89c 	bl	8010a2c <_read_r>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	bfab      	itete	ge
 80108f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80108fa:	89a3      	ldrhlt	r3, [r4, #12]
 80108fc:	181b      	addge	r3, r3, r0
 80108fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010902:	bfac      	ite	ge
 8010904:	6563      	strge	r3, [r4, #84]	; 0x54
 8010906:	81a3      	strhlt	r3, [r4, #12]
 8010908:	bd10      	pop	{r4, pc}

0801090a <__swrite>:
 801090a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801090e:	461f      	mov	r7, r3
 8010910:	898b      	ldrh	r3, [r1, #12]
 8010912:	05db      	lsls	r3, r3, #23
 8010914:	4605      	mov	r5, r0
 8010916:	460c      	mov	r4, r1
 8010918:	4616      	mov	r6, r2
 801091a:	d505      	bpl.n	8010928 <__swrite+0x1e>
 801091c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010920:	2302      	movs	r3, #2
 8010922:	2200      	movs	r2, #0
 8010924:	f000 f868 	bl	80109f8 <_lseek_r>
 8010928:	89a3      	ldrh	r3, [r4, #12]
 801092a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801092e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010932:	81a3      	strh	r3, [r4, #12]
 8010934:	4632      	mov	r2, r6
 8010936:	463b      	mov	r3, r7
 8010938:	4628      	mov	r0, r5
 801093a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801093e:	f000 b817 	b.w	8010970 <_write_r>

08010942 <__sseek>:
 8010942:	b510      	push	{r4, lr}
 8010944:	460c      	mov	r4, r1
 8010946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801094a:	f000 f855 	bl	80109f8 <_lseek_r>
 801094e:	1c43      	adds	r3, r0, #1
 8010950:	89a3      	ldrh	r3, [r4, #12]
 8010952:	bf15      	itete	ne
 8010954:	6560      	strne	r0, [r4, #84]	; 0x54
 8010956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801095a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801095e:	81a3      	strheq	r3, [r4, #12]
 8010960:	bf18      	it	ne
 8010962:	81a3      	strhne	r3, [r4, #12]
 8010964:	bd10      	pop	{r4, pc}

08010966 <__sclose>:
 8010966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801096a:	f000 b813 	b.w	8010994 <_close_r>
	...

08010970 <_write_r>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4d07      	ldr	r5, [pc, #28]	; (8010990 <_write_r+0x20>)
 8010974:	4604      	mov	r4, r0
 8010976:	4608      	mov	r0, r1
 8010978:	4611      	mov	r1, r2
 801097a:	2200      	movs	r2, #0
 801097c:	602a      	str	r2, [r5, #0]
 801097e:	461a      	mov	r2, r3
 8010980:	f7f8 fc89 	bl	8009296 <_write>
 8010984:	1c43      	adds	r3, r0, #1
 8010986:	d102      	bne.n	801098e <_write_r+0x1e>
 8010988:	682b      	ldr	r3, [r5, #0]
 801098a:	b103      	cbz	r3, 801098e <_write_r+0x1e>
 801098c:	6023      	str	r3, [r4, #0]
 801098e:	bd38      	pop	{r3, r4, r5, pc}
 8010990:	200003e4 	.word	0x200003e4

08010994 <_close_r>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	4d06      	ldr	r5, [pc, #24]	; (80109b0 <_close_r+0x1c>)
 8010998:	2300      	movs	r3, #0
 801099a:	4604      	mov	r4, r0
 801099c:	4608      	mov	r0, r1
 801099e:	602b      	str	r3, [r5, #0]
 80109a0:	f7f8 fc95 	bl	80092ce <_close>
 80109a4:	1c43      	adds	r3, r0, #1
 80109a6:	d102      	bne.n	80109ae <_close_r+0x1a>
 80109a8:	682b      	ldr	r3, [r5, #0]
 80109aa:	b103      	cbz	r3, 80109ae <_close_r+0x1a>
 80109ac:	6023      	str	r3, [r4, #0]
 80109ae:	bd38      	pop	{r3, r4, r5, pc}
 80109b0:	200003e4 	.word	0x200003e4

080109b4 <_fstat_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	4d07      	ldr	r5, [pc, #28]	; (80109d4 <_fstat_r+0x20>)
 80109b8:	2300      	movs	r3, #0
 80109ba:	4604      	mov	r4, r0
 80109bc:	4608      	mov	r0, r1
 80109be:	4611      	mov	r1, r2
 80109c0:	602b      	str	r3, [r5, #0]
 80109c2:	f7f8 fc90 	bl	80092e6 <_fstat>
 80109c6:	1c43      	adds	r3, r0, #1
 80109c8:	d102      	bne.n	80109d0 <_fstat_r+0x1c>
 80109ca:	682b      	ldr	r3, [r5, #0]
 80109cc:	b103      	cbz	r3, 80109d0 <_fstat_r+0x1c>
 80109ce:	6023      	str	r3, [r4, #0]
 80109d0:	bd38      	pop	{r3, r4, r5, pc}
 80109d2:	bf00      	nop
 80109d4:	200003e4 	.word	0x200003e4

080109d8 <_isatty_r>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4d06      	ldr	r5, [pc, #24]	; (80109f4 <_isatty_r+0x1c>)
 80109dc:	2300      	movs	r3, #0
 80109de:	4604      	mov	r4, r0
 80109e0:	4608      	mov	r0, r1
 80109e2:	602b      	str	r3, [r5, #0]
 80109e4:	f7f8 fc8f 	bl	8009306 <_isatty>
 80109e8:	1c43      	adds	r3, r0, #1
 80109ea:	d102      	bne.n	80109f2 <_isatty_r+0x1a>
 80109ec:	682b      	ldr	r3, [r5, #0]
 80109ee:	b103      	cbz	r3, 80109f2 <_isatty_r+0x1a>
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	bd38      	pop	{r3, r4, r5, pc}
 80109f4:	200003e4 	.word	0x200003e4

080109f8 <_lseek_r>:
 80109f8:	b538      	push	{r3, r4, r5, lr}
 80109fa:	4d07      	ldr	r5, [pc, #28]	; (8010a18 <_lseek_r+0x20>)
 80109fc:	4604      	mov	r4, r0
 80109fe:	4608      	mov	r0, r1
 8010a00:	4611      	mov	r1, r2
 8010a02:	2200      	movs	r2, #0
 8010a04:	602a      	str	r2, [r5, #0]
 8010a06:	461a      	mov	r2, r3
 8010a08:	f7f8 fc88 	bl	800931c <_lseek>
 8010a0c:	1c43      	adds	r3, r0, #1
 8010a0e:	d102      	bne.n	8010a16 <_lseek_r+0x1e>
 8010a10:	682b      	ldr	r3, [r5, #0]
 8010a12:	b103      	cbz	r3, 8010a16 <_lseek_r+0x1e>
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
 8010a18:	200003e4 	.word	0x200003e4

08010a1c <_malloc_usable_size_r>:
 8010a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a20:	1f18      	subs	r0, r3, #4
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	bfbc      	itt	lt
 8010a26:	580b      	ldrlt	r3, [r1, r0]
 8010a28:	18c0      	addlt	r0, r0, r3
 8010a2a:	4770      	bx	lr

08010a2c <_read_r>:
 8010a2c:	b538      	push	{r3, r4, r5, lr}
 8010a2e:	4d07      	ldr	r5, [pc, #28]	; (8010a4c <_read_r+0x20>)
 8010a30:	4604      	mov	r4, r0
 8010a32:	4608      	mov	r0, r1
 8010a34:	4611      	mov	r1, r2
 8010a36:	2200      	movs	r2, #0
 8010a38:	602a      	str	r2, [r5, #0]
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	f7f8 fc0e 	bl	800925c <_read>
 8010a40:	1c43      	adds	r3, r0, #1
 8010a42:	d102      	bne.n	8010a4a <_read_r+0x1e>
 8010a44:	682b      	ldr	r3, [r5, #0]
 8010a46:	b103      	cbz	r3, 8010a4a <_read_r+0x1e>
 8010a48:	6023      	str	r3, [r4, #0]
 8010a4a:	bd38      	pop	{r3, r4, r5, pc}
 8010a4c:	200003e4 	.word	0x200003e4

08010a50 <fmax>:
 8010a50:	b508      	push	{r3, lr}
 8010a52:	ed2d 8b04 	vpush	{d8-d9}
 8010a56:	eeb0 8a40 	vmov.f32	s16, s0
 8010a5a:	eef0 8a60 	vmov.f32	s17, s1
 8010a5e:	eeb0 9a41 	vmov.f32	s18, s2
 8010a62:	eef0 9a61 	vmov.f32	s19, s3
 8010a66:	f000 f81b 	bl	8010aa0 <__fpclassifyd>
 8010a6a:	b168      	cbz	r0, 8010a88 <fmax+0x38>
 8010a6c:	eeb0 0a49 	vmov.f32	s0, s18
 8010a70:	eef0 0a69 	vmov.f32	s1, s19
 8010a74:	f000 f814 	bl	8010aa0 <__fpclassifyd>
 8010a78:	b150      	cbz	r0, 8010a90 <fmax+0x40>
 8010a7a:	ec53 2b19 	vmov	r2, r3, d9
 8010a7e:	ec51 0b18 	vmov	r0, r1, d8
 8010a82:	f7f0 f849 	bl	8000b18 <__aeabi_dcmpgt>
 8010a86:	b918      	cbnz	r0, 8010a90 <fmax+0x40>
 8010a88:	eeb0 8a49 	vmov.f32	s16, s18
 8010a8c:	eef0 8a69 	vmov.f32	s17, s19
 8010a90:	eeb0 0a48 	vmov.f32	s0, s16
 8010a94:	eef0 0a68 	vmov.f32	s1, s17
 8010a98:	ecbd 8b04 	vpop	{d8-d9}
 8010a9c:	bd08      	pop	{r3, pc}
	...

08010aa0 <__fpclassifyd>:
 8010aa0:	ec51 0b10 	vmov	r0, r1, d0
 8010aa4:	b510      	push	{r4, lr}
 8010aa6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8010aaa:	460b      	mov	r3, r1
 8010aac:	d019      	beq.n	8010ae2 <__fpclassifyd+0x42>
 8010aae:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8010ab2:	490e      	ldr	r1, [pc, #56]	; (8010aec <__fpclassifyd+0x4c>)
 8010ab4:	428a      	cmp	r2, r1
 8010ab6:	d90e      	bls.n	8010ad6 <__fpclassifyd+0x36>
 8010ab8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8010abc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8010ac0:	428a      	cmp	r2, r1
 8010ac2:	d908      	bls.n	8010ad6 <__fpclassifyd+0x36>
 8010ac4:	4a0a      	ldr	r2, [pc, #40]	; (8010af0 <__fpclassifyd+0x50>)
 8010ac6:	4213      	tst	r3, r2
 8010ac8:	d007      	beq.n	8010ada <__fpclassifyd+0x3a>
 8010aca:	4294      	cmp	r4, r2
 8010acc:	d107      	bne.n	8010ade <__fpclassifyd+0x3e>
 8010ace:	fab0 f080 	clz	r0, r0
 8010ad2:	0940      	lsrs	r0, r0, #5
 8010ad4:	bd10      	pop	{r4, pc}
 8010ad6:	2004      	movs	r0, #4
 8010ad8:	e7fc      	b.n	8010ad4 <__fpclassifyd+0x34>
 8010ada:	2003      	movs	r0, #3
 8010adc:	e7fa      	b.n	8010ad4 <__fpclassifyd+0x34>
 8010ade:	2000      	movs	r0, #0
 8010ae0:	e7f8      	b.n	8010ad4 <__fpclassifyd+0x34>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d1ee      	bne.n	8010ac4 <__fpclassifyd+0x24>
 8010ae6:	2002      	movs	r0, #2
 8010ae8:	e7f4      	b.n	8010ad4 <__fpclassifyd+0x34>
 8010aea:	bf00      	nop
 8010aec:	7fdfffff 	.word	0x7fdfffff
 8010af0:	7ff00000 	.word	0x7ff00000
 8010af4:	00000000 	.word	0x00000000

08010af8 <exp>:
 8010af8:	b538      	push	{r3, r4, r5, lr}
 8010afa:	ed2d 8b02 	vpush	{d8}
 8010afe:	ec55 4b10 	vmov	r4, r5, d0
 8010b02:	f000 f86d 	bl	8010be0 <__ieee754_exp>
 8010b06:	eeb0 8a40 	vmov.f32	s16, s0
 8010b0a:	eef0 8a60 	vmov.f32	s17, s1
 8010b0e:	ec45 4b10 	vmov	d0, r4, r5
 8010b12:	f000 fac9 	bl	80110a8 <finite>
 8010b16:	b168      	cbz	r0, 8010b34 <exp+0x3c>
 8010b18:	a317      	add	r3, pc, #92	; (adr r3, 8010b78 <exp+0x80>)
 8010b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	4629      	mov	r1, r5
 8010b22:	f7ef fff9 	bl	8000b18 <__aeabi_dcmpgt>
 8010b26:	b160      	cbz	r0, 8010b42 <exp+0x4a>
 8010b28:	f7fb fd18 	bl	800c55c <__errno>
 8010b2c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8010b68 <exp+0x70>
 8010b30:	2322      	movs	r3, #34	; 0x22
 8010b32:	6003      	str	r3, [r0, #0]
 8010b34:	eeb0 0a48 	vmov.f32	s0, s16
 8010b38:	eef0 0a68 	vmov.f32	s1, s17
 8010b3c:	ecbd 8b02 	vpop	{d8}
 8010b40:	bd38      	pop	{r3, r4, r5, pc}
 8010b42:	a30f      	add	r3, pc, #60	; (adr r3, 8010b80 <exp+0x88>)
 8010b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b48:	4620      	mov	r0, r4
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	f7ef ffc6 	bl	8000adc <__aeabi_dcmplt>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d0ef      	beq.n	8010b34 <exp+0x3c>
 8010b54:	f7fb fd02 	bl	800c55c <__errno>
 8010b58:	2322      	movs	r3, #34	; 0x22
 8010b5a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8010b70 <exp+0x78>
 8010b5e:	6003      	str	r3, [r0, #0]
 8010b60:	e7e8      	b.n	8010b34 <exp+0x3c>
 8010b62:	bf00      	nop
 8010b64:	f3af 8000 	nop.w
 8010b68:	00000000 	.word	0x00000000
 8010b6c:	7ff00000 	.word	0x7ff00000
	...
 8010b78:	fefa39ef 	.word	0xfefa39ef
 8010b7c:	40862e42 	.word	0x40862e42
 8010b80:	d52d3051 	.word	0xd52d3051
 8010b84:	c0874910 	.word	0xc0874910

08010b88 <sqrt>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	ed2d 8b02 	vpush	{d8}
 8010b8e:	ec55 4b10 	vmov	r4, r5, d0
 8010b92:	f000 f9a7 	bl	8010ee4 <__ieee754_sqrt>
 8010b96:	4622      	mov	r2, r4
 8010b98:	462b      	mov	r3, r5
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	eeb0 8a40 	vmov.f32	s16, s0
 8010ba2:	eef0 8a60 	vmov.f32	s17, s1
 8010ba6:	f7ef ffc1 	bl	8000b2c <__aeabi_dcmpun>
 8010baa:	b990      	cbnz	r0, 8010bd2 <sqrt+0x4a>
 8010bac:	2200      	movs	r2, #0
 8010bae:	2300      	movs	r3, #0
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	f7ef ff92 	bl	8000adc <__aeabi_dcmplt>
 8010bb8:	b158      	cbz	r0, 8010bd2 <sqrt+0x4a>
 8010bba:	f7fb fccf 	bl	800c55c <__errno>
 8010bbe:	2321      	movs	r3, #33	; 0x21
 8010bc0:	6003      	str	r3, [r0, #0]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	4610      	mov	r0, r2
 8010bc8:	4619      	mov	r1, r3
 8010bca:	f7ef fe3f 	bl	800084c <__aeabi_ddiv>
 8010bce:	ec41 0b18 	vmov	d8, r0, r1
 8010bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8010bd6:	eef0 0a68 	vmov.f32	s1, s17
 8010bda:	ecbd 8b02 	vpop	{d8}
 8010bde:	bd38      	pop	{r3, r4, r5, pc}

08010be0 <__ieee754_exp>:
 8010be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010be4:	ec55 4b10 	vmov	r4, r5, d0
 8010be8:	49b5      	ldr	r1, [pc, #724]	; (8010ec0 <__ieee754_exp+0x2e0>)
 8010bea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010bee:	428b      	cmp	r3, r1
 8010bf0:	ed2d 8b04 	vpush	{d8-d9}
 8010bf4:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8010bf8:	d93d      	bls.n	8010c76 <__ieee754_exp+0x96>
 8010bfa:	49b2      	ldr	r1, [pc, #712]	; (8010ec4 <__ieee754_exp+0x2e4>)
 8010bfc:	428b      	cmp	r3, r1
 8010bfe:	d918      	bls.n	8010c32 <__ieee754_exp+0x52>
 8010c00:	ee10 3a10 	vmov	r3, s0
 8010c04:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	d009      	beq.n	8010c20 <__ieee754_exp+0x40>
 8010c0c:	ee10 2a10 	vmov	r2, s0
 8010c10:	462b      	mov	r3, r5
 8010c12:	4620      	mov	r0, r4
 8010c14:	4629      	mov	r1, r5
 8010c16:	f7ef fb39 	bl	800028c <__adddf3>
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	460d      	mov	r5, r1
 8010c1e:	e002      	b.n	8010c26 <__ieee754_exp+0x46>
 8010c20:	b10e      	cbz	r6, 8010c26 <__ieee754_exp+0x46>
 8010c22:	2400      	movs	r4, #0
 8010c24:	2500      	movs	r5, #0
 8010c26:	ecbd 8b04 	vpop	{d8-d9}
 8010c2a:	ec45 4b10 	vmov	d0, r4, r5
 8010c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c32:	a38d      	add	r3, pc, #564	; (adr r3, 8010e68 <__ieee754_exp+0x288>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	ee10 0a10 	vmov	r0, s0
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	f7ef ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8010c42:	4607      	mov	r7, r0
 8010c44:	b130      	cbz	r0, 8010c54 <__ieee754_exp+0x74>
 8010c46:	ecbd 8b04 	vpop	{d8-d9}
 8010c4a:	2000      	movs	r0, #0
 8010c4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c50:	f000 ba21 	b.w	8011096 <__math_oflow>
 8010c54:	a386      	add	r3, pc, #536	; (adr r3, 8010e70 <__ieee754_exp+0x290>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	4620      	mov	r0, r4
 8010c5c:	4629      	mov	r1, r5
 8010c5e:	f7ef ff3d 	bl	8000adc <__aeabi_dcmplt>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	f000 808b 	beq.w	8010d7e <__ieee754_exp+0x19e>
 8010c68:	ecbd 8b04 	vpop	{d8-d9}
 8010c6c:	4638      	mov	r0, r7
 8010c6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c72:	f000 ba07 	b.w	8011084 <__math_uflow>
 8010c76:	4a94      	ldr	r2, [pc, #592]	; (8010ec8 <__ieee754_exp+0x2e8>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	f240 80ac 	bls.w	8010dd6 <__ieee754_exp+0x1f6>
 8010c7e:	4a93      	ldr	r2, [pc, #588]	; (8010ecc <__ieee754_exp+0x2ec>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d87c      	bhi.n	8010d7e <__ieee754_exp+0x19e>
 8010c84:	4b92      	ldr	r3, [pc, #584]	; (8010ed0 <__ieee754_exp+0x2f0>)
 8010c86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c8e:	ee10 0a10 	vmov	r0, s0
 8010c92:	4629      	mov	r1, r5
 8010c94:	f7ef faf8 	bl	8000288 <__aeabi_dsub>
 8010c98:	4b8e      	ldr	r3, [pc, #568]	; (8010ed4 <__ieee754_exp+0x2f4>)
 8010c9a:	00f7      	lsls	r7, r6, #3
 8010c9c:	443b      	add	r3, r7
 8010c9e:	ed93 7b00 	vldr	d7, [r3]
 8010ca2:	f1c6 0a01 	rsb	sl, r6, #1
 8010ca6:	4680      	mov	r8, r0
 8010ca8:	4689      	mov	r9, r1
 8010caa:	ebaa 0a06 	sub.w	sl, sl, r6
 8010cae:	eeb0 8a47 	vmov.f32	s16, s14
 8010cb2:	eef0 8a67 	vmov.f32	s17, s15
 8010cb6:	ec53 2b18 	vmov	r2, r3, d8
 8010cba:	4640      	mov	r0, r8
 8010cbc:	4649      	mov	r1, r9
 8010cbe:	f7ef fae3 	bl	8000288 <__aeabi_dsub>
 8010cc2:	4604      	mov	r4, r0
 8010cc4:	460d      	mov	r5, r1
 8010cc6:	4622      	mov	r2, r4
 8010cc8:	462b      	mov	r3, r5
 8010cca:	4620      	mov	r0, r4
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f7ef fc93 	bl	80005f8 <__aeabi_dmul>
 8010cd2:	a369      	add	r3, pc, #420	; (adr r3, 8010e78 <__ieee754_exp+0x298>)
 8010cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd8:	4606      	mov	r6, r0
 8010cda:	460f      	mov	r7, r1
 8010cdc:	f7ef fc8c 	bl	80005f8 <__aeabi_dmul>
 8010ce0:	a367      	add	r3, pc, #412	; (adr r3, 8010e80 <__ieee754_exp+0x2a0>)
 8010ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce6:	f7ef facf 	bl	8000288 <__aeabi_dsub>
 8010cea:	4632      	mov	r2, r6
 8010cec:	463b      	mov	r3, r7
 8010cee:	f7ef fc83 	bl	80005f8 <__aeabi_dmul>
 8010cf2:	a365      	add	r3, pc, #404	; (adr r3, 8010e88 <__ieee754_exp+0x2a8>)
 8010cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf8:	f7ef fac8 	bl	800028c <__adddf3>
 8010cfc:	4632      	mov	r2, r6
 8010cfe:	463b      	mov	r3, r7
 8010d00:	f7ef fc7a 	bl	80005f8 <__aeabi_dmul>
 8010d04:	a362      	add	r3, pc, #392	; (adr r3, 8010e90 <__ieee754_exp+0x2b0>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	f7ef fabd 	bl	8000288 <__aeabi_dsub>
 8010d0e:	4632      	mov	r2, r6
 8010d10:	463b      	mov	r3, r7
 8010d12:	f7ef fc71 	bl	80005f8 <__aeabi_dmul>
 8010d16:	a360      	add	r3, pc, #384	; (adr r3, 8010e98 <__ieee754_exp+0x2b8>)
 8010d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1c:	f7ef fab6 	bl	800028c <__adddf3>
 8010d20:	4632      	mov	r2, r6
 8010d22:	463b      	mov	r3, r7
 8010d24:	f7ef fc68 	bl	80005f8 <__aeabi_dmul>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	4629      	mov	r1, r5
 8010d30:	f7ef faaa 	bl	8000288 <__aeabi_dsub>
 8010d34:	4602      	mov	r2, r0
 8010d36:	460b      	mov	r3, r1
 8010d38:	4606      	mov	r6, r0
 8010d3a:	460f      	mov	r7, r1
 8010d3c:	4620      	mov	r0, r4
 8010d3e:	4629      	mov	r1, r5
 8010d40:	f7ef fc5a 	bl	80005f8 <__aeabi_dmul>
 8010d44:	ec41 0b19 	vmov	d9, r0, r1
 8010d48:	f1ba 0f00 	cmp.w	sl, #0
 8010d4c:	d15d      	bne.n	8010e0a <__ieee754_exp+0x22a>
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d54:	4630      	mov	r0, r6
 8010d56:	4639      	mov	r1, r7
 8010d58:	f7ef fa96 	bl	8000288 <__aeabi_dsub>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	460b      	mov	r3, r1
 8010d60:	ec51 0b19 	vmov	r0, r1, d9
 8010d64:	f7ef fd72 	bl	800084c <__aeabi_ddiv>
 8010d68:	4622      	mov	r2, r4
 8010d6a:	462b      	mov	r3, r5
 8010d6c:	f7ef fa8c 	bl	8000288 <__aeabi_dsub>
 8010d70:	4602      	mov	r2, r0
 8010d72:	460b      	mov	r3, r1
 8010d74:	2000      	movs	r0, #0
 8010d76:	4958      	ldr	r1, [pc, #352]	; (8010ed8 <__ieee754_exp+0x2f8>)
 8010d78:	f7ef fa86 	bl	8000288 <__aeabi_dsub>
 8010d7c:	e74d      	b.n	8010c1a <__ieee754_exp+0x3a>
 8010d7e:	4857      	ldr	r0, [pc, #348]	; (8010edc <__ieee754_exp+0x2fc>)
 8010d80:	a347      	add	r3, pc, #284	; (adr r3, 8010ea0 <__ieee754_exp+0x2c0>)
 8010d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d86:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	f7ef fc33 	bl	80005f8 <__aeabi_dmul>
 8010d92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d96:	f7ef fa79 	bl	800028c <__adddf3>
 8010d9a:	f7ef fedd 	bl	8000b58 <__aeabi_d2iz>
 8010d9e:	4682      	mov	sl, r0
 8010da0:	f7ef fbc0 	bl	8000524 <__aeabi_i2d>
 8010da4:	a340      	add	r3, pc, #256	; (adr r3, 8010ea8 <__ieee754_exp+0x2c8>)
 8010da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010daa:	4606      	mov	r6, r0
 8010dac:	460f      	mov	r7, r1
 8010dae:	f7ef fc23 	bl	80005f8 <__aeabi_dmul>
 8010db2:	4602      	mov	r2, r0
 8010db4:	460b      	mov	r3, r1
 8010db6:	4620      	mov	r0, r4
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7ef fa65 	bl	8000288 <__aeabi_dsub>
 8010dbe:	a33c      	add	r3, pc, #240	; (adr r3, 8010eb0 <__ieee754_exp+0x2d0>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	4680      	mov	r8, r0
 8010dc6:	4689      	mov	r9, r1
 8010dc8:	4630      	mov	r0, r6
 8010dca:	4639      	mov	r1, r7
 8010dcc:	f7ef fc14 	bl	80005f8 <__aeabi_dmul>
 8010dd0:	ec41 0b18 	vmov	d8, r0, r1
 8010dd4:	e76f      	b.n	8010cb6 <__ieee754_exp+0xd6>
 8010dd6:	4a42      	ldr	r2, [pc, #264]	; (8010ee0 <__ieee754_exp+0x300>)
 8010dd8:	4293      	cmp	r3, r2
 8010dda:	d811      	bhi.n	8010e00 <__ieee754_exp+0x220>
 8010ddc:	a336      	add	r3, pc, #216	; (adr r3, 8010eb8 <__ieee754_exp+0x2d8>)
 8010dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de2:	ee10 0a10 	vmov	r0, s0
 8010de6:	4629      	mov	r1, r5
 8010de8:	f7ef fa50 	bl	800028c <__adddf3>
 8010dec:	4b3a      	ldr	r3, [pc, #232]	; (8010ed8 <__ieee754_exp+0x2f8>)
 8010dee:	2200      	movs	r2, #0
 8010df0:	f7ef fe92 	bl	8000b18 <__aeabi_dcmpgt>
 8010df4:	b138      	cbz	r0, 8010e06 <__ieee754_exp+0x226>
 8010df6:	4b38      	ldr	r3, [pc, #224]	; (8010ed8 <__ieee754_exp+0x2f8>)
 8010df8:	2200      	movs	r2, #0
 8010dfa:	4620      	mov	r0, r4
 8010dfc:	4629      	mov	r1, r5
 8010dfe:	e70a      	b.n	8010c16 <__ieee754_exp+0x36>
 8010e00:	f04f 0a00 	mov.w	sl, #0
 8010e04:	e75f      	b.n	8010cc6 <__ieee754_exp+0xe6>
 8010e06:	4682      	mov	sl, r0
 8010e08:	e75d      	b.n	8010cc6 <__ieee754_exp+0xe6>
 8010e0a:	4632      	mov	r2, r6
 8010e0c:	463b      	mov	r3, r7
 8010e0e:	2000      	movs	r0, #0
 8010e10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010e14:	f7ef fa38 	bl	8000288 <__aeabi_dsub>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	ec51 0b19 	vmov	r0, r1, d9
 8010e20:	f7ef fd14 	bl	800084c <__aeabi_ddiv>
 8010e24:	4602      	mov	r2, r0
 8010e26:	460b      	mov	r3, r1
 8010e28:	ec51 0b18 	vmov	r0, r1, d8
 8010e2c:	f7ef fa2c 	bl	8000288 <__aeabi_dsub>
 8010e30:	4642      	mov	r2, r8
 8010e32:	464b      	mov	r3, r9
 8010e34:	f7ef fa28 	bl	8000288 <__aeabi_dsub>
 8010e38:	4602      	mov	r2, r0
 8010e3a:	460b      	mov	r3, r1
 8010e3c:	2000      	movs	r0, #0
 8010e3e:	4926      	ldr	r1, [pc, #152]	; (8010ed8 <__ieee754_exp+0x2f8>)
 8010e40:	f7ef fa22 	bl	8000288 <__aeabi_dsub>
 8010e44:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8010e48:	4592      	cmp	sl, r2
 8010e4a:	db02      	blt.n	8010e52 <__ieee754_exp+0x272>
 8010e4c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010e50:	e6e3      	b.n	8010c1a <__ieee754_exp+0x3a>
 8010e52:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8010e56:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8010e60:	f7ef fbca 	bl	80005f8 <__aeabi_dmul>
 8010e64:	e6d9      	b.n	8010c1a <__ieee754_exp+0x3a>
 8010e66:	bf00      	nop
 8010e68:	fefa39ef 	.word	0xfefa39ef
 8010e6c:	40862e42 	.word	0x40862e42
 8010e70:	d52d3051 	.word	0xd52d3051
 8010e74:	c0874910 	.word	0xc0874910
 8010e78:	72bea4d0 	.word	0x72bea4d0
 8010e7c:	3e663769 	.word	0x3e663769
 8010e80:	c5d26bf1 	.word	0xc5d26bf1
 8010e84:	3ebbbd41 	.word	0x3ebbbd41
 8010e88:	af25de2c 	.word	0xaf25de2c
 8010e8c:	3f11566a 	.word	0x3f11566a
 8010e90:	16bebd93 	.word	0x16bebd93
 8010e94:	3f66c16c 	.word	0x3f66c16c
 8010e98:	5555553e 	.word	0x5555553e
 8010e9c:	3fc55555 	.word	0x3fc55555
 8010ea0:	652b82fe 	.word	0x652b82fe
 8010ea4:	3ff71547 	.word	0x3ff71547
 8010ea8:	fee00000 	.word	0xfee00000
 8010eac:	3fe62e42 	.word	0x3fe62e42
 8010eb0:	35793c76 	.word	0x35793c76
 8010eb4:	3dea39ef 	.word	0x3dea39ef
 8010eb8:	8800759c 	.word	0x8800759c
 8010ebc:	7e37e43c 	.word	0x7e37e43c
 8010ec0:	40862e41 	.word	0x40862e41
 8010ec4:	7fefffff 	.word	0x7fefffff
 8010ec8:	3fd62e42 	.word	0x3fd62e42
 8010ecc:	3ff0a2b1 	.word	0x3ff0a2b1
 8010ed0:	08011878 	.word	0x08011878
 8010ed4:	08011888 	.word	0x08011888
 8010ed8:	3ff00000 	.word	0x3ff00000
 8010edc:	08011868 	.word	0x08011868
 8010ee0:	3defffff 	.word	0x3defffff

08010ee4 <__ieee754_sqrt>:
 8010ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ee8:	ec55 4b10 	vmov	r4, r5, d0
 8010eec:	4e55      	ldr	r6, [pc, #340]	; (8011044 <__ieee754_sqrt+0x160>)
 8010eee:	43ae      	bics	r6, r5
 8010ef0:	ee10 0a10 	vmov	r0, s0
 8010ef4:	ee10 3a10 	vmov	r3, s0
 8010ef8:	462a      	mov	r2, r5
 8010efa:	4629      	mov	r1, r5
 8010efc:	d110      	bne.n	8010f20 <__ieee754_sqrt+0x3c>
 8010efe:	ee10 2a10 	vmov	r2, s0
 8010f02:	462b      	mov	r3, r5
 8010f04:	f7ef fb78 	bl	80005f8 <__aeabi_dmul>
 8010f08:	4602      	mov	r2, r0
 8010f0a:	460b      	mov	r3, r1
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	4629      	mov	r1, r5
 8010f10:	f7ef f9bc 	bl	800028c <__adddf3>
 8010f14:	4604      	mov	r4, r0
 8010f16:	460d      	mov	r5, r1
 8010f18:	ec45 4b10 	vmov	d0, r4, r5
 8010f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f20:	2d00      	cmp	r5, #0
 8010f22:	dc10      	bgt.n	8010f46 <__ieee754_sqrt+0x62>
 8010f24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010f28:	4330      	orrs	r0, r6
 8010f2a:	d0f5      	beq.n	8010f18 <__ieee754_sqrt+0x34>
 8010f2c:	b15d      	cbz	r5, 8010f46 <__ieee754_sqrt+0x62>
 8010f2e:	ee10 2a10 	vmov	r2, s0
 8010f32:	462b      	mov	r3, r5
 8010f34:	ee10 0a10 	vmov	r0, s0
 8010f38:	f7ef f9a6 	bl	8000288 <__aeabi_dsub>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	460b      	mov	r3, r1
 8010f40:	f7ef fc84 	bl	800084c <__aeabi_ddiv>
 8010f44:	e7e6      	b.n	8010f14 <__ieee754_sqrt+0x30>
 8010f46:	1512      	asrs	r2, r2, #20
 8010f48:	d074      	beq.n	8011034 <__ieee754_sqrt+0x150>
 8010f4a:	07d4      	lsls	r4, r2, #31
 8010f4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010f50:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010f58:	bf5e      	ittt	pl
 8010f5a:	0fda      	lsrpl	r2, r3, #31
 8010f5c:	005b      	lslpl	r3, r3, #1
 8010f5e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010f62:	2400      	movs	r4, #0
 8010f64:	0fda      	lsrs	r2, r3, #31
 8010f66:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010f6a:	107f      	asrs	r7, r7, #1
 8010f6c:	005b      	lsls	r3, r3, #1
 8010f6e:	2516      	movs	r5, #22
 8010f70:	4620      	mov	r0, r4
 8010f72:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010f76:	1886      	adds	r6, r0, r2
 8010f78:	428e      	cmp	r6, r1
 8010f7a:	bfde      	ittt	le
 8010f7c:	1b89      	suble	r1, r1, r6
 8010f7e:	18b0      	addle	r0, r6, r2
 8010f80:	18a4      	addle	r4, r4, r2
 8010f82:	0049      	lsls	r1, r1, #1
 8010f84:	3d01      	subs	r5, #1
 8010f86:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010f8a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010f8e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f92:	d1f0      	bne.n	8010f76 <__ieee754_sqrt+0x92>
 8010f94:	462a      	mov	r2, r5
 8010f96:	f04f 0e20 	mov.w	lr, #32
 8010f9a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010f9e:	4281      	cmp	r1, r0
 8010fa0:	eb06 0c05 	add.w	ip, r6, r5
 8010fa4:	dc02      	bgt.n	8010fac <__ieee754_sqrt+0xc8>
 8010fa6:	d113      	bne.n	8010fd0 <__ieee754_sqrt+0xec>
 8010fa8:	459c      	cmp	ip, r3
 8010faa:	d811      	bhi.n	8010fd0 <__ieee754_sqrt+0xec>
 8010fac:	f1bc 0f00 	cmp.w	ip, #0
 8010fb0:	eb0c 0506 	add.w	r5, ip, r6
 8010fb4:	da43      	bge.n	801103e <__ieee754_sqrt+0x15a>
 8010fb6:	2d00      	cmp	r5, #0
 8010fb8:	db41      	blt.n	801103e <__ieee754_sqrt+0x15a>
 8010fba:	f100 0801 	add.w	r8, r0, #1
 8010fbe:	1a09      	subs	r1, r1, r0
 8010fc0:	459c      	cmp	ip, r3
 8010fc2:	bf88      	it	hi
 8010fc4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010fc8:	eba3 030c 	sub.w	r3, r3, ip
 8010fcc:	4432      	add	r2, r6
 8010fce:	4640      	mov	r0, r8
 8010fd0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010fd4:	f1be 0e01 	subs.w	lr, lr, #1
 8010fd8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010fdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010fe0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010fe4:	d1db      	bne.n	8010f9e <__ieee754_sqrt+0xba>
 8010fe6:	430b      	orrs	r3, r1
 8010fe8:	d006      	beq.n	8010ff8 <__ieee754_sqrt+0x114>
 8010fea:	1c50      	adds	r0, r2, #1
 8010fec:	bf13      	iteet	ne
 8010fee:	3201      	addne	r2, #1
 8010ff0:	3401      	addeq	r4, #1
 8010ff2:	4672      	moveq	r2, lr
 8010ff4:	f022 0201 	bicne.w	r2, r2, #1
 8010ff8:	1063      	asrs	r3, r4, #1
 8010ffa:	0852      	lsrs	r2, r2, #1
 8010ffc:	07e1      	lsls	r1, r4, #31
 8010ffe:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011002:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011006:	bf48      	it	mi
 8011008:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801100c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011010:	4614      	mov	r4, r2
 8011012:	e781      	b.n	8010f18 <__ieee754_sqrt+0x34>
 8011014:	0ad9      	lsrs	r1, r3, #11
 8011016:	3815      	subs	r0, #21
 8011018:	055b      	lsls	r3, r3, #21
 801101a:	2900      	cmp	r1, #0
 801101c:	d0fa      	beq.n	8011014 <__ieee754_sqrt+0x130>
 801101e:	02cd      	lsls	r5, r1, #11
 8011020:	d50a      	bpl.n	8011038 <__ieee754_sqrt+0x154>
 8011022:	f1c2 0420 	rsb	r4, r2, #32
 8011026:	fa23 f404 	lsr.w	r4, r3, r4
 801102a:	1e55      	subs	r5, r2, #1
 801102c:	4093      	lsls	r3, r2
 801102e:	4321      	orrs	r1, r4
 8011030:	1b42      	subs	r2, r0, r5
 8011032:	e78a      	b.n	8010f4a <__ieee754_sqrt+0x66>
 8011034:	4610      	mov	r0, r2
 8011036:	e7f0      	b.n	801101a <__ieee754_sqrt+0x136>
 8011038:	0049      	lsls	r1, r1, #1
 801103a:	3201      	adds	r2, #1
 801103c:	e7ef      	b.n	801101e <__ieee754_sqrt+0x13a>
 801103e:	4680      	mov	r8, r0
 8011040:	e7bd      	b.n	8010fbe <__ieee754_sqrt+0xda>
 8011042:	bf00      	nop
 8011044:	7ff00000 	.word	0x7ff00000

08011048 <with_errno>:
 8011048:	b570      	push	{r4, r5, r6, lr}
 801104a:	4604      	mov	r4, r0
 801104c:	460d      	mov	r5, r1
 801104e:	4616      	mov	r6, r2
 8011050:	f7fb fa84 	bl	800c55c <__errno>
 8011054:	4629      	mov	r1, r5
 8011056:	6006      	str	r6, [r0, #0]
 8011058:	4620      	mov	r0, r4
 801105a:	bd70      	pop	{r4, r5, r6, pc}

0801105c <xflow>:
 801105c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801105e:	4614      	mov	r4, r2
 8011060:	461d      	mov	r5, r3
 8011062:	b108      	cbz	r0, 8011068 <xflow+0xc>
 8011064:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011068:	e9cd 2300 	strd	r2, r3, [sp]
 801106c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011070:	4620      	mov	r0, r4
 8011072:	4629      	mov	r1, r5
 8011074:	f7ef fac0 	bl	80005f8 <__aeabi_dmul>
 8011078:	2222      	movs	r2, #34	; 0x22
 801107a:	b003      	add	sp, #12
 801107c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011080:	f7ff bfe2 	b.w	8011048 <with_errno>

08011084 <__math_uflow>:
 8011084:	b508      	push	{r3, lr}
 8011086:	2200      	movs	r2, #0
 8011088:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801108c:	f7ff ffe6 	bl	801105c <xflow>
 8011090:	ec41 0b10 	vmov	d0, r0, r1
 8011094:	bd08      	pop	{r3, pc}

08011096 <__math_oflow>:
 8011096:	b508      	push	{r3, lr}
 8011098:	2200      	movs	r2, #0
 801109a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801109e:	f7ff ffdd 	bl	801105c <xflow>
 80110a2:	ec41 0b10 	vmov	d0, r0, r1
 80110a6:	bd08      	pop	{r3, pc}

080110a8 <finite>:
 80110a8:	b082      	sub	sp, #8
 80110aa:	ed8d 0b00 	vstr	d0, [sp]
 80110ae:	9801      	ldr	r0, [sp, #4]
 80110b0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80110b4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80110b8:	0fc0      	lsrs	r0, r0, #31
 80110ba:	b002      	add	sp, #8
 80110bc:	4770      	bx	lr
	...

080110c0 <_init>:
 80110c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c2:	bf00      	nop
 80110c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110c6:	bc08      	pop	{r3}
 80110c8:	469e      	mov	lr, r3
 80110ca:	4770      	bx	lr

080110cc <_fini>:
 80110cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ce:	bf00      	nop
 80110d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110d2:	bc08      	pop	{r3}
 80110d4:	469e      	mov	lr, r3
 80110d6:	4770      	bx	lr
